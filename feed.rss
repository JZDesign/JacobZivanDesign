<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Jacob Zivan Design</title><description>Musings and learnings from a banker turned nerd - Tips, tutorials, principles, and thought processes on life and software.</description><link>https://JacobZivanDesign.com</link><language>en</language><lastBuildDate>Fri, 1 Jan 2021 18:58:36 -0600</lastBuildDate><pubDate>Fri, 1 Jan 2021 18:58:36 -0600</pubDate><ttl>250</ttl><atom:link href="https://JacobZivanDesign.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/why-we-work-matters</guid><title>Why We Work Matters</title><description>Work with purpose, and be diligent, even in the little things.</description><link>https://JacobZivanDesign.com/technology/why-we-work-matters</link><pubDate>Fri, 1 Jan 2021 09:10:00 -0600</pubDate><content:encoded><![CDATA[<h1>Why We Work Matters</h1><p>Have you ever worked on a project that you were passionate about? I'm fortunate in that I get to all the time. It makes a difference in how I approach the work. When I'm passionate about a problem, I <em>want</em> to solve it, and I want to do it well. The opposite is generally true too. If we are impassionate about a task or a problem, we may try to get the job done hastily so we can get back to the things that we enjoy working on.</p><p><em>What are some things you loathe doing? Writing documents? Working in a legacy code base? UI/UX?</em></p><blockquote><p>If we are impassionate about a task or a problem, we may try to get the job done hastily so we can get back to the things that we enjoy working on.</p></blockquote><p>I hate that we do that. So I sat down and thought about our haste to solve less satisfying puzzles as a problem to be solved. This is what I found.</p><h2>We don't understand <em>Why We Work.</em></h2><p>So why <em>are</em> you a software engineer? Yea, it's fun, it's interesting, and it can pay pretty well. That's not where I'm going. We're hired for the way our brains work. We're quite adept at looking at something, understanding it, and offering solutions. We are hired to solve <em>user problems.</em> To make systems that can scale, are resilient to the future, and has a low lift for others to enter and work on after we've moved on to other projects.</p><blockquote><p>We are hired to solve user problems.</p></blockquote><p>Who are our users? Obvious right? The people who use the applications we write. Well, yes. That is true. Although that's an incomplete answer. What about our application's data, who uses that? What about the documents that you write? Or the internal API you're working on? What about the code base in general? Who are the users of your output?</p><blockquote><p>Who are the users of your output?</p></blockquote><p>That question changed the way I work. All of the code I write is not just for an end user. It's for the business and the new hires that they will make at a later date. It's for a future me who has to maintain it. The same applies for the documentation that I write. It doesn't immediately impact the end user, but the way we handle the mundane tasks will have a great impact on those users in the future.</p><p>I thought about my output, how it would be consumed, and the impact my work would have on the future. I didn't like the forecast. So I changed it. I decided that I work to serve others, not for the paycheck. I take <em>"little things"</em> quite seriously now. The impact has been significant.</p><p>All aspects of the craft are impacted by this decision. It's made me more serious about pure functions, explicit naming, making impossible state impossible, the Single Responsibility Principle, testing and so much more. Even documentation, which I used to dread, has become a thing I enjoy and take seriously.</p><p>I find myself asking, who will be a "user" of my output when I pull a ticket now. That habit lead me to perform a user interview with one of our data engineers recently, the result of which is now going to change the structure of our logs as a whole.</p><p>When I write a document, I ask similar questions. Who is my audience, what is the purpose, how does it serve?</p><blockquote><p>"I decided that I work to serve others"</p></blockquote><p>Why do you work?</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/small-prs</guid><title>Small Pull Requests</title><description>Work faster, find more bugs, write better code, be a better coworker.</description><link>https://JacobZivanDesign.com/technology/small-prs</link><pubDate>Fri, 1 Jan 2021 06:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Small Pull Requests</h1><p>We've all seen Pull Requests <em>(or PRs)</em> that are so large that they are daunting to review, or the PR covers so many different topics that it's hard to keep things straight. I've seen PRs where there are refactors, renames, many business logic additions, helper method introductions, integrations for all the things, sometimes UI related work, and hopefully some tests. That makes for a large PR, like this one:</p><img src="../../images/largePR.png" alt="Extremely Large Pull Request of actual code changes - Not a simple configuration change or forgot to add a gitignore line."/><p>When we're asked to review a PR like that, it's easy to get frustrated. Especially because that is an actual code change and not a one off that wasn't included in the <code>.gitignore</code> by accident. When confronted with a massive code change for review, I found myself asking questions I couldn't answer.</p><ol><li><em>"Where do I start?"</em></li><li><em>"What am I looking at?"</em></li><li><em>"What does it do?"</em></li><li><em>"How does it work?"</em></li></ol><p>Frankly, these are hard questions to answer when you're looking through 20+ files in a black box, wading through multiple classes and concepts, and are forced to literally try and piece an expert level puzzle together.</p><p>Fortunately, there is a remedy to this problem. Small Pull Requests.</p><br/><br/><h2>What is a small PR?</h2><p>Put simply, a Small Pull Request is a code change of small conceptual complexity, preferably a singular conceptual change.</p><p>It's <em>that</em> simple. The hard part is restraint.</p><p>Often, when we approach a problem, we first go to the code to explore and figure things out. This is a natural and common way we seek to solve the tasks before us, and that approach isn't a bad one. However, what we choose to do after we have explored that problem and decide on the solution can be problematic. It feels natural to keep fighting and slay the dragon then and there. After all, we just figured out the problem, the code is working... "Ship it!"</p><p><strong>NO!</strong></p><p>What we should do is slow down and move forward using what I call the Single Conceptual Change Principle.</p><blockquote><p>Single Conceptual Change Principle: The conscious scoping of code changes into small related units</p></blockquote><p>When exercising the single conceptual change principle the natural by-product is a surprisingly small amount of changed or added code for review. Like this one:</p><img src="../../images/smallPR.png" alt="Small PR Example"/><br/><h3>What do you mean by <em>"singular conceptual change?"</em></h3><br/><p>I'm glad you asked. I'll illustrate with the following scenario:</p><p>You are tasked with logging errors because QA found a bug that's hard to reproduce. Bad news is, there is no logging in your app currently so you've got some work cut out for you. After some digging around you find a new service that is cheap and easy to integrate, so you go ahead and add that dependency to your project. While you're in there, you create a custom logger to reduce the amount of code you need to write to send the errors you want to send with the user information that may be helpful to unwind the errors later. You test it, it works. So now you decide to go and add the logging event to every button press and caught exception in your application. It took three days to figure it all out and push up your code, but it's all there. "No stone left unturned," or so you think.</p><p>You requested review of your large PR at 1500 lines of code and 56 files changed three days ago and it's still not approved, so you badger someone to get to it and they push it through... along with 4 new bugs.</p><h4><em>Make it smaller</em></h4><p>That scenario could have gone differently. Those bugs could have been caught and the code could have been merged in sooner if it had been broken apart. The Pull Requests could have looked more like this:</p><table><thead><tr><th><strong>PR Scope</strong></th><th><strong>Change Footprint</strong></th><th><strong>Feedback</strong></th></tr></thead><tbody><tr><td>Adds logging dependency</td><td>3 files 36 lines of code</td><td>Thumbs Up</td></tr><tr><td>Creates logger class that logs fatal and not fatal messages + tests</td><td>2 File changed, 82 lines of code</td><td>Questions and Conversation</td></tr><tr><td>Creates <code>UserInfo</code> object to get passed along with logged errors for debugging ease</td><td>1 file changed 24 lines of code</td><td>Thumbs Up</td></tr><tr><td>Refactors logger to use optional <code>UserInfo</code> object + tests</td><td>2 files changed 42 lines of code</td><td>Comments and minor optimizations</td></tr><tr><td>Use logger at suspected failure points</td><td>8 files changed 94 lines of code</td><td>2 Defects found, accidentally deleted stuff you didn't mean to</td></tr><tr><td>Use logger at other high risk points...</td><td>7 files changed ... etc.,</td><td></td></tr><tr><td>+ however many more changes you decide to make.</td><td></td><td></td></tr></tbody></table><p>Each one of those PR's covers a small amount of work. The person reviewing them will be able to review it with ease, and will more likely catch errors made or leave feedback that could enhance your design. Plus, because the PRs are so small, people get to the review earlier, and complete it far faster than those large ones.</p><br/><h2>How to be effective with Small PRs</h2><br/><h3>1. Understand the Problem</h3><br/><p>First you need to understand the problem. Here is where we explore in code, ask our questions and get clarity on the task, or try and cut scope if we can.</p><br/><h3>2. Design First</h3><br/><p>After you've researched the problem and found some potential solutions, often times the next best foot forward is to write up a design document and send it to your peers.</p><p>Seems heavy handed? Sometimes it is. Even so, the exercise is worth it. When you're good at it, you can skip it for the truly small stuff. At the very least grab someone who would generally review your code <em>(if not possible anyone nerdy will do)</em>, take them to a whiteboard and start explaining the problem, what you've learned, and how you plan on solving it.</p><h4>Why?</h4><p>Several awesome things happen here.</p><ol><li>Steps can be named and PR's can be planned in advance</li><li>The person or persons reviewing your code have context. This allows them to push back on stuff that is important, and to <em>not</em> push back on stuff that they know will be addressed in the coming small prs.</li><li>You get feedback <em>before</em> you implement a solution. This can sometimes alter your solution so dramatically and save an incredible amount of time.</li><li>Naming and conceptual integrity concerns can often be addressed and solved before code review</li></ol><p><em>There are many more benefits to pairing with others on designing the solution for your problem.</em></p><br/><h3>3. Commit to Single Concept PRs</h3><br/><p>If you don't do this, even if you did steps 1 + 2, by not breaking the work apart the code change will still end up being a monster that the team will take time to review and will often miss defects or other code smells.</p><br/><p><strong>Single Concept PR's for dummies</strong></p><ol start="0"><li>Understand Problem &amp; Plan it out</li><li>Add Thing A with Tests (1 PR)</li><li>Add Thing B with Tests (1 PR)</li><li>Wire Thing A + B together + tests (1 PR)</li><li>Repeat steps 1 - 3</li></ol><h3>4. Bask in the glorious feeling of efficiently shipping awesome code</h3>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/musings/Disposable</guid><title>Disposable...</title><description>We are conditioned to consume. Would you trade your future for your present?</description><link>https://JacobZivanDesign.com/musings/Disposable</link><pubDate>Thu, 31 Dec 2020 08:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Disposable...</h1><p>For decades, culture has taught us to sacrifice the future for the present. That we need to behave, look, or live a certain way to be happy. We're sold a fantasy where the clothes we wear, and the items we own define us. We're made to believe that if we have any funds left over, after our necessities are paid for each month, that is called "disposable income." We're made to consume, consume, consume.</p><blockquote><p>If you have any funds left over, after your necessities are paid for each month, that is called "disposable income."</p></blockquote><p>That is how we think of things today isn't it? Disposable. We <em>need</em> whats <em>new</em>, <em>fresh</em>, or <em>trendy</em>. Just toss the old thing and get the new thing. You've got disposable income, so what does it matter?</p><br/><br/><h2>"You Only Live Once"</h2><p>Lease a new cell phone every year, the payment is only $30 a month! Trade in your car for a loss, get that new car, you deserve it. You can afford $400 a month! Need new clothes? Get this store card for 20% off your first purchase! Your payments will be minimal. New place? Furnish it on credit! Christmas time, again, put it on credit!</p><p>Before most of us know it, we're stressed out, unsatisfied, unhealthy, and swimming in debt. Now our payments are so high, we don't have enough money left after our bills to <em>not</em> use the credit card to survive, and that stresses us out even more. We fight with our spouses and our kids because the life we're living isn't what it's supposed to be. It seems hopeless.</p><h3>Lies</h3><br/><p>How can we live the life we want to live? <em>"We have to make more money"</em> we think to ourselves as we chase down a higher paying job that we won't find satisfaction in. <em>"We need more time"</em> we say to ourselves as we wait in the fast food drive through attempting to save some. <em>"We need a vacation"</em> we tell ourselves because we're so stressed out. <em>"We deserve it."</em></p><p>Whatever those lies are that we're telling ourselves, all we're really doing is justifying that act of trading our futures for our present.</p><blockquote><p>"We deserve it"</p></blockquote><p>We treat everything as if it's disposable. Our money, our possessions, our relationships, our bodies... The YOLO culture has us believing lies. There is a better way.</p><br/><br/><h2>Take a different path</h2><blockquote><p>"Yesterday is gone. Tomorrow has not yet come. We have only today. Let us begin" - Mother Teresa</p></blockquote><p>There is a better way. Like most good things, it's not easy, but it is done every day by millions of people. It starts with a very simple mental shift, a kind of audit. Start thinking about the outcomes of the way you're living your life. Then think if those outcomes are what you desire for your life. <em>At Ramsey Solutions, we refer to that as a "Desired Future"</em></p><p>If your actions won't bring you to your Desired Future, <em>(this is the hard part)</em> change your actions. <em>Profound... I know.</em></p><p>If we eat nothing but burgers and fries and sit on a couch all day, the outcome of those actions is more likely to be weight gain and heart problems than pristine health and physique. Just so, if we stop buying things on credit and pay more than our minimum payments the outcome will be that we will be debt free.</p><blockquote><p>"If your actions won't bring you to your Desired Future, change your actions."</p></blockquote><p>An effective way to change your actions is to get to know yourself. Start asking yourself some questions about your life and how you react to it.</p><p>How do I feel after spending time on social media? How much time did I just spend scrolling? Why did I do that? What do I want my life to look like in 15 years? What things make me feel anxious? What do I like about my job? What do I hate about my job? Do we need 2 cars, that second home, the time share, expensive vacations?</p><p>You may find this to be an enjoyable experience. You may not. Either way, your answers will act as a compass. If you want to go north, but your actions are pointing south... Change directions, it starts with you.</p><p>You are not disposable. Stop treating your life as if tomorrow doesn't matter. Be a better you. The world will be better for it.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/musings/soap-box-media</guid><title>A Soap Box on the Media</title><description>How do you ingest information? Actively or Passively?</description><link>https://JacobZivanDesign.com/musings/soap-box-media</link><pubDate>Wed, 30 Dec 2020 08:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>A Soap Box on the Media</h1><p>If you're like me, you're not on social media (I don't count LinkedIn). Heck, you don't even own a television! So you would get your news by actively seeking out information, reviewing the data, and discerning if it is credible or unbiased <em>hopefully</em> before establishing an opinion. If you're not like me, you likely get your information by placing yourself in the torrent of social media. Such is a place where you would get barraged by conflicting opinions, <em>"unbiased news media"</em>, and constant calls for outrage and hating your neighbor. My hope is that you are able to resist the subterfuge and remain in control of your emotions, many are not.</p><br/><p>Unfortunately for humanity, most of the truly unbiased information isn't presented by that menagerie. That kind of principled journalism has been dying off for a while, so it's difficult to find at all. Instead we are presented the information that produces the most profits.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/five-star-rating</guid><title>A Precise 5 Star Rating with SwiftUI</title><description>Make the infamous component from scratch!</description><link>https://JacobZivanDesign.com/technology/five-star-rating</link><pubDate>Sat, 19 Sep 2020 08:13:00 -0500</pubDate><content:encoded><![CDATA[<h1>A Precise 5 Star Rating with SwiftUI</h1><img src="../../images/5star.png" alt="5 star view"/><br/><br/><p>Recently, during some slack time at work, I took a look at a mockup we were showing customers during our discovery interviews. The mockup contained a 5 star rating view. You know the one I'm talking about, they're everywhere. Amazon, Airbnb, Walmart… you name it. To get some practice in SwiftUI, I decided I'd create that view component from scratch.</p><p>I had a few ideas on how to create the view:</p><ol><li>Give a progress view a custom mask.</li><li>Layout 5 stars and mask over the top of them with a rectangle.</li><li>And finally to use Apple's new <a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/">SFSymbols</a> to create a simple version using the full star and half star symbols, but that wasn't going to be precise enough to match the mock up.</li></ol><p>I decided to go with option two: Masking over 5 stars. Though I quickly realized that it wasn't a simple as masking over the collection of the stars. I had forgotten to account for the space between each star! After some thought, I chose to mask each star individually. This is how it works:</p><h2>A 5 point scale</h2><p>Each star needs to represent a portion of the scale. The first star represents 0 to 1, the second 1 to 2 and so on. The simplest solution I could think of was to iterate over an array of stars and create the mask from rating - index with a floor of 0 and a ceiling of 1.</p><p>For example, if the 5 star rating was 3.6, this is what the mask results would look like:</p><table><thead><tr><th align="right">Star Index</th><th align="right">Mask Value</th><th align="right">After normailzation</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">3.6</td><td align="right">1</td></tr><tr><td align="right">1</td><td align="right">2.6</td><td align="right">1</td></tr><tr><td align="right">2</td><td align="right">1.6</td><td align="right">1</td></tr><tr><td align="right">3</td><td align="right">0.6</td><td align="right">0.6</td></tr><tr><td align="right">4</td><td align="right">0</td><td align="right">0</td></tr></tbody></table><p>After that value is returned, we can use it to mask the star by multiplying the mask ratio by the star's width.</p><p>This is what the individual star's code looks like:</p><pre><code><span class="keyword">struct</span> RatingStar: <span class="type">View</span> {
    <span class="keyword">var</span> rating: <span class="type">CGFloat</span>
    <span class="keyword">var</span> color: <span class="type">Color</span>
    <span class="keyword">var</span> index: <span class="type">Int</span>
    
    
    <span class="keyword">var</span> maskRatio: <span class="type">CGFloat</span> {
        <span class="keyword">let</span> mask = rating - <span class="type">CGFloat</span>(index)
        
        <span class="keyword">switch</span> mask {
        <span class="keyword">case</span> <span class="number">1</span>...: <span class="keyword">return</span> <span class="number">1</span>
        <span class="keyword">case</span> ..&lt;<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span>
        <span class="keyword">default</span>: <span class="keyword">return</span> mask
        }
    }


    <span class="keyword">init</span>(rating: <span class="type">Decimal</span>, color: <span class="type">Color</span>, index: <span class="type">Int</span>) {
        <span class="comment">// Why decimal? Decoding floats and doubles is not accurate.</span>
        <span class="keyword">self</span>.<span class="property">rating</span> = <span class="type">CGFloat</span>(<span class="type">Double</span>(rating.<span class="property">description</span>) ?? <span class="number">0</span>)
        <span class="keyword">self</span>.<span class="property">color</span> = color
        <span class="keyword">self</span>.<span class="property">index</span> = index
    }


    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">GeometryReader</span> { star <span class="keyword">in</span>
            <span class="type">Image</span>(systemName: <span class="string">"star.fill"</span>)
                .<span class="call">foregroundColor</span>(<span class="keyword">self</span>.<span class="property">color</span>)
                .<span class="call">mask</span>(
                    <span class="type">Rectangle</span>()
                        .<span class="call">size</span>(
                            width: star.<span class="property">size</span>.<span class="property">width</span> * <span class="keyword">self</span>.<span class="property">maskRatio</span>,
                            height: star.<span class="property">size</span>.<span class="property">height</span>
                        )
                    
                )
        }
    }
}
</code></pre><br/><p>Easy right!? Let's lay the code out and see how it looks!</p><p>First, I wanted to separate the background stars and the foreground stars to keep things nice and clean. Next, I decided to put the image into its own view so any updates to it will apply to all locations a star image would be used.</p><pre><code><span class="keyword">public struct</span> FiveStarView: <span class="type">View</span> {
    <span class="keyword">var</span> rating: <span class="type">Decimal</span>
    <span class="keyword">var</span> color: <span class="type">Color</span>
    <span class="keyword">var</span> backgroundColor: <span class="type">Color</span>

    <span class="keyword">public init</span>(
        rating: <span class="type">Decimal</span>,
        color: <span class="type">Color</span> = .<span class="dotAccess">red</span>,
        backgroundColor: <span class="type">Color</span> = .<span class="dotAccess">gray</span>
    ) {
        <span class="keyword">self</span>.<span class="property">rating</span> = rating
        <span class="keyword">self</span>.<span class="property">color</span> = color
        <span class="keyword">self</span>.<span class="property">backgroundColor</span> = backgroundColor
    }

    <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">ZStack</span> {
            <span class="type">BackgroundStars</span>(backgroundColor)
            <span class="type">ForegroundStars</span>(rating: rating, color: color)
        }
    }
}


<span class="keyword">private struct</span> StarImage: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Image</span>(systemName: <span class="string">"star.fill"</span>)
    }
}


<span class="keyword">private struct</span> BackgroundStars: <span class="type">View</span> {
    <span class="keyword">var</span> color: <span class="type">Color</span>

    <span class="keyword">init</span>(<span class="keyword">_</span> color: <span class="type">Color</span>) {
        <span class="keyword">self</span>.<span class="property">color</span> = color
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">HStack</span> {
            <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">5</span>) { <span class="keyword">_ in</span>
                <span class="type">StarImage</span>()
            }
        }.<span class="call">foregroundColor</span>(color)
    }
}


<span class="keyword">private struct</span> ForegroundStars: <span class="type">View</span> {
    <span class="keyword">var</span> rating: <span class="type">Decimal</span>
    <span class="keyword">var</span> color: <span class="type">Color</span>

    <span class="keyword">init</span>(rating: <span class="type">Decimal</span>, color: <span class="type">Color</span>) {
        <span class="keyword">self</span>.<span class="property">rating</span> = rating
        <span class="keyword">self</span>.<span class="property">color</span> = color
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">HStack</span> {
            <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">5</span>) { index <span class="keyword">in</span>
                <span class="type">RatingStar</span>(
                    rating: <span class="keyword">self</span>.<span class="property">rating</span>,
                    color: <span class="keyword">self</span>.<span class="property">color</span>,
                    index: index
                )
            }
        }
    }
}
</code></pre><br/><h2>Crap!</h2><img src="../../images/5star_fail.png" alt="broken 5 star view"/><br/><br/><p>Just a minor detail or two. Let's make sure the images can scale and fit the right aspect ratio:</p><pre><code><span class="keyword">private struct</span> StarImage: <span class="type">View</span> {

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Image</span>(systemName: <span class="string">"star.fill"</span>)
            .<span class="call">resizable</span>()
            .<span class="call">aspectRatio</span>(contentMode: .<span class="dotAccess">fill</span>)
    }
}
</code></pre><br/><h2>Viola!</h2><p>Like magic! This was a fun little project. In comparison to UIKit (SwiftUI's predecessor), it was far less code and dramatically more enjoyable to create. You can checkout the source code on <a href="https://github.com/JZDesign/FiveStarRating_SwiftUI">Github</a>.</p><p><em>This article was originally posted on Medium</em></p>]]></content:encoded></item></channel></rss>