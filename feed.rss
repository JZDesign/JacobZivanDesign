<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Jacob Zivan Design</title><description>Musings and learnings from a banker turned nerd - Tips, tutorials, principles, and thought processes on life and software.</description><link>https://JacobZivanDesign.com</link><language>en</language><lastBuildDate>Thu, 4 Mar 2021 09:03:24 -0600</lastBuildDate><pubDate>Thu, 4 Mar 2021 09:03:24 -0600</pubDate><ttl>250</ttl><atom:link href="https://JacobZivanDesign.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/mockingbird</guid><title>Auto-Magically generate mocks using Mockingbird</title><description>Now that you understand Mocking and Stubbing, I'll show you how to avoid writing hand-rolled mocks using Mockingbird; an amazing framework that makes unit testing a breeze.</description><link>https://JacobZivanDesign.com/technology/mockingbird</link><pubDate>Thu, 4 Mar 2021 10:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Auto-Magically generate mocks using Mockingbird</h1><br/><p>I personally use the <a href="https://github.com/birdrides/mockingbird">Mockingbird</a> framework to generate my mocks for me. I don't like having to mock an entire interface for every code path I want to test. <a href="https://github.com/birdrides/mockingbird">Mockingbird</a> affords me the convenience and versatility I've been looking for in the Swift world. It does have its limitations, but it's far better than doing all of that work by hand.</p><p><em>If you're not sure what mocking or stubbing is, check out <a href="../mocking_and_stubbing">this article.</a></em></p><br/><br/><h3>Installing Mockingbird</h3><br/><p>To get started, follow the <a href="https://github.com/birdrides/mockingbird">instructions</a> to install and use Mockingbird in your project. They support CocoaPods, Carthage, and Swift Package Manager (SPM). Please follow the instructions to the letter. This isn't a <em>"normal"</em> package. It is generating source code for your test suite on build. So you need to pay attention to the details.</p><p><em>I've done both Carthage and SPM in the past. I prefer the SPM route.</em></p><br/><br/><h3>Using Mockingbird</h3><br/><p>After you've installed Mockingbird in your project's test target, you're ready to rock! 🎸🎸 Before we begin, there are several functions you should get to know in order to effectively use Mockingbird. There is a lot that Mockingbird is <a href="https://github.com/birdrides/mockingbird#usage">capable of</a>, but for this tutorial, we'll focus on the following:</p><br/><br/><h4>Creating a mock</h4><br/><p>Mockingbird has an awesome helper function, <code>mock()</code>, that handles most of this for us. It's used rather simply:</p><pre><code><span class="keyword">let</span> myMock = <span class="call">mock</span>(<span class="type">MyClass</span>.<span class="keyword">self</span>)
</code></pre><p>We want to assign the mock to a variable, in most cases, so that we can verify if a function it contains was, or will be, called.</p><br/><br/><h4>Stubbing the mock</h4><br/><p>Stubbing is handled with Mockinbird's <code>given</code> function. <code>given</code> will take a mock and one of its functions or variables and allow you to define the result of its invocation. This is handled with the <code>~&gt;</code> operator like so:</p><pre><code><span class="call">given</span>(myMock.<span class="call">someFunction</span>()) ~&gt; <span class="string">"You da man!"</span>
<span class="comment">// or to throw 🤯</span>
<span class="call">given</span>(myMock.<span class="call">someFunction</span>()) ~&gt; { <span class="keyword">throw</span> <span class="type">SomeError</span>() }
</code></pre><br/><br/><br/><h4>Verifying the Mock</h4><br/><p>One of the most useful things about mocking, is verifying that a code path was executed. Mockingbird has a <code>verify</code> method that allows us to check if a function was called or not, or more specifically, exactly how many times it was called. It's pretty straight forward:</p><pre><code><span class="call">verify</span>(mock.<span class="call">someFunc</span>()).<span class="call">wasCalled</span>()
<span class="comment">// Or if the function should get triggered multiple times</span>
<span class="call">verify</span>(mock.<span class="call">someFunc</span>()).<span class="call">wasCalled</span>(<span class="call">exactly</span>(<span class="number">10</span>))
</code></pre><br/><br/><h4>Mocking Parameters and Return Values</h4><br/><p>Another incredibly useful feature of Mockingbird is the <code>any()</code> function. This little gizmo will inspect the type of the object it is supposed to fill, and create a mock of that type on the fly. It's incredibly handy if we need to test what happens if a dependency returns <code>nil</code> or not but we don't care about a specific value.</p><p>I use this a lot, especially for the harder to define values like the <code>Data</code> type:</p><pre><code><span class="call">given</span>(store.<span class="call">getDataForUser</span>(user: <span class="call">any</span>())) ~&gt; <span class="call">any</span>() <span class="comment">// Inline stubbing!!</span>
</code></pre><br/><h4>Doing it, for real....</h4><br/><p>Let's recreate that test using Mockingbird instead of hand rolled mocks. To start, that means delete <code>MockLogger</code>, and <code>MockStore</code>.</p><p>You heard me. Delete them.... Go ahead.</p><p>What we'll do instead is use the generated mocks provided to us by Mockingbird. Inside of the test function we wrote <a href="../mocking_and_stubbing">earlier</a>, <code>testLoadDataForUser</code>, delete all of the code and add the following.</p><br/><pre><code><span class="keyword">let</span> logger = <span class="call">mock</span>(<span class="type">Logger</span>.<span class="keyword">self</span>)
<span class="keyword">let</span> store = <span class="call">mock</span>(<span class="type">DataStore</span>.<span class="keyword">self</span>)
<span class="keyword">let</span> user = <span class="type">User</span>(named: <span class="string">"Test"</span>)
<span class="keyword">let</span> controller = <span class="type">Controller</span>(logger, store, user)
</code></pre><br/><p>Then we can <strong>Stub</strong> the <strong>Mock</strong> <code>DataStore</code> like:</p><br/><pre><code><span class="call">given</span>(store.<span class="call">getDataForUser</span>(user: user)) ~&gt; <span class="call">any</span>()
</code></pre><br/><p>And finally we can invoke the controller function and run our assertions:</p><br/><pre><code>controller.<span class="call">loadDataForUser</span>()

<span class="call">verify</span>(logger.<span class="call">log</span>(<span class="call">any</span>())).<span class="call">wasCalled</span>()
<span class="call">XCTAssertNotNil</span>(controller.<span class="property">data</span>)
</code></pre><br/><br/><p>Instead of needing to write a mock for each use case we want to test, we can instead generate them on the fly, and stub their responses only when necessary. This reduces so much overhead when it comes to writing tests that it's tough to describe. I can't tell you how many lines of aggravating configuration code this tool has saved me this year alone.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/mocking_and_stubbing</guid><title>What's Mocking and Stubbing?</title><description>What are Mocking and Stubbing and how do those concepts help write write cleaner, more effective unit tests in Swift. We'll explore Protocol Oriented Programming and hand-rolled mocks.</description><link>https://JacobZivanDesign.com/technology/mocking_and_stubbing</link><pubDate>Wed, 3 Mar 2021 10:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>What's Mocking and Stubbing?</h1><p><em>And how do those concepts help write cleaner, more effective unit tests in Swift?</em></p><br/><p>Early on, I encountered the concepts of <strong>Stubbing</strong> and <strong>Mocking</strong> for the first time. I reacted to the discovery much like I did to testing in general. <em>"What's the point?"</em> I clearly didn't get it. In this article, we'll cover what mocks and stubs are, why they're used, and how they're used effectively.</p><br/><blockquote><p>What's the point?</p></blockquote><br/><h2>Are you Mocking me?</h2><p><strong>Mocking</strong> and <strong>Stubbing</strong> are used primarily for <strong>Unit Testing.</strong> But what are Mocks, or Stubs? And what is a "Unit" test? Yea... There's a lot of assumed knowledge here. Let's start by laying out some definitions and context:</p><br/><br/><br/><h3>Unit Testing</h3><br/><p>Unit testing is the act of writing tests where we run a small chunk of code in isolation, specifically, a single function. This "unit" should do exactly <code>A</code> under <code>X</code> conditions or exactly <code>B</code> under <code>Y</code> conditions etc., We control the variables and observe the outcomes at a very small scale.</p><p>Because unit tests target singular functions in the code base, we are able to verify how all the little pieces work in isolation. This gives us confidence that multiple units will integrate together without any surprises. And, what I like most about unit tests, when a test is written well, automated checks catch bugs <em>before</em> they ship to production.</p><p><em>A more specific description can be found on <a href="https://stackoverflow.com/a/1393/9333764">stack overflow</a>, among other places.</em> <a href="https://en.wikipedia.org/wiki/Pure_function">Pure Functions</a> are ideal for unit testing.</p><br/><br/><br/><h3>Mocks</h3><br/><p>Mocks are test doubles of an object that we place inside of our tests. They operate exactly as they are told to, and report back to you what happened in the test.</p><p>Mocks, when created, have the same interface as its target, but none of the functionality. Instead, the mock can be told to return stubbed data or to verify whether or not a mock's function was executed.</p><br/><br/><br/><h3>Stubs</h3><br/><p>Stubs are hardcoded responses that we can force into our test code that allow us to easily test a function fully, without having to configure the rest of the environment to achieve all of the possible outcomes.</p><p><em><a href="https://stackoverflow.com/a/463305/9333764">Here is a good summary</a> of mocking and stubbing if you'd like more info.</em></p><br/><br/><br/><h3>But Why?</h3><br/><p>There are 3 primary reasons I use mocking and stubbing. First, there is a significant reduction in the amount of boilerplate code required to configure each test. Second, we can prevent noisy or expensive tasks from occurring, like log outs or database reads and writes, by replacing those dependencies with mocks. Finally, we can automate tests that verify a code path was executed <em>this can not easily be done without the mock</em>. In short, Mocking and Stubbing allow us to focus on the code we're writing.</p><br/><br/><blockquote><p>Mocking and Stubbing allow us to focus on the code we're writing.</p></blockquote><br/><br/><h2>Writing Mocks and Stubs in Swift</h2><p>Swift is an awesome language. There's a lot to love about it, but, its implementation of <a href="https://en.wikipedia.org/wiki/Reflective_programming">reflection</a> is somewhat limited. Because of that, there used to be no good way to generate a mock and so, many developers have been manually creating them. Fortunately, Swift if is a <a href="https://bit.ly/3uJjpc8">Protocol Oriented Programming</a> Language, and we can account for this slight shortcoming.</p><br/><br/><h3>Hand Rolled Mocks</h3><br/><p>Much of the Swift community manually creates the mocks they need as they need them. To demonstrate how this is done, we'll make a simple example of a controller, a data store, and a logger using <a href="https://www.swiftbysundell.com/basics/protocols/">Protocols</a>. <em>Note the following example does not actually create a logger or store, only their interface.</em></p><p>This is what the implementation might look like:</p><br/><br/><pre><code><span class="keyword">protocol</span> Loggable {
    <span class="keyword">func</span> log(<span class="keyword">_</span> message: <span class="type">String</span>)
}

<span class="keyword">protocol</span> DataStore {
    <span class="keyword">func</span> getDataFor(<span class="keyword">_</span> user: <span class="type">User</span>) -&gt; <span class="type">Data</span>?
}

<span class="keyword">class</span> Controller {
    <span class="keyword">let</span> logger: <span class="type">Loggable</span>
    <span class="keyword">let</span> store: <span class="type">DataStore</span>
    <span class="keyword">let</span> user: <span class="type">User</span>
    <span class="keyword">var</span> data: <span class="type">Data</span>? = <span class="keyword">nil

    init</span>(<span class="keyword">_</span> logger: <span class="type">Loggable</span>, <span class="keyword">_</span> store: <span class="type">DataStore</span>, <span class="keyword">_</span> user: <span class="type">User</span>) {
        <span class="keyword">self</span>.<span class="property">logger</span> = logger
        <span class="keyword">self</span>.<span class="property">store</span> = store
        <span class="keyword">self</span>.<span class="property">user</span> = user
    }

    <span class="keyword">func</span> loadDataForUser() {
        data = store.<span class="call">getDataFor</span>(user)
        logger.<span class="call">log</span>(<span class="string">"data retrieved"</span>)
    }
}
</code></pre><br/><br/><p>The function <code>loadDataForUser</code> should read from a data store, log that it did so, and update the controller's <code>data</code> value. To test this code without actually logging an event or reading from our databases, we will need a mocked version of a logger and a data store. That might look something like this:</p><br/><br/><pre><code><span class="keyword">struct</span> MockLogger: <span class="type">Loggable</span> {
    <span class="keyword">var</span> wasCalled = <span class="keyword">false

    func</span> log(<span class="keyword">_</span> message: <span class="type">String</span>) {
        wasCalled = <span class="keyword">true</span>
    }
}

<span class="keyword">struct</span> MockStore: <span class="type">DataStore</span> {
    <span class="keyword">func</span> getDataFor(<span class="keyword">_</span> user: <span class="type">User</span>) -&gt; <span class="type">Data</span>? {
        <span class="string">""</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)
    }
}
</code></pre><br/><br/><p>These mocks will allow us to verify that <code>Controller.loadDataForUser</code> modifies the data variable, <strong>and</strong> that the logger gets called <em>(which is near impossible to do without a mock)</em>. We do this like so:</p><br/><br/><pre><code><span class="keyword">class</span> ControllerTests: <span class="type">XCTestCase</span> {
    <span class="keyword">func</span> testLoadDataForUser() {
        <span class="comment">// Given</span>
        <span class="keyword">let</span> logger = <span class="type">MockLogger</span>()
        <span class="keyword">let</span> controller = <span class="type">Controller</span>(logger, <span class="type">MockStore</span>(), <span class="type">User</span>(named: <span class="string">"Test"</span>))

        <span class="call">XCTAssertFalse</span>(logger.<span class="property">wasCalled</span>)
        <span class="call">XCTAssertNil</span>(controller.<span class="property">data</span>)
        
        <span class="comment">// When</span>
        controller.<span class="call">loadDataForUser</span>()
        
        <span class="comment">// Then</span>
        <span class="call">XCTAssertTrue</span>(logger.<span class="property">wasCalled</span>)
        <span class="call">XCTAssertNotNil</span>(controller.<span class="property">data</span>)
    }
}
</code></pre><br/><br/><p>In that example, we created the two mocked interfaces we needed to create and, effectively tested the <code>Controller</code>. Because of the mocks, we were able to verify the functionality of the Controller without testing the functionality of the <code>DataStore</code> or the <code>Logger</code>. The actual implementations of those will get tested in isolation.</p><p>Now, you may have noticed that there was a bit of configuration code required to run those tests. And I told you that mocking <em>reduces</em> the amount of test configuration we need to write.</p><p>They do. Even hand rolled mocks like these do. But I prefer to have my mocks generated for me in such a way that reduces needing to create one off mocks like this. And there is a package that will do just that. In my next article, you'll learn how to generate fully functional mocks using mockingbird😊</p><h3><a href="../mockingbird"><code>-&gt; Auto-Magically generate mocks using Mockingbird -&gt;</code></a></h3><br/><br/>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/mirroring-kotlins-elvis-operator</guid><title>Mirroring Kotlin's Elvis Operator in Swift</title><description>Unwrap or Throw - Make Swift's equivalent to Kotlin's Elvis Operator!  A Tutorial for adding Custom Operators in Swift.</description><link>https://JacobZivanDesign.com/technology/mirroring-kotlins-elvis-operator</link><pubDate>Mon, 4 Jan 2021 08:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Mirroring Kotlin's Elvis Operator in Swift</h1><p>In many languages, there are ways to coalesce <code>nil</code> values. In Swift, for example, the Nil Coalescing operator is <code>??</code> We use this to provide a fallback value when a variable could be <code>nil</code>, like so:</p><pre><code><span class="keyword">var</span> y: <span class="type">Int</span>? = <span class="keyword">nil
var</span> x = y ?? <span class="number">0</span>
</code></pre><p>In the Kotlin language, there is a similar operator called the "Elvis Operator" <em>because, seriously... it looks a bit like a tiny sideways elvis</em> <code>?:</code> It's used like:</p><pre><code>x = y ?: <span class="number">0</span>
</code></pre><br/><h2>So why try and mirror it?</h2><p>Unlike Swift's <code>??</code>, Kotlin's <code>?:</code> does more than coalesce nil values, it can throw too!</p><pre><code>x = y ?: <span class="keyword">throw</span> <span class="type">SomeException</span>()
</code></pre><p>When used this way, <code>x</code> will still be a non-optional type, but the function will stop there if <code>y</code> is <code>null</code>.</p><p>To do this in Swift, we would generally need to use a <code>guard</code> statement.</p><pre><code><span class="keyword">guard let</span> x = y <span class="keyword">else</span> { 
    <span class="keyword">throw</span> <span class="type">SomeError</span>() 
}
</code></pre><p>It's not terrible, but Kotlin's <code>?:</code> is much nicer, <em>in my opinion.</em></p><br/><h2>Writing a Custom Operator in Swift</h2><p>Swift allows us to write <a href="https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID46">custom operators</a> to handle things like this. Unfortunately, the <code>:</code> character is <a href="https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418">unavailable</a> for use. So we can't make our operator syntactically identical to Kotlin's.</p><p>The operator we'll be creating is an infix operator. Meaning that the operator will fall <strong>in</strong>between its arguments, just like <code>argument1 ?? argument2</code>. In Swift, infix operators must adhere to a <a href="https://developer.apple.com/documentation/swift/swift_standard_library/operator_declarations">Precedence Group</a>. This grouping tells the compiler what order functions should get executed, much like the <a href="https://en.wikipedia.org/wiki/Order_of_operations">Order of Operations</a> in mathematics.</p><p>There is a lot there, so we won't go into the specifics on all of that in this tutorial.</p><br/><h3>Unwrap or Throw</h3><br/><p>Because we can't use Kotlin's <code>?:</code> or Swift's <code>??</code> we'll do something a little different.</p><pre><code>infix operator ??? : <span class="type">TernaryPrecedence</span>
<span class="keyword">func</span> ???&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> left: <span class="type">Optional</span>&lt;<span class="type">T</span>&gt;, right: <span class="type">Error</span>) <span class="keyword">throws</span> -&gt; <span class="type">T</span> {
    <span class="keyword">guard let</span> value = left <span class="keyword">else</span> { <span class="keyword">throw</span> right }
    <span class="keyword">return</span> value
}
</code></pre><br/><p>Using generics, we can pass any optional type to the left hand side of <code>???</code> for evaluation! Let's take a look at how it's used.</p><pre><code>x = <span class="keyword">try</span> y ??? <span class="type">SomeError</span>()
</code></pre><br/><p>It works splendidly! Because of the way Swift handles throwing functions, we do this differently than in Kotlin. <code>try</code> on the left instead of <code>throw</code> on the right.</p><p>Unlike Kotlin's Elvis Operator, this does not handle both coalescing a <code>nil</code> value and throwing errors. We'll have 2, <code>??</code> and <code>???</code>, and we'll need to use the them appropriately.</p><p>I hope you found this useful!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/custom-dynamic-fonts-in-swift-ui</guid><title>Scalable Custom Fonts in SwiftUI</title><description>A Tutorial for adding Custom Fonts in SwiftUI with Dynamic Sizes. Learn how to add fonts to an iOS application and set them up to scale with the user's preferred font size through SwiftUI Font extensions.</description><link>https://JacobZivanDesign.com/technology/custom-dynamic-fonts-in-swift-ui</link><pubDate>Sun, 3 Jan 2021 10:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Scalable Custom Fonts in SwiftUI</h1><img src="../../images/custom-font-example.png" alt="Custom Font Example"/><p>Early on in my journey as an iOS engineer, requests from creatives were always points of tension for me. I thought I only had two options:</p><p>Please the designer, or, make a user experience that was resilient to screen size and personal settings (like accessible font sizes).</p><p>Turns out, like most times I think something is either Black or White, I was wrong.</p><p>Custom fonts were one of those taboo topics for me. I didn't know how to utilize them properly. I would add custom fonts to a project, and set very specific font sizes and weights to make the view pixel perfect... <em>on one device.</em> Later I learned about preferred font sizes and how they worked. It kinda rocked my world. Afterwards, I was able to please both our users and creatives with UIFont extensions in UIKit.</p><p>In this tutorial, we will recreate that functionality in SwiftUI.</p><br/><h2>Road Map</h2><p>We're going to cover more than adding fonts to a SwiftUI application. The font's will be scalable with a user's preferred font size, <em>and</em> it will be a developer friendly implementation. To get there, we'll do things in steps:</p><ol><li>Add custom fonts to a project</li><li>Create a simple way to reference the fonts</li><li>Set default values for each <code>TextStyle</code></li><li>Make it Swifty!</li></ol><br/><h2>Adding a Font</h2><h3>Importing Files into Xcode</h3><br/><p>This is a simple step. First find a font you'd like to, <em>and have rights to,</em> use. For this tutorial we'll be using <a href="https://www.jetbrains.com/lp/mono/">JetBrains Mono</a>. When you've downloaded the fonts, move them into your application's directory. Afterwards, open the project in Xcode, ensuring the Navigator Menu is open. Then add the files to your project by clicking the <code>+</code> button in the bottom left, selecting "Add Files to YOUR_PROJECT".</p><img style="width:300px;" src="../../images/add-fonts.png" alt=""/><br/><h3>Provide the Fonts to the Application</h3><br/><p>Adding the fonts to the project is sadly not enough. To utilize the fonts, we need to tell the project what fonts to prepare for use. This is done inside of the application's <code>.plist</code> file. The key is "Fonts provided by application" and its value is the array of filenames you wish to import (excluding file type).</p><p>If you're following along to this tutorial using <strong>JetBrains Mono</strong> you can <code>control + click</code> on the <code>.plist</code> file, then select <code>Open As -&gt; Source Code</code>.</p><img style="width:360px;" src="../../images/plist-source-code.png" alt=""/><br/><p>After the file opens, you can paste the following code after <code>&lt;dict&gt;</code>:</p><br/><pre><code>&lt;key&gt;<span class="type">UIAppFonts</span>&lt;/key&gt;
	&lt;array&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">Bold</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">BoldItalic</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">ExtraBold</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">ExtraBoldItalic</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">ExtraLight</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">ExtraLightItalic</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">Italic</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">Light</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">LightItalic</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">Medium</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">MediumItalic</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">Regular</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">Thin</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">ThinItalic</span>.<span class="property">ttf</span>&lt;/string&gt;
	&lt;/array&gt;
</code></pre><br/><h2>Enumerate Your Fonts For Easy Reference</h2><p>Now that we've fully imported the fonts, we can use them like so:</p><pre><code><span class="type">Text</span>(<span class="string">""</span>).<span class="call">font</span>(.<span class="call">custom</span>(<span class="string">"JetBrainsMono-Regular"</span>, size: <span class="number">18</span>, relativeTo: .<span class="dotAccess">body</span>))
</code></pre><p>Because the fonts are keyed by filename, using a font after it's imported is prone to human error. I like to enumerate sets of finite options as a type so that I can limit the scope of potential typos to one instance.</p><p>To do this, create an enum of type <code>String</code> that contains each font file name.</p><pre><code><span class="keyword">enum</span> JetBrainsMono: <span class="type">String</span> {
    <span class="keyword">case</span> regular = <span class="string">"JetBrainsMono-Regular"</span>
    <span class="keyword">case</span> italic = <span class="string">"JetBrainsMono-Italic"</span>
    <span class="keyword">case</span> medium = <span class="string">"JetBrainsMono-Medium"</span>
    <span class="keyword">case</span> mediumItalic = <span class="string">"JetBrainsMono-MediumItalic"</span>
    <span class="keyword">case</span> bold = <span class="string">"JetBrainsMono-Bold"</span>
    <span class="keyword">case</span> boldItalic = <span class="string">"JetBrainsMono-BoldItalic"</span>
    <span class="keyword">case</span> extraBold = <span class="string">"JetBrainsMono-ExtraBold"</span>
    <span class="keyword">case</span> extraBoldItalic = <span class="string">"JetBrainsMono-ExtraBoldItalic"</span>
    <span class="keyword">case</span> light = <span class="string">"JetBrainsMono-Light"</span>
    <span class="keyword">case</span> lightItalic = <span class="string">"JetBrainsMono-LightItalic"</span>
    <span class="keyword">case</span> extraLight = <span class="string">"JetBrainsMono-ExtraLight"</span>
    <span class="keyword">case</span> extraLightItalic = <span class="string">"JetBrainsMono-ExtraLightItalic"</span>
    <span class="keyword">case</span> thin = <span class="string">"JetBrainsMono-Thin"</span>
    <span class="keyword">case</span> thinItalic = <span class="string">"JetBrainsMono-ThinItalic"</span>
}
</code></pre><br/><h3>Ahhhh, Type Safety.</h3><br/><p>Now we can use the custom font's with the enumeration, like so:</p><pre><code><span class="type">Text</span>(<span class="string">""</span>).<span class="call">font</span>(.<span class="call">custom</span>(<span class="type">JetBrainsMono</span>.<span class="property">regular</span>.<span class="property">rawValue</span>, size: <span class="number">18</span>, relativeTo: .<span class="dotAccess">body</span>))
</code></pre><br/><h2>Relative Font Sizes</h2><p>The human brain is a fickle thing... We're likely to forget if <code>.body</code> should be size 18 or 24. Even if we do remember, we may mistype the value and get a wonky view. Since there is a finite set of <code>TextStyles</code>, I would again recommend abstracting this bit of detail.</p><p>I did this by extending SwiftUI's <code>Font.TextStyle</code> like so:</p><pre><code><span class="keyword">extension</span> <span class="type">Font</span>.<span class="type">TextStyle</span> {
    <span class="keyword">var</span> size: <span class="type">CGFloat</span> {
        <span class="keyword">switch self</span> {
        <span class="keyword">case</span> .<span class="dotAccess">largeTitle</span>: <span class="keyword">return</span> <span class="number">60</span>
        <span class="keyword">case</span> .<span class="dotAccess">title</span>: <span class="keyword">return</span> <span class="number">48</span>
        <span class="keyword">case</span> .<span class="dotAccess">title2</span>: <span class="keyword">return</span> <span class="number">34</span>
        <span class="keyword">case</span> .<span class="dotAccess">title3</span>: <span class="keyword">return</span> <span class="number">24</span>
        <span class="keyword">case</span> .<span class="dotAccess">headline</span>, .<span class="dotAccess">body</span>: <span class="keyword">return</span> <span class="number">18</span>
        <span class="keyword">case</span> .<span class="dotAccess">subheadline</span>, .<span class="dotAccess">callout</span>: <span class="keyword">return</span> <span class="number">16</span>
        <span class="keyword">case</span> .<span class="dotAccess">footnote</span>: <span class="keyword">return</span> <span class="number">14</span>
        <span class="keyword">case</span> .<span class="dotAccess">caption</span>, .<span class="dotAccess">caption2</span>: <span class="keyword">return</span> <span class="number">12</span>
        <span class="keyword">@unknown default</span>:
            <span class="keyword">return</span> <span class="number">8</span>
        }
    }
}
</code></pre><br/><p>Great! This helps prevent our faulty memories from ruining our UI/UX! It can be used like so:</p><pre><code><span class="type">Text</span>(<span class="string">""</span>)
.<span class="call">font</span>(
    .<span class="call">custom</span>(
        <span class="type">JetBrainsMono</span>.<span class="property">regular</span>.<span class="property">rawValue</span>,
        size: <span class="type">Font</span>.<span class="type">TextStyle</span>.<span class="property">body</span>.<span class="property">size</span>,
        relativeTo: .<span class="dotAccess">body</span>
        )
    )
</code></pre><br/><h3>A Word on Behalf of Designers Everywhere</h3><br/><p>Apple has put <a href="https://developer.apple.com/design/human-interface-guidelines/macos/visual-design/typography/">a lot of thought</a> into their font's sizing and how they scale. But each typeface is unique, and a size 16 SF font will be different than size 16 SomeCustomFont. For those reasons, we use the <code>.custom()</code> function above to relate a base size to how the font should scale with accessibility settings.</p><p><em>I would recommend you sit down with your designer and go over each of Apple's <code>TextStyles</code> with them. Hopefully they're opinionated and will help you nail down what size each of them should be for your custom font.</em></p><br/><h2>Let's Make it Swifty!</h2><pre><code><span class="type">Text</span>(<span class="string">""</span>)
.<span class="call">font</span>(
    .<span class="call">custom</span>(
        <span class="type">JetBrainsMono</span>.<span class="property">regular</span>.<span class="property">rawValue</span>,
        size: <span class="type">Font</span>.<span class="type">TextStyle</span>.<span class="property">body</span>.<span class="property">size</span>,
        relativeTo: .<span class="dotAccess">body</span>
        )
    )
</code></pre><p>That is a long line of code to set a font... That can be fixed.</p><br/><p>First, let's create a helper function to get a custom font using our enum.</p><pre><code><span class="keyword">extension</span> <span class="type">Font</span> {
    <span class="keyword">static func</span> custom(<span class="keyword">_</span> font: <span class="type">JetBrainsMono</span>, relativeTo style: <span class="type">Font</span>.<span class="type">TextStyle</span>) -&gt; <span class="type">Font</span> {
        <span class="call">custom</span>(font.<span class="property">rawValue</span>, size: style.<span class="property">size</span>, relativeTo: style)
    }
}
</code></pre><br/><p>Which we can use like this:</p><pre><code><span class="type">Text</span>(<span class="string">""</span>).<span class="call">font</span>(.<span class="call">custom</span>(.<span class="dotAccess">regular</span>, relativeTo: .<span class="dotAccess">body</span>))
</code></pre><p>Now we're getting somewhere. However, that implementation still leaves too much room for human error. We can do better.</p><br/><p>Next we're going to create some static variables that will contain all of the detail that we don't care to remember. It will go something like this:</p><pre><code><span class="keyword">extension</span> <span class="type">Font</span> {
    <span class="keyword">static let</span> jetBrainsMono = <span class="call">custom</span>(.<span class="dotAccess">regular</span>, relativeTo: .<span class="dotAccess">body</span>)
    <span class="keyword">static let</span> jetBrainsMonoLargeTitle = <span class="call">custom</span>(.<span class="dotAccess">bold</span>, relativeTo: .<span class="dotAccess">largeTitle</span>)
}
</code></pre><br/><p>This will allow us to use our custom font like so:</p><pre><code><span class="type">Text</span>(<span class="string">""</span>).<span class="call">font</span>(.<span class="dotAccess">jetBrainsMono</span>)
</code></pre><p>Now that is swifty!</p><br/><h1>🎉🍾🥳</h1><p>Good work! You've learned how to add fonts to an XCode project, represent the fonts and their base sizes in enumerations, and replicate SwiftUI's <code>preferredFont</code> implementation!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/responding-to-accessible-font-sizes-swiftui</guid><title>Responsive View Components</title><description>A Tutorial for Handling Accessibility in SwiftUI using a ViewBuilder, PreferredFont, and ContentSizeCategory.isAccessibilityCategory</description><link>https://JacobZivanDesign.com/technology/responding-to-accessible-font-sizes-swiftui</link><pubDate>Sun, 3 Jan 2021 05:10:00 -0600</pubDate><content:encoded><![CDATA[<h1>Responsive View Components</h1><p>I used to write my iOS views to be pixel perfect, until I discovered UIKit's <a href="https://developer.apple.com/documentation/uikit/uifont/1619030-preferredfont">Preferred Font</a> method and how it worked. After that, I struggled to implement views that were useful at scale, or even beautiful on smaller screens like that of the iPhone 8. Eventually I designed a UIKit component that accounted for accessible font sizes. In this article we'll remake that component in SwiftUI.</p><br/><h2>The Problem</h2><img class="left-item" style="max-width: 300px; margin-right: 2rem;" alt="A debit card transaction represented in an HStack" src="../../images/hstack_default_size.png"/><br/><br/><br/><br/><br/><br/><p>We have a layout that works perfectly in a SwiftUI <code>HStack</code>. This view contains one <code>Image</code> and two <code>Text</code> views. Looks great right?</p><p>Well...</p><p>Let's look at it after bumping our preferred font size.</p><br/><img class="right-item" style="max-width: 300px; margin-left: 2rem;" alt="A debit card transaction represented in an HStack with very large font" src="../../images/hstack_large_size.png"/><span class="clear-left"></span><h3>Nope!</h3><br/><p>That looks like garbage. We need to respond to the font size increase, and change the layout of this component.</p><p>Good news is, the SwiftUI team has given us easy access to the user's preferred font size.</p><span class="clearfix"></span><br/><h2>Responsive Stack View</h2><p>For this tutorial, we'll focus on a simple view that responds to accessible font sizes. To do that we'll use the <a href="https://developer.apple.com/documentation/swiftui/contentsizecategory"><code>ContentSizeCategory</code></a> Environment variable in SwiftUI.</p><p>On it, there is a computed property, <code>isAccessibilityCategory</code>, that returns what we're looking for. If the user has selected to use large fonts <strong>and</strong> has scaled their font up into the larger fonts category, <code>isAccessibilityCategory</code> returns <code>true</code>.</p><p>We can add use it like this:</p><pre><code><span class="keyword">public struct</span> SomeView : <span class="type">View</span> {
    <span class="keyword">@Environment</span>(\.<span class="property">sizeCategory</span>) <span class="keyword">public var</span> size: <span class="type">ContentSizeCategory</span>

    <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="keyword">if</span> size.<span class="property">isAccessibilityCategory</span> {
            <span class="type">Text</span>(<span class="string">"isAccessibilityCategory == true"</span>)
        } <span class="keyword">else</span> {
            <span class="type">Text</span>(<span class="string">"isAccessibilityCategory == false"</span>)
        }
    }
}
</code></pre><br/><br/><br/><h3>That's great! But how do I pass in the content I want?</h3><br/><br/><p>To make our own stack view we'll need to be able to pass in a bunch of subviews. We can do this with a <code>ViewBuilder</code>.</p><p><em>A <a href="https://developer.apple.com/documentation/swiftui/viewbuilder">ViewBuilder</a> is a <a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID617">property wrapper</a> that allows us to pass one or more views into our stack view as a function.</em></p><p>Alright! Let's put the Responsive Stack View together using the <code>ContentSizeCategory</code> and a <code>ViewBuilder</code>!</p><pre><code><span class="keyword">struct</span> RStack&lt;Content: <span class="type">View</span>&gt; : <span class="type">View</span> {
    <span class="keyword">@Environment</span>(\.<span class="property">sizeCategory</span>) <span class="keyword">var</span> size: <span class="type">ContentSizeCategory</span>
    
    <span class="keyword">let</span> content: () -&gt; <span class="type">Content</span>
    
    <span class="keyword">init</span>(<span class="keyword">@ViewBuilder</span> content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>) {
        <span class="keyword">self</span>.<span class="property">content</span> = content
    }
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="keyword">if</span> size.<span class="property">isAccessibilityCategory</span> {
            <span class="type">VStack</span> { <span class="call">content</span>() }
        } <span class="keyword">else</span> {
            <span class="type">HStack</span> { <span class="call">content</span>() }
        }
    }
}
</code></pre><br/><br/><h3>Let's see what it looks like!</h3><br/><img class="left-item" style="max-width: 300px;" alt="A debit card transaction represented in an RStack" src="../../images/rstack_default.png"/><br/><br/><br/><br/><p>Notice how the <code>RStack</code> has the same syntax of the <code>HStack</code> and <code>VStack</code>? That's the <code>ViewBuilder</code> doing it's magic.</p><br/><pre><code><span class="keyword">let</span> debitCardImageName = <span class="string">"creditcard.fill"</span> <span class="comment">// #DebtIsDumb</span>

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">RStack</span> {
            <span class="type">Image</span>(systemName: debitCardImageName)
                .<span class="call">foregroundColor</span>(.<span class="dotAccess">red</span>)
                .<span class="call">padding</span>(.<span class="dotAccess">trailing</span>)
            
            <span class="type">Text</span>(<span class="string">"Joe's Coffee Shop"</span>)
            <span class="type">Spacer</span>()
            <span class="type">Text</span>(<span class="string">"$2.34"</span>)
        }.<span class="call">padding</span>()
    }
}
</code></pre><br/><img class="right-item" style="max-width: 300px; margin-left: 2rem;" alt="A debit card transaction represented in an RStack with a spacer and very large font" src="../../images/rstack_spacer.png"/><br/><span class="clear-left"></span><br/><br/><br/><h3>Much Better!</h3><br/><p>We're getting closer! Although, that spacer is a bit of a problem...</p><p>Let's make another component to handle that little detail. After all, practice makes permanent.</p><p>For this component, we want to make sure we add a spacer for a horizontal layout, but not a vertical layout. We won't need to use a <code>ViewBuilder</code> because we are only going to be working with 2 <code>Text</code> views.</p><p>Let's do it!</p><span class="clearfix"></span><h3>Practice makes permanent</h3><br/><pre><code><span class="keyword">struct</span> RDualText: <span class="type">View</span> {
    <span class="keyword">@Environment</span>(\.<span class="property">sizeCategory</span>) <span class="keyword">var</span> size: <span class="type">ContentSizeCategory</span>

    <span class="keyword">var</span> firstText: <span class="type">Text</span>
    <span class="keyword">var</span> secondText: <span class="type">Text</span>
    <span class="keyword">var</span> spacer = <span class="type">Spacer</span>()
    
    <span class="keyword">init</span>(firstText: <span class="type">Text</span>, secondText: <span class="type">Text</span>) {
        <span class="keyword">self</span>.<span class="property">firstText</span> = firstText
        <span class="keyword">self</span>.<span class="property">secondText</span> = secondText
    }
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">RStack</span> {
            <span class="keyword">self</span>.<span class="property">firstText</span>
            <span class="keyword">if</span> !size.<span class="property">isAccessibilityCategory</span> {
                spacer
            }
            <span class="keyword">self</span>.<span class="property">secondText</span>
        }
    }
}
</code></pre><br/><br/><h3>Putting it all together</h3><br/><p>Alright, let's go back to our content view, and use our new component.</p><img class="left-item" style="max-width: 300px;" alt="A debit card transaction represented in an RStack" src="../../images/rstack_large.png"/><br/><br/><br/><br/><br/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">RStack</span> {
            <span class="type">Image</span>(systemName: debitCardImageName)
                .<span class="call">foregroundColor</span>(.<span class="dotAccess">red</span>)
            <span class="type">RDualText</span>(
                firstText: <span class="type">Text</span>(<span class="string">"Joe's Coffee Shop"</span>),
                secondText: <span class="type">Text</span>(<span class="string">"$2.34"</span>)
            )
        }.<span class="call">padding</span>()
    }
}
</code></pre><span class="clearfix"></span><br/><h2>Accessible apps don't have to be ugly.</h2><p>Good work! You've learned how to create a <code>ViewBuilder</code>, and respond to a user's preferred font size! Making a component that accounts for a user's accessibility settings was far more difficult in the world of UIKit. But we've only scratched the surface, there is a lot more to handling accessibility well than what we covered here. There are settings for color blindness, preferring bold fonts, reducing motions and more. And that is just the visual side of accessibility!</p><br/><h3>Homework</h3><br/><p>If you'd like to learn more, I have a challenge for you!</p><p>Take the <code>RStack</code> component and modify it to take a threshold. If the selected font size is greater than the threshold then the <code>RStack</code> flips from horizontal to vertical. When you instantiate your <code>RStack</code>, it should look like this:</p><pre><code><span class="type">RStack</span>(threshold: .<span class="dotAccess">accessibilityMedium</span>) {
    <span class="type">Text</span>(<span class="string">"Top"</span>)
    <span class="type">Spacer</span>()
    <span class="type">Text</span>(<span class="string">"Bottom"</span>)
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/why-we-work-matters</guid><title>Why We Work Matters</title><description>Become a better Software Engineer. Discover who your users really are, then, work with purpose and be diligent even in the little things.</description><link>https://JacobZivanDesign.com/technology/why-we-work-matters</link><pubDate>Fri, 1 Jan 2021 09:10:00 -0600</pubDate><content:encoded><![CDATA[<h1>Why We Work Matters</h1><p>Have you ever worked on a project that you were passionate about? I'm fortunate in that I get to all the time. It makes a difference in how I approach the work. When I'm passionate about a problem, I <em>want</em> to solve it, and I want to do it well. The opposite is generally true too. If we are impassionate about a task or a problem, we may try to get the job done hastily so we can get back to the things that we enjoy working on.</p><p><em>What are some things you loathe doing? Writing documents? Working in a legacy code base? UI/UX?</em></p><blockquote><p>If we are impassionate about a task or a problem, we may try to get the job done hastily so we can get back to the things that we enjoy working on.</p></blockquote><p>I hate that we do that. So I sat down and thought about our passionless haste as a problem to be solved. This is what I found.</p><h2>We don't understand <em>Why We Work.</em></h2><p>Why are you a software engineer? Yea, it's fun, it's interesting, and it can pay pretty well. But that's not where I'm going. We're hired for the way our brains work. We're quite adept at looking at something, understanding it, and offering solutions. We are hired to solve <em>user problems.</em> We're also hired to make systems that can scale, are resilient to the future, and have a low lift for others to enter and work on after we've moved on to other projects.</p><blockquote><p>We are hired to solve user problems.</p></blockquote><p>Most of us are passionate about that part. We like to know that we're contributing to something greater. But who are our users? That seems obvious... The people who use the applications we write, our "end users". Well, yes. That is true. Although that's an incomplete answer. What about our application's data, who uses that? What about the documents that you write? Or the internal API you're working on? What about the code base in general? Who are the users of your output?</p><blockquote><p>Who are the users of your output?</p></blockquote><p>That question changed the way I work. All of the code I write is not just for an end user. It's for the business and the new hires that we will make at a later date. It's for a future me, and those like me, who will maintain it. The same applies for the documentation that I write. The context a document can provide to future teams will help them steward the project. It doesn't immediately impact the end user, but the way we handle the mundane tasks will have a great impact on those users in the future.</p><br/><h3>Your users are many</h3><br/><p>I realized that we solve problems for more than the end user alone. We solve problems for our stakeholders, our data analysts, our project managers, our business units, our teammates, and even the people whom we've yet to hire.</p><p>I thought about my output, how it would be consumed, and the impact my work would have on the future. I didn't like the forecast. So I changed it. I decided that I work to serve others, not for the paycheck. I take <em>"little things"</em> quite seriously now. The impact has been significant.</p><p>All aspects of the craft are impacted by this decision. It's made me more serious about pure functions, explicit naming, making impossible state impossible, the Single Responsibility Principle, testing and so much more. Even documentation, which I used to dread, has become a thing I enjoy and take seriously.</p><p>I find myself asking, who will be a "user" of my output when I pull a ticket now. That habit lead me to perform a user interview with one of our data engineers recently, the result of which is now going to change the structure of our logs as a whole.</p><p>When I write a document, I ask similar questions. Who is my audience, what is the purpose, how does it serve?</p><blockquote><p>"I decided that I work to serve others"</p></blockquote><p>Why do you work?</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/small-prs</guid><title>Small Pull Requests</title><description>Large vs Small Pull Requests. How to make small pull requests and the benefits. Work faster, find more bugs, write better code, be a better coworker.</description><link>https://JacobZivanDesign.com/technology/small-prs</link><pubDate>Fri, 1 Jan 2021 06:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Small Pull Requests</h1><p>We've all seen Pull Requests <em>(or PRs)</em> that are so large that they are daunting to review, or the PR covers so many different topics that it's hard to keep things straight. I've seen PRs where there are refactors, renames, many business logic additions, helper method introductions, integrations for all the things, sometimes UI related work, and hopefully some tests. That makes for a large PR, like this one:</p><img src="../../images/largePR.png" alt="Extremely Large Pull Request of actual code changes - Not a simple configuration change or forgot to add a gitignore line."/><p>When we're asked to review a PR like that, it's easy to get frustrated. Especially because that is an actual code change and not a one off that wasn't included in the <code>.gitignore</code> by accident. When confronted with a massive code change for review, I found myself asking questions I couldn't answer.</p><ol><li><em>"Where do I start?"</em></li><li><em>"What am I looking at?"</em></li><li><em>"What does it do?"</em></li><li><em>"How does it work?"</em></li></ol><p>Frankly, these are hard questions to answer when you're looking through 20+ files in a black box, wading through multiple classes and concepts, and are forced to literally try and piece an expert level puzzle together.</p><p>Fortunately, there is a remedy to this problem. Small Pull Requests.</p><br/><br/><h2>What is a small PR?</h2><p>Put simply, a Small Pull Request is a code change of small conceptual complexity, preferably a singular conceptual change.</p><p>It's <em>that</em> simple. The hard part is restraint.</p><p>Often, when we approach a problem, we first go to the code to explore and figure things out. This is a natural and common way we seek to solve the tasks before us, and that approach isn't a bad one. However, what we choose to do after we have explored that problem and decide on the solution can be problematic. It feels natural to keep fighting and slay the dragon then and there. After all, we just figured out the problem, the code is working... "Ship it!"</p><p><strong>NO!</strong></p><p>What we should do is slow down and move forward using what I call the Single Conceptual Change Principle.</p><blockquote><p>Single Conceptual Change Principle: The conscious scoping of code changes into small related units</p></blockquote><p>When exercising the single conceptual change principle the natural by-product is a surprisingly small amount of changed or added code for review. Like this one:</p><img src="../../images/smallPR.png" alt="Small PR Example"/><br/><h3>What do you mean by <em>"singular conceptual change?"</em></h3><br/><p>I'm glad you asked. I'll illustrate with the following scenario:</p><p>You are tasked with logging errors because QA found a bug that's hard to reproduce. Bad news is, there is no logging in your app currently so you've got some work cut out for you. After some digging around you find a new service that is cheap and easy to integrate, so you go ahead and add that dependency to your project. While you're in there, you create a custom logger to reduce the amount of code you need to write to send the errors you want to send with the user information that may be helpful to unwind the errors later. You test it, it works. So now you decide to go and add the logging event to every button press and caught exception in your application. It took three days to figure it all out and push up your code, but it's all there. "No stone left unturned," or so you think.</p><p>You requested review of your large PR at 1500 lines of code and 56 files changed three days ago and it's still not approved, so you badger someone to get to it and they push it through... along with 4 new bugs.</p><h4><em>Make it smaller</em></h4><p>That scenario could have gone differently. Those bugs could have been caught and the code could have been merged in sooner if it had been broken apart. The Pull Requests could have looked more like this:</p><table><thead><tr><th><strong>PR Scope</strong></th><th><strong>Change Footprint</strong></th><th><strong>Feedback</strong></th></tr></thead><tbody><tr><td>Adds logging dependency</td><td>3 files 36 lines of code</td><td>Thumbs Up</td></tr><tr><td>Creates logger class that logs fatal and not fatal messages + tests</td><td>2 File changed, 82 lines of code</td><td>Questions and Conversation</td></tr><tr><td>Creates <code>UserInfo</code> object to get passed along with logged errors for debugging ease</td><td>1 file changed 24 lines of code</td><td>Thumbs Up</td></tr><tr><td>Refactors logger to use optional <code>UserInfo</code> object + tests</td><td>2 files changed 42 lines of code</td><td>Comments and minor optimizations</td></tr><tr><td>Use logger at suspected failure points</td><td>8 files changed 94 lines of code</td><td>2 Defects found, accidentally deleted stuff you didn't mean to</td></tr><tr><td>Use logger at other high risk points...</td><td>7 files changed ... etc.,</td><td></td></tr><tr><td>+ however many more changes you decide to make.</td><td></td><td></td></tr></tbody></table><p>Each one of those PR's covers a small amount of work. The person reviewing them will be able to review it with ease, and will more likely catch errors made or leave feedback that could enhance your design. Plus, because the PRs are so small, people get to the review earlier, and complete it far faster than those large ones.</p><br/><h2>How to be effective with Small Pull Requests</h2><br/><h3>1. Understand the Problem</h3><br/><p>First we need to understand the problem. Here is where we explore in code, ask our questions and get clarity on the task, or try and cut scope if we can.</p><br/><h3>2. Design First</h3><br/><p>After we've researched the problem and found some potential solutions, often times the next best foot forward is to write up a design document and send it to our peers.</p><p>Seems heavy handed? Sometimes it is. Even so, the exercise is worth it. When we get good at it, we can skip it for the truly small stuff. At the very least we should grab someone who would generally review our code <em>(if not possible anyone nerdy will do)</em>, take them to a whiteboard and start explaining the problem, what was learned, and how we plan on solving it.</p><h4>Why?</h4><p>Several awesome things happen here.</p><ol><li>Steps can be named and PR's can be planned in advance</li><li>The person or persons reviewing our code have more context. This allows them to push back on stuff that is important, and to <em>not</em> push back on stuff that they know will be addressed in the coming small prs.</li><li>We get feedback <em>before</em> we implement a solution. This can sometimes alter the solution so dramatically and save an incredible amount of time.</li><li>Naming and conceptual integrity concerns can often be addressed and solved before code review</li></ol><p><em>There are many more benefits to pairing with others on designing the solution for a problem.</em></p><br/><h3>3. Commit to Single Concept PRs</h3><br/><p>By not breaking the work apart, the code change will still end up being a monster that the team will take time to review and will often miss defects or other code smells.</p><br/><p><strong>Single Concept PR's for dummies</strong></p><ol start="0"><li>Understand Problem &amp; Plan it out</li><li>Add Thing A with Tests (1 PR)</li><li>Add Thing B with Tests (1 PR)</li><li>Wire Thing A + B together + tests (1 PR)</li><li>Repeat steps 1 - 3</li></ol><h3>4. Bask in the glorious feeling of efficiently shipping awesome code</h3>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/musings/Disposable</guid><title>Disposable...</title><description>How we view "Disposable income" is ruining our lives. We are conditioned to consume. Would you trade your future for your present?</description><link>https://JacobZivanDesign.com/musings/Disposable</link><pubDate>Thu, 31 Dec 2020 08:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Disposable...</h1><p>For decades, culture has taught us to sacrifice the future for the present. That we need to behave, look, or live a certain way to be happy. We're sold a fantasy where the clothes we wear, and the items we own define us. We're made to believe that if we have any funds left over, after our necessities are paid for each month, that is called "disposable income." We're made to consume, consume, consume.</p><blockquote><p>If you have any funds left over, after your necessities are paid for each month, that is called "disposable income."</p></blockquote><p>That is how we think of things today isn't it? Disposable. We <em>need</em> whats <em>new</em>, <em>fresh</em>, or <em>trendy</em>. Just toss the old thing and get the new thing. You've got disposable income, so what does it matter?</p><br/><br/><h2>"You Only Live Once"</h2><p>Lease a new cell phone every year, the payment is only $30 a month! Trade in your car for a loss, get that new car, you deserve it. You can afford $400 a month! Need new clothes? Get this store card for 20% off your first purchase! Your payments will be minimal. New place? Furnish it on credit! Christmas time, again, put it on credit!</p><p>Before most of us know it, we're stressed out, unsatisfied, unhealthy, and swimming in debt. Now our payments are so high, we don't have enough money left after our bills to <em>not</em> use the credit card to survive, and that stresses us out even more. We fight with our spouses and our kids because the life we're living isn't what it's supposed to be. It seems hopeless.</p><h3>Lies</h3><br/><p>How can we live the life we want to live? <em>"We have to make more money"</em> we think to ourselves as we chase down a higher paying job that we won't find satisfaction in. <em>"We need more time"</em> we say to ourselves as we wait in the fast food drive through attempting to save some. <em>"We need a vacation"</em> we tell ourselves because we're so stressed out. <em>"We deserve it."</em></p><p>Whatever those lies are that we're telling ourselves, all we're really doing is justifying that act of trading our futures for our present.</p><blockquote><p>"We deserve it"</p></blockquote><p>We treat everything as if it's disposable. Our money, our possessions, our relationships, our bodies... The YOLO culture has us believing lies. There is a better way.</p><br/><br/><h2>Take a different path</h2><blockquote><p>"Yesterday is gone. Tomorrow has not yet come. We have only today. Let us begin" - Mother Teresa</p></blockquote><p>There is a better way. Like most good things, it's not easy, but it is done every day by millions of people. It starts with a very simple mental shift, a kind of audit. Start thinking about the outcomes of the way you're living your life. Then think if those outcomes are what you desire for your life. <em>At Ramsey Solutions, we refer to that as a "Desired Future"</em></p><p>If your actions won't bring you to your Desired Future, <em>(this is the hard part)</em> change your actions. <em>Profound... I know.</em></p><p>If we eat nothing but burgers and fries and sit on a couch all day, the outcome of those actions is more likely to be weight gain and heart problems than pristine health and physique. Just so, if we stop buying things on credit and pay more than our minimum payments the outcome will be that we will be debt free.</p><blockquote><p>"If your actions won't bring you to your Desired Future, change your actions."</p></blockquote><p>An effective way to change your actions is to get to know yourself. Start asking yourself some questions about your life and how you react to it.</p><p>How do I feel after spending time on social media? How much time did I just spend scrolling? Why did I do that? What do I want my life to look like in 15 years? What things make me feel anxious? What do I like about my job? What do I hate about my job? Do we need 2 cars, that second home, the time share, expensive vacations?</p><p>You may find this to be an enjoyable experience. You may not. Either way, your answers will act as a compass. If you want to go north, but your actions are pointing south... Change directions, it starts with you.</p><p>You are not disposable. Stop treating your life as if tomorrow doesn't matter. Be a better you. The world will be better for it.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/musings/soap-box-media</guid><title>A Soap Box on the Media</title><description>Media Brainwashing? How do you ingest information? Actively or Passively?</description><link>https://JacobZivanDesign.com/musings/soap-box-media</link><pubDate>Wed, 30 Dec 2020 08:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>A Soap Box on the Media</h1><p>If you're like me, you're not on social media (I don't count LinkedIn). Heck, you don't even own a television! So you would get your news by actively seeking out information, reviewing the data, and discerning if it is credible or unbiased <em>hopefully</em> before establishing an opinion. If you're not like me, you likely get your information by placing yourself in the torrent of social media. Such is a place where you would get barraged by conflicting opinions, <em>"unbiased news media"</em>, and constant calls for outrage and hating your neighbor. My hope is that you are able to resist the subterfuge and remain in control of your emotions, many are not.</p><br/><p>Unfortunately for humanity, most of the truly unbiased information isn't presented by that menagerie. That kind of principled journalism has been dying off for a while, so it's difficult to find at all. Instead we are presented the information that produces the most profits.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/five-star-rating</guid><title>A Precise 5 Star Rating with SwiftUI</title><description>SwiftUI 5 Star Rating View Tutorial - Use SwiftUI to make a Star Review component from scratch!</description><link>https://JacobZivanDesign.com/technology/five-star-rating</link><pubDate>Sat, 19 Sep 2020 08:13:00 -0500</pubDate><content:encoded><![CDATA[<h1>A Precise 5 Star Rating with SwiftUI</h1><img src="../../images/5star.png" alt="5 star view"/><br/><br/><p>Recently, during some slack time at work, I took a look at a mockup we were showing customers during our discovery interviews. The mockup contained a 5 star rating view. You know the one I'm talking about, they're everywhere. Amazon, Airbnb, Walmart… you name it. To get some practice in SwiftUI, I decided I'd create that view component from scratch.</p><p>I had a few ideas on how to create the view:</p><ol><li>Give a progress view a custom mask.</li><li>Layout 5 stars and mask over the top of them with a rectangle.</li><li>And finally to use Apple's new <a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/">SFSymbols</a> to create a simple version using the full star and half star symbols, but that wasn't going to be precise enough to match the mock up.</li></ol><p>I decided to go with option two: Masking over 5 stars. Though I quickly realized that it wasn't a simple as masking over the collection of the stars. I had forgotten to account for the space between each star! After some thought, I chose to mask each star individually. This is how it works:</p><h2>A 5 point scale</h2><p>Each star needs to represent a portion of the scale. The first star represents 0 to 1, the second 1 to 2 and so on. The simplest solution I could think of was to iterate over an array of stars and create the mask value from <code>rating - index</code> then normalizing it with a floor of 0 and a ceiling of 1.</p><p>For example, if the 5 star rating was 3.6, this is what the mask results would look like:</p><table><thead><tr><th align="right">Star Index</th><th align="right">Mask Value</th><th align="right">After normailzation</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">3.6</td><td align="right">1</td></tr><tr><td align="right">1</td><td align="right">2.6</td><td align="right">1</td></tr><tr><td align="right">2</td><td align="right">1.6</td><td align="right">1</td></tr><tr><td align="right">3</td><td align="right">0.6</td><td align="right">0.6</td></tr><tr><td align="right">4</td><td align="right">0</td><td align="right">0</td></tr></tbody></table><p>After that value is returned, we can use it to mask the star by multiplying the mask ratio by the star's width.</p><p>This is what the individual star's code looks like:</p><pre><code><span class="keyword">struct</span> RatingStar: <span class="type">View</span> {
    <span class="keyword">var</span> rating: <span class="type">CGFloat</span>
    <span class="keyword">var</span> color: <span class="type">Color</span>
    <span class="keyword">var</span> index: <span class="type">Int</span>
    
    
    <span class="keyword">var</span> maskRatio: <span class="type">CGFloat</span> {
        <span class="keyword">let</span> mask = rating - <span class="type">CGFloat</span>(index)
        
        <span class="keyword">switch</span> mask {
        <span class="keyword">case</span> <span class="number">1</span>...: <span class="keyword">return</span> <span class="number">1</span>
        <span class="keyword">case</span> ..&lt;<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span>
        <span class="keyword">default</span>: <span class="keyword">return</span> mask
        }
    }


    <span class="keyword">init</span>(rating: <span class="type">Decimal</span>, color: <span class="type">Color</span>, index: <span class="type">Int</span>) {
        <span class="comment">// Why decimal? Decoding floats and doubles is not accurate.</span>
        <span class="keyword">self</span>.<span class="property">rating</span> = <span class="type">CGFloat</span>(<span class="type">Double</span>(rating.<span class="property">description</span>) ?? <span class="number">0</span>)
        <span class="keyword">self</span>.<span class="property">color</span> = color
        <span class="keyword">self</span>.<span class="property">index</span> = index
    }


    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">GeometryReader</span> { star <span class="keyword">in</span>
            <span class="type">Image</span>(systemName: <span class="string">"star.fill"</span>)
                .<span class="call">foregroundColor</span>(<span class="keyword">self</span>.<span class="property">color</span>)
                .<span class="call">mask</span>(
                    <span class="type">Rectangle</span>()
                        .<span class="call">size</span>(
                            width: star.<span class="property">size</span>.<span class="property">width</span> * <span class="keyword">self</span>.<span class="property">maskRatio</span>,
                            height: star.<span class="property">size</span>.<span class="property">height</span>
                        )
                    
                )
        }
    }
}
</code></pre><br/><p>Easy right!? Let's lay the code out and see how it looks!</p><p>First, I wanted to separate the background stars and the foreground stars to keep things nice and clean. Next, I decided to put the image into its own view so any updates to it will apply to all locations a star image would be used.</p><pre><code><span class="keyword">public struct</span> FiveStarView: <span class="type">View</span> {
    <span class="keyword">var</span> rating: <span class="type">Decimal</span>
    <span class="keyword">var</span> color: <span class="type">Color</span>
    <span class="keyword">var</span> backgroundColor: <span class="type">Color</span>

    <span class="keyword">public init</span>(
        rating: <span class="type">Decimal</span>,
        color: <span class="type">Color</span> = .<span class="dotAccess">red</span>,
        backgroundColor: <span class="type">Color</span> = .<span class="dotAccess">gray</span>
    ) {
        <span class="keyword">self</span>.<span class="property">rating</span> = rating
        <span class="keyword">self</span>.<span class="property">color</span> = color
        <span class="keyword">self</span>.<span class="property">backgroundColor</span> = backgroundColor
    }

    <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">ZStack</span> {
            <span class="type">BackgroundStars</span>(backgroundColor)
            <span class="type">ForegroundStars</span>(rating: rating, color: color)
        }
    }
}


<span class="keyword">private struct</span> StarImage: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Image</span>(systemName: <span class="string">"star.fill"</span>)
    }
}


<span class="keyword">private struct</span> BackgroundStars: <span class="type">View</span> {
    <span class="keyword">var</span> color: <span class="type">Color</span>

    <span class="keyword">init</span>(<span class="keyword">_</span> color: <span class="type">Color</span>) {
        <span class="keyword">self</span>.<span class="property">color</span> = color
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">HStack</span> {
            <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">5</span>) { <span class="keyword">_ in</span>
                <span class="type">StarImage</span>()
            }
        }.<span class="call">foregroundColor</span>(color)
    }
}


<span class="keyword">private struct</span> ForegroundStars: <span class="type">View</span> {
    <span class="keyword">var</span> rating: <span class="type">Decimal</span>
    <span class="keyword">var</span> color: <span class="type">Color</span>

    <span class="keyword">init</span>(rating: <span class="type">Decimal</span>, color: <span class="type">Color</span>) {
        <span class="keyword">self</span>.<span class="property">rating</span> = rating
        <span class="keyword">self</span>.<span class="property">color</span> = color
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">HStack</span> {
            <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">5</span>) { index <span class="keyword">in</span>
                <span class="type">RatingStar</span>(
                    rating: <span class="keyword">self</span>.<span class="property">rating</span>,
                    color: <span class="keyword">self</span>.<span class="property">color</span>,
                    index: index
                )
            }
        }
    }
}
</code></pre><br/><h2>Crap!</h2><img class="left-item" style="max-width: 300px;" alt="broken 5 star view" src="../../images/5star_fail.png"/><br/><br/><br/><br/><br/><br/><p>Just a minor detail or two. Let's make sure the images can scale and fit the right aspect ratio:</p><pre><code><span class="keyword">private struct</span> StarImage: <span class="type">View</span> {

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Image</span>(systemName: <span class="string">"star.fill"</span>)
            .<span class="call">resizable</span>()
            .<span class="call">aspectRatio</span>(contentMode: .<span class="dotAccess">fill</span>)
    }
}
</code></pre><br/><img class="right-item" style="max-width: 300px;" alt="5 star view" src="../../images/5star_upright.png"/><span class="clear-left"></span><h2>Voila!</h2><p>Like magic! This was a fun little project. In comparison to UIKit (SwiftUI's predecessor), it was far less code and dramatically more enjoyable to create. You can checkout the source code on <a href="https://github.com/JZDesign/FiveStarRating_SwiftUI">Github</a>.</p><p><em>This article was originally posted on Medium</em></p><span class="clearfix" style="overflow:auto;"></span>]]></content:encoded></item></channel></rss>