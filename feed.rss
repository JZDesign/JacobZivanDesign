<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content"><channel><title>Jacob Zivan Design</title><description>Musings and learnings from a banker turned nerd - Tips, tutorials, principles, and thought processes on life and software.</description><link>https://JacobZivanDesign.com</link><language>en</language><lastBuildDate>Thu, 31 Dec 2020 22:29:01 -0600</lastBuildDate><pubDate>Thu, 31 Dec 2020 22:29:01 -0600</pubDate><ttl>250</ttl><atom:link href="https://JacobZivanDesign.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://JacobZivanDesign.com/musings/Disposable</guid><title>Disposable...</title><description>We are conditioned to consume. Would you trade your future for your present?</description><link>https://JacobZivanDesign.com/musings/Disposable</link><pubDate>Thu, 31 Dec 2020 08:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Disposable...</h1><p>For decades, culture has taught us to sacrifice the future for the present. That we need to behave, look, or live a certain way to be happy. We're sold a fantasy where the clothes we wear, and the items we own define us. We're made to believe that if we have any funds left over, after our necessities are paid for each month, that is called "disposable income." We're made to consume, consume, consume.</p><blockquote><p>If you have any funds left over, after your necessities are paid for each month, that is called "disposable income."</p></blockquote><p>That is how we think of things today isn't it? Disposable. We <em>need</em> whats <em>new</em>, <em>fresh</em>, or <em>trendy</em>. Just toss the old thing and get the new thing. You've got disposable income, so what does it matter?</p><br/><br/><h2>"You Only Live Once"</h2><p>Lease a new cell phone every year, the payment is only $30 a month! Trade in your car for a loss, get that new car, you deserve it. You can afford $400 a month! Need new clothes? Get this store card for 20% off your first purchase! Your payments will be minimal. New place? Furnish it on credit! Christmas time, again, put it on credit!</p><p>Before most of us know it, we're stressed out, unsatisfied, unhealthy, and swimming in debt. Now our payments are so high, we don't have enough money left after our bills to <em>not</em> use the credit card to survive, and that stresses us out even more. We fight with our spouses and our kids because the life we're living isn't what it's supposed to be. It seems hopeless.</p><h3>Lies</h3><br/><p>How can we live the life we want to live? <em>"We have to make more money"</em> we think to ourselves as we chase down a higher paying job that we won't find satisfaction in. <em>"We need more time"</em> we say to ourselves as we wait in the fast food drive through attempting to save some. <em>"We need a vacation"</em> we tell ourselves because we're so stressed out. <em>"We deserve it."</em></p><p>Whatever those lies are that we're telling ourselves, all we're really doing is justifying that act of trading our futures for our present.</p><blockquote><p>"We deserve it"</p></blockquote><p>We treat everything as if it's disposable. Our money, our possessions, our relationships, our bodies... The YOLO culture has us believing lies. There is a better way.</p><br/><br/><h2>Take a different path</h2><blockquote><p>"Yesterday is gone. Tomorrow has not yet come. We have only today. Let us begin" - Mother Teresa</p></blockquote><p>There is a better way. Like most good things, it's not easy, but it is done every day by millions of people. It starts with a very simple mental shift, a kind of audit. Start thinking about the outcomes of the way you're living your life. Then think if those outcomes are what you desire for your life. <em>At Ramsey Solutions, we refer to that as a "Desired Future"</em></p><p>If your actions won't bring you to your Desired Future, <em>(this is the hard part)</em> change your actions. <em>Profound... I know.</em></p><p>If we eat nothing but burgers and fries and sit on a couch all day, the outcome of those actions is more likely to be weight gain and heart problems than pristine health and physique. Just so, if we stop buying things on credit and pay more than our minimum payments the outcome will be that we will be debt free.</p><blockquote><p>"If your actions won't bring you to your Desired Future, change your actions."</p></blockquote><p>An effective way to change your actions is to get to know yourself. Start asking yourself some questions about your life and how you react to it.</p><p>How do I feel after spending time on social media? How much time did I just spend scrolling? Why did I do that? What do I want my life to look like in 15 years? What things make me feel anxious? What do I like about my job? What do I hate about my job? Do we need 2 cars, that second home, the time share, expensive vacations?</p><p>You may find this to be an enjoyable experience. You may not. Either way, your answers will act as a compass. If you want to go north, but your actions are pointing south... Change directions, it starts with you.</p><p>You are not disposable. Stop treating your life as if tomorrow doesn't matter. Be a better you. The world will be better for it.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/musings/soap-box-media</guid><title>A Soap Box on the Media</title><description>How do you ingest information? Actively or Passively?</description><link>https://JacobZivanDesign.com/musings/soap-box-media</link><pubDate>Wed, 30 Dec 2020 08:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>A Soap Box on the Media</h1><p>If you're like me, you're not on social media (I don't count LinkedIn). Heck, you don't even own a television! So you would get your news by actively seeking out information, reviewing the data, and discerning if it is credible or unbiased <em>hopefully</em> before establishing an opinion. If you're not like me, you likely get your information by placing yourself in the torrent of social media. Such is a place where you would get barraged by conflicting opinions, <em>"unbiased news media"</em>, and constant calls for outrage and hating your neighbor. My hope is that you are able to resist the subterfuge and remain in control of your emotions, many are not.</p><br/><p>Unfortunately for humanity, most of the truly unbiased information isn't presented by that menagerie. That kind of principled journalism has been dying off for a while, so it's difficult to find at all. Instead we are presented the information that produces the most profits.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/five-star-rating</guid><title>A Precise 5 Star Rating with SwiftUI</title><description>Make the infamous component from scratch!</description><link>https://JacobZivanDesign.com/technology/five-star-rating</link><pubDate>Sat, 19 Sep 2020 08:13:00 -0500</pubDate><content:encoded><![CDATA[<h1>A Precise 5 Star Rating with SwiftUI</h1><img src="../../images/5star.png" alt="x"/><br/><br/><p>Recently, during some slack time at work, I took a look at a mockup we were showing customers during our discovery interviews. The mockup contained a 5 star rating view. You know the one I'm talking about, they're everywhere. Amazon, Airbnb, Walmart… you name it. To get some practice in SwiftUI, I decided I'd create that view component from scratch.</p><p>I had a few ideas on how to create the view: - Give a progress view a custom mask. - Layout 5 stars and mask over the top of them with a rectangle. - And finally to use Apple's new <a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/">SFSymbols</a> to create a simple version using the full star and half star symbols, but that wasn't going to be precise enough to match the mock up.</p><p>I decided to go with option two: Masking over 5 stars. Though I quickly realized that it wasn't a simple as masking over the collection of the stars. I had forgotten to account for the space between each star! After some thought, I chose to mask each star individually. This is how it works:</p><h2>A 5 point scale</h2><p>Each star needs to represent a portion of the scale. The first star represents 0 to 1, the second 1 to 2 and so on. The simplest solution I could think of was to iterate over an array of stars and create the mask from rating - index with a floor of 0 and a ceiling of 1.</p><p>For example, if the 5 star rating was 3.6, this is what the mask results would look like:</p><table><thead><tr><th align="right">Star Index</th><th align="right">Mask Value</th><th align="right">After normailzation</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">3.6</td><td align="right">1</td></tr><tr><td align="right">1</td><td align="right">2.6</td><td align="right">1</td></tr><tr><td align="right">2</td><td align="right">1.6</td><td align="right">1</td></tr><tr><td align="right">3</td><td align="right">0.6</td><td align="right">0.6</td></tr><tr><td align="right">4</td><td align="right">0</td><td align="right">0</td></tr></tbody></table><p>After that value is returned, we can use it to mask the star by multiplying the mask ratio by the star's width.</p><p>This is what the individual star's code looks like:</p><pre><code><span class="keyword">struct</span> RatingStar: <span class="type">View</span> {
    <span class="keyword">var</span> rating: <span class="type">CGFloat</span>
    <span class="keyword">var</span> color: <span class="type">Color</span>
    <span class="keyword">var</span> index: <span class="type">Int</span>
    
    
    <span class="keyword">var</span> maskRatio: <span class="type">CGFloat</span> {
        <span class="keyword">let</span> mask = rating - <span class="type">CGFloat</span>(index)
        
        <span class="keyword">switch</span> mask {
        <span class="keyword">case</span> <span class="number">1</span>...: <span class="keyword">return</span> <span class="number">1</span>
        <span class="keyword">case</span> ..&lt;<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span>
        <span class="keyword">default</span>: <span class="keyword">return</span> mask
        }
    }


    <span class="keyword">init</span>(rating: <span class="type">Decimal</span>, color: <span class="type">Color</span>, index: <span class="type">Int</span>) {
        <span class="comment">// Why decimal? Decoding floats and doubles is not accurate.</span>
        <span class="keyword">self</span>.<span class="property">rating</span> = <span class="type">CGFloat</span>(<span class="type">Double</span>(rating.<span class="property">description</span>) ?? <span class="number">0</span>)
        <span class="keyword">self</span>.<span class="property">color</span> = color
        <span class="keyword">self</span>.<span class="property">index</span> = index
    }


    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">GeometryReader</span> { star <span class="keyword">in</span>
            <span class="type">Image</span>(systemName: <span class="string">"star.fill"</span>)
                .<span class="call">foregroundColor</span>(<span class="keyword">self</span>.<span class="property">color</span>)
                .<span class="call">mask</span>(
                    <span class="type">Rectangle</span>()
                        .<span class="call">size</span>(
                            width: star.<span class="property">size</span>.<span class="property">width</span> * <span class="keyword">self</span>.<span class="property">maskRatio</span>,
                            height: star.<span class="property">size</span>.<span class="property">height</span>
                        )
                    
                )
        }
    }
}
</code></pre><br/><p>Easy right!? Let's lay the code out and see how it looks!</p><p>First, I wanted to separate the background stars and the foreground stars to keep things nice and clean. Next, I decided to put the image into its own view so any updates to it will apply to all locations a star image would be used.</p><pre><code><span class="keyword">public struct</span> FiveStarView: <span class="type">View</span> {
    <span class="keyword">var</span> rating: <span class="type">Decimal</span>
    <span class="keyword">var</span> color: <span class="type">Color</span>
    <span class="keyword">var</span> backgroundColor: <span class="type">Color</span>

    <span class="keyword">public init</span>(
        rating: <span class="type">Decimal</span>,
        color: <span class="type">Color</span> = .<span class="dotAccess">red</span>,
        backgroundColor: <span class="type">Color</span> = .<span class="dotAccess">gray</span>
    ) {
        <span class="keyword">self</span>.<span class="property">rating</span> = rating
        <span class="keyword">self</span>.<span class="property">color</span> = color
        <span class="keyword">self</span>.<span class="property">backgroundColor</span> = backgroundColor
    }

    <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">ZStack</span> {
            <span class="type">BackgroundStars</span>(backgroundColor)
            <span class="type">ForegroundStars</span>(rating: rating, color: color)
        }
    }
}


<span class="keyword">private struct</span> StarImage: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Image</span>(systemName: <span class="string">"star.fill"</span>)
    }
}


<span class="keyword">private struct</span> BackgroundStars: <span class="type">View</span> {
    <span class="keyword">var</span> color: <span class="type">Color</span>

    <span class="keyword">init</span>(<span class="keyword">_</span> color: <span class="type">Color</span>) {
        <span class="keyword">self</span>.<span class="property">color</span> = color
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">HStack</span> {
            <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">5</span>) { <span class="keyword">_ in</span>
                <span class="type">StarImage</span>()
            }
        }.<span class="call">foregroundColor</span>(color)
    }
}


<span class="keyword">private struct</span> ForegroundStars: <span class="type">View</span> {
    <span class="keyword">var</span> rating: <span class="type">Decimal</span>
    <span class="keyword">var</span> color: <span class="type">Color</span>

    <span class="keyword">init</span>(rating: <span class="type">Decimal</span>, color: <span class="type">Color</span>) {
        <span class="keyword">self</span>.<span class="property">rating</span> = rating
        <span class="keyword">self</span>.<span class="property">color</span> = color
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">HStack</span> {
            <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">5</span>) { index <span class="keyword">in</span>
                <span class="type">RatingStar</span>(
                    rating: <span class="keyword">self</span>.<span class="property">rating</span>,
                    color: <span class="keyword">self</span>.<span class="property">color</span>,
                    index: index
                )
            }
        }
    }
}
</code></pre><br/><h2>Crap!</h2><img src="../../images/5star_fail.png" alt="x"/><br/><br/><p>Just a minor detail or two. Let's make sure the images can scale and fit the right aspect ratio:</p><pre><code><span class="keyword">private struct</span> StarImage: <span class="type">View</span> {

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Image</span>(systemName: <span class="string">"star.fill"</span>)
            .<span class="call">resizable</span>()
            .<span class="call">aspectRatio</span>(contentMode: .<span class="dotAccess">fill</span>)
    }
}
</code></pre><br/><h2>Viola!</h2><p>Like magic! This was a fun little project. In comparison to UIKit (SwiftUI's predecessor), it was far less code and dramatically more enjoyable to create. You can checkout the source code on <a href="https://github.com/JZDesign/FiveStarRating_SwiftUI">Github</a>.</p><p><em>This article was originally posted on Medium</em></p>]]></content:encoded></item></channel></rss>