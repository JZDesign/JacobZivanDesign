<?xml version="1.0" encoding="UTF-8"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Jacob Zivan Design</title><description>Musings and learnings from a banker turned nerd - Tips, tutorials, principles, and thought processes on life and software.</description><link>https://JacobZivanDesign.com</link><language>en</language><lastBuildDate>Sat, 21 Dec 2024 21:50:03 -0600</lastBuildDate><pubDate>Sat, 21 Dec 2024 21:50:03 -0600</pubDate><ttl>250</ttl><atom:link href="https://JacobZivanDesign.com/feed.rss" rel="self" type="application/rss+xml"/><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/never-miss-a-localized-string</guid><title>Never Miss a Localized String Value Again</title><description>Managing localized strings can be difficult. But, there are some tools on how to manage localized strings in iOS to make sure we don't royally mess things up. In this article, we'll cover how to utilize compile time checks and prevent errors with localized strings.</description><link>https://JacobZivanDesign.com/technology/never-miss-a-localized-string</link><pubDate>Mon, 16 Dec 2024 22:10:00 -0600</pubDate><content:encoded><![CDATA[<p>"how to manage localized strings in iOS" "preventing errors with localized strings Swift" "Swift localization best practices" "using LocalizedStringKey in iOS" "Swift Package Manager for localization" "string localization in iOS without magic strings" "compile-time checks for localized strings iOS" "best practices for string catalogues in Swift" "avoiding localization errors in iOS apps" "Swift localization tutorial"</p><h1>Never Miss a Localized String Value Again</h1><p>Have you ever had this happen to you? You're testing out a feature in your app, some other team members were recently moving things around and cleaning things up, and you notice that the text on your screen is‚Ä¶ odd. It's not english anymore. It's a string key, something that says: <code>"FEED_PAGE_TITLE_SIGNED_IN"</code> instead of <code>"Your Feed"</code>.</p><p>Well‚Ä¶ that wasn't like that last week‚Ä¶ how did that happen? And as you dig, you realize the error, the team moved the strings to a different bundle and now your reference to the localized string is nil.</p><p>If only the compiler would have caught that for you‚Ä¶</p><br/><h2><code>String.LocalizedValue</code> to the rescue</h2><p>I've got some good news for you. If you never want to run into this again, you can use an enum inside of a Swift Package to fix this for you.</p><p>It's quite simple. In a Swift Package that has a default localization set, any <code>LocalizedStringKey</code> or <code>String.LocalizationValue</code> symbols will automatically create entries in a String Catalogue. Then, you can reference that symbol instead of a magic string, and if your team moves things around, the compiler will check your work and save your hide.</p><br/><h2>Setting up a Swift Package</h2><p>First things first, you need a Swift Package to host your code. Make a directory called "StringExample" and start a Swift Package in that directory with the same name. Then in the <code>Package.swift</code> file, add the <code>defaultLocalization</code> property like so:</p><pre><code><span class="keyword">let</span> package = <span class="type">Package</span>(
    name: <span class="string">"StringExample"</span>,
    defaultLocalization: <span class="string">"en"</span>, <span class="comment">// ADD THIS LINE</span>
    platforms: [.<span class="call">iOS</span>(.<span class="dotAccess">v15</span>), .<span class="dotAccess">macOS</span>(.<span class="dotAccess">v12</span>)], <span class="comment">// Ensure minimum versions are set</span>
    products: [ <span class="comment">/* Leave this alone */</span> ],
    targets: [ <span class="comment">/* Leave this alone */</span> ]
)
</code></pre><p>Then, inside of the source directory, add a new "String Catalogue" file.</p><br/><h2>Creating the enum</h2><p>When you have that ready, what we need to do is create the symbols that we can reference in our code to prevent that debacle I described above. Go ahead and open the <code>StringExample.swift</code> file, and add the following code:</p><pre><code><span class="keyword">import</span> Foundation

<span class="keyword">public enum</span> Strings {
    <span class="keyword">public enum</span> Home: <span class="type">String</span>.<span class="type">LocalizationValue</span> {
        <span class="keyword">case</span> title = <span class="string">"HOME_TITLE"</span>
    }
}
</code></pre><p>After that, you can build the package by hitting CMD + B ‚Äî When it's complete, open up the String Catalogue. There you will notice a string entry with the key <code>HOME_TITLE</code> and an empty value.</p><p>Now that it's there, it won't delete the key unless you delete the enum case or change the raw value. That means you can add a localized value in that String Catalogue, and you're on your way to having a stable localization setup.</p><p>Go ahead and set the value to something simple, like: "Your Feed"</p><br/><h2>Getting the localized strings</h2><p>Now that you have an enum with the keys in there, you still aren't able to get the localized values yet. Let's make a protocol that helps us with this. In the same file, write the following code:</p><pre><code><span class="keyword">public protocol</span> AutoLocalizing {
    <span class="keyword">var</span> rawValue: <span class="type">String</span>.<span class="type">LocalizationValue</span> { <span class="keyword">get</span> }
}

<span class="keyword">public extension</span> <span class="type">AutoLocalizing</span> {
    <span class="keyword">func</span> callAsFunction() -&gt; <span class="type">String</span> {
        <span class="type">String</span>(localized: rawValue, bundle: .<span class="dotAccess">module</span>)
    }
}
</code></pre><p>After you've done that, conform your <code>Home</code> enum to <code>AutoLocalizing</code> like so:</p><pre><code><span class="keyword">public enum</span> Home: <span class="type">String</span>.<span class="type">LocalizationValue</span>, <span class="type">AutoLocalizing</span> { <span class="comment">/* Leave alone */</span> }
</code></pre><p>Finally, when you've done that, you can reference the strings by the enum and get them localized in a flash. That will look something like this:</p><pre><code><span class="keyword">let</span> x: <span class="type">String</span> = <span class="type">Strings</span>.<span class="type">Home</span>.<span class="call">title</span>()
</code></pre><br/><h2>Wrapping up</h2><p>Now you won't have to worry about those human issues with strings getting relocated because the compiler will complain the moment the symbol needs to be imported. We can go even further and write automated tests to ensure that there are values set too! Conform the enum to <code>CaseIterable</code> and assert that the key <code>!=</code> the localized value for each case. All you need to do is run the assertion for each enum and localization. Short and sweet.</p><h3>üî•‚òùÔ∏è Sample code up <a href="https://github.com/JZDesign/AutoLocalizingExample">here.</a></h3>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/people_make_mistakes</guid><title>Humans write code, and humans make mistakes.</title><description>One thing I've learned is to **just freaking** let the compiler prevent me from making mistakes. Sometimes that's hard to do, then I learned about something called a Domain Primitive and I decided to give it a try in Swift.</description><link>https://JacobZivanDesign.com/technology/people_make_mistakes</link><pubDate>Wed, 21 Aug 2024 09:10:00 -0500</pubDate><content:encoded><![CDATA[<h1>Humans write code, and humans make mistakes.</h1><p>In my journey writing software, I've come to love working in strongly typed, compiled languages. If I'm being totally honest, at first‚Ä¶ I didn't care for them. They felt restrictive. Why couldn't I just send whatever I wanted and just wrangle it on the other side? In my youthful hubris, I often thought things like: "I'm not dumb, I won't send an object when I need an integer." But, it didn't take long for me to forget the details of what I had worked on, and I wrote the very code I swore I was incapable of writing. And of course, it took longer than I would have liked to figure out what the issue was and get it fixed. Now, I wish I could tell you that I only ever did that once‚Ä¶ but I would be lying.</p><p>Events like those, whether it was code I wrote or an inherited bug I had to chase down, are what really drove me into the arms of good compiled languages like Swift or Kotlin. One of their primary benefits is the compiler preventing me from making certain mistakes, and therefore, preventing me from shipping a lot more bugs. However, there is one way this is lacking in our languages today, and that is how often we need to pass around a simple value‚Äîthink of very commonly used types like: <code>String</code>, <code>Int</code>, <code>Bool</code>‚Äîand since they're so common, the compiler doesn't ensure I typed what I meant to. To describe what I mean, consider the following examples:</p><p>If I have a function or a class that needs an Identifier that is represented by a common type like <code>String</code> there is nothing preventing me from providing it the wrong identifier. For example, say we have a Customer object that has an Id. On that object are <code>membershipId</code> and <code>activeOfferId</code> fields that are used to fetch more specific data later. All are of type <code>String</code>. Like this:</p><pre><code><span class="keyword">struct</span> Customer {
    <span class="keyword">let</span> id: <span class="type">String</span>
    <span class="keyword">let</span> membershipId: <span class="type">String</span>
    <span class="keyword">let</span> activeOfferId: <span class="type">String</span>
}
</code></pre><p>That seems fine right now, but the problems arise when we need to call certain functions with this data. Say we have a function that gets some useful object by <code>membershipId</code> but the developer didn't make that very clear. Like:</p><pre><code><span class="keyword">func</span> getUsefulThingForCustomer(by id: <span class="type">String</span>) <span class="keyword">throws</span> -&gt; <span class="type">SomeUsefulThing</span>
</code></pre><p>That reads as if I should send it the <code>customer.id</code>, not the <code>membershipId</code> so at some point we can accidentally swap out the argument and introduce a bug because it reads like it should be a different ID. This happens all the more with functions or initializers that use multiple unnamed arguments of the same type. If the order changes for some reason, nothing enforces that we update the call-sites to match the new order. For example:</p><pre><code><span class="keyword">struct</span> Customer {
    <span class="keyword">let</span> id: <span class="type">String</span>
    <span class="keyword">let</span> membershipId: <span class="type">String</span>
    <span class="keyword">let</span> activeOfferId: <span class="type">String</span>

    <span class="comment">// First version of the function</span>
    <span class="keyword">static func</span> new(<span class="keyword">_</span> id: <span class="type">String</span>, <span class="keyword">_</span> membershipId: <span class="type">String</span>, <span class="keyword">_</span> activeOfferId: <span class="type">String</span>) -&gt; <span class="type">Customer</span>
}
<span class="comment">// It's used in a file like this:</span>
<span class="keyword">let</span> customer = <span class="type">Customer</span>.<span class="call">new</span>(<span class="string">"811E06EC-73C8-45C2-A4CE-AA99E11B05C7"</span>, <span class="string">"membership-1"</span>, <span class="string">"activeOffer-1"</span>)

<span class="comment">// Along the lines, someone decides that the code formatter will enforce all functions should have alphabetically ordered arguments
// Then the `new` function is changed to this:</span>

<span class="keyword">static func</span> new(<span class="keyword">_</span> activeOfferId: <span class="type">String</span>, <span class="keyword">_</span> id: <span class="type">String</span>, <span class="keyword">_</span> membershipId: <span class="type">String</span>) -&gt; <span class="type">Customer</span>

<span class="comment">// but the call site does't get updated‚Ä¶ and then you have an interesting bug to track down.</span>
</code></pre><p>You can solve this by creating a custom type that represents the value, but is totally unique. For example:</p><pre><code><span class="keyword">struct</span> CustomerId: <span class="type">RawRepresentable</span> {
    <span class="keyword">let</span> rawValue: <span class="type">UUID</span>
}

<span class="keyword">struct</span> MembershipId: <span class="type">RawRepresentable</span> {
    <span class="keyword">let</span> rawValue: <span class="type">String</span>
}

<span class="keyword">struct</span> ActiveOfferId: <span class="type">RawRepresentable</span> {
    <span class="keyword">let</span> rawValue: <span class="type">String</span>
}

<span class="keyword">struct</span> Customer {
    <span class="keyword">let</span> id: <span class="type">CustomerId</span>
    <span class="keyword">let</span> membershipId: <span class="type">MembershipId</span>
    <span class="keyword">let</span> activeOfferId: <span class="type">ActiveOfferId</span>

    <span class="comment">// First version of the function</span>
    <span class="keyword">static func</span> new(<span class="keyword">_</span> id: <span class="type">CustomerId</span>, <span class="keyword">_</span> membershipId: <span class="type">MembershipId</span>, <span class="keyword">_</span> activeOfferId: <span class="type">ActiveOfferId</span>) -&gt; <span class="type">Customer</span>
}
</code></pre><p>Now, if the formatter went and tried to make the alphabetical ordering change, the compiler would throw an error because the arguments aren't the right types. This is a nice improvement. But it's not all sunshine and rainbows‚Ä¶ That <code>RawRepresentable</code> protocol requires you create an object that contains some value, and if that value is more complex than a simple primitive value like <code>Int</code>, <code>Bool</code>, or <code>String</code>‚Ä¶ things get interesting when you're serializing the object to and from JSON.</p><p>Before, if you wanted to decode JSON into the <code>Customer</code> type, you would just need to slap the <code>Decodable</code> protocol on the struct and you can ingest JSON that looks like this:</p><pre><code>{
    <span class="string">"id"</span>: <span class="string">"811E06EC-73C8-45C2-A4CE-AA99E11B05C7"</span>,
    <span class="string">"membershipId"</span>: <span class="string">"mem-1"</span>,
    <span class="string">"activeOfferId"</span>: <span class="string">"offer-1"</span>
}
</code></pre><p>However, with any <code>RawRepresentable</code> model that doesn't contain simple values‚Äî<code>UUID</code> is one such type‚Äîthe JSON object would need to look like this for you to decode it into the <code>Customer</code> struct:</p><pre><code>{
    <span class="string">"id"</span>: {
        <span class="string">"rawValue"</span> : <span class="string">"811E06EC-73C8-45C2-A4CE-AA99E11B05C7"</span>
    },
    <span class="string">"membershipId"</span>: <span class="string">"mem-1"</span>,
    <span class="string">"activeOfferId"</span>: <span class="string">"offer-1"</span>
}
</code></pre><p>So that's not <em>that</em> useful after all. But, in both Swift and Kotlin (and I'm sure many other languages) this can be addressed too. For now, since Swift is my favorite language, I'll cover how to handle that one below.</p><p>So, lets create a protocol to represent this type:</p><pre><code><span class="keyword">protocol</span> DomainPrimitive: <span class="type">Codable</span>, <span class="type">RawRepresentable</span> {
    <span class="keyword">var</span> rawValue: <span class="type">RawValue</span> { <span class="keyword">get</span> }
}
</code></pre><p>That alone won't solve your woes, you'll still need to add the functions and initializers to handle serialization and skip the nested object when the <code>RawValue</code> is <code>UUID</code>. And the good news is, we can do that in an extension with Swift and make them default implementations on the Protocol. Like so:</p><pre><code><span class="keyword">extension</span> <span class="type">DomainPrimitive</span> <span class="keyword">where</span> <span class="type">RawValue</span> == <span class="type">UUID</span> {
    <span class="keyword">func</span> encode(to encoder: any <span class="type">Encoder</span>) <span class="keyword">throws</span> {
        <span class="keyword">var</span> container = encoder.<span class="call">singleValueContainer</span>()
        <span class="keyword">try</span> container.<span class="call">encode</span>(rawValue)
    }

    <span class="keyword">init</span>(from decoder: any <span class="type">Decoder</span>) <span class="keyword">throws</span> {
        <span class="keyword">let</span> rawValue = <span class="keyword">try</span> decoder.<span class="call">singleValueContainer</span>().<span class="call">decode</span>(<span class="type">UUID</span>.<span class="keyword">self</span>)
        <span class="keyword">self</span>.<span class="keyword">init</span>(rawValue: rawValue)! 
        <span class="comment">// Usually, you wouldn't want to force a failing initializer to succeed like this, 
        // but in this case we're okay because we know we have a valid UUID if the try succeeds</span>
    }
}
</code></pre><p>After that, you can change the ID types to conform to this new Protocol and you get both the flat JSON structure, and compiler safety on your IDs and other simple values.</p><pre><code><span class="keyword">struct</span> CustomerId: <span class="type">DomainPrimitive</span> {
    <span class="keyword">let</span> rawValue: <span class="type">UUID</span>
}

<span class="keyword">struct</span> MembershipId: <span class="type">DomainPrimitive</span> {
    <span class="keyword">let</span> rawValue: <span class="type">String</span>
}

<span class="keyword">struct</span> ActiveOfferId: <span class="type">DomainPrimitive</span> {
    <span class="keyword">let</span> rawValue: <span class="type">String</span>
}
</code></pre><p>Sample code and tests can be found at: https://github.com/JZDesign/DomainPrimitive/</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/foresight/urgency</guid><title>Goals are‚Ä¶ hard.</title><description>Long-term goals are really hard. Why do some work and others don't?</description><link>https://JacobZivanDesign.com/foresight/urgency</link><pubDate>Sat, 11 Feb 2023 19:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Goals are‚Ä¶ hard.</h1><p>After January came around and kicked 2022 into last year, I started thinking a lot about the future. Like most people do, I wanted to set some resolutions. Not traditional resolutions though, like "I resolve to read more, so, by the end of 2023 I'll have read 40 books".</p><p>I'm talking about long‚Äìterm, life-altering, <em>big</em> resolutions.</p><p>Like: "I resolve to be a patient, generous, loving, and courageous husband and father. By the time my daughters turn 18, they will have learned to be strong, independent, faithful, hard-working, joyful and generous. By the time I turn 65 I'll be proud of the decisions I've made, people will say they were honored to know me and my life will glorify God."</p><blockquote><p>I resolve to be a patient, generous, loving, and courageous husband and father. People will say they were honored to know me and my life will glorify God.</p></blockquote><p>Here's the thing though‚Ä¶</p><p>I suck at keeping resolutions. Especially the life-altering long-term ones.</p><br/><h2>Why though?</h2><br/><p>Why are long-term goals or life-changing resolutions so‚Ä¶ impossible?</p><p>I've been thinking about that for a while. I've observed myself (and others) both finish strong and fall short of the goal.</p><p>What I've found is this:</p><p>The long-term resolutions that work, only worked because the person had maintained urgency and drive toward the goal.</p><blockquote><p>Long-term resolutions only work because of maintained urgency and drive toward the goal.</p></blockquote><p>That's why short-term goals are so much easier to finish. Because you only have to keep your attention focused for a short time. For long-term goals to succeed, you need to continue to focus on them, especially after you're peppered with distractions.</p><br/><h2>Okay, so‚Ä¶ How?</h2><br/><p>I've got a good answer for that, but before I get there, I need to explain my thinking a little. Let's look at some of my successes and failures in this arena.</p><br/><h3>Great success!</h3><br/><p>I've held to‚Äîand gained from‚Äîseveral long-term resolutions or goals. Like:</p><ol><li>Learn to code and switch careers</li><li>Pay off all of our debt (~$90,000)</li><li>Save 3 months' worth of my family's expenses for emergencies</li></ol><br/><p>Those were relatively easy to stick to. I think there are a few reasons for that. First, the end was well-defined. That made it pretty easy to visualize how things would be different. It also paved the way for the second thing, there was hope for a brighter future on the other end. Third, and probably most compelling, there was a fear of failing that made it feel like a real threat to our mental and spiritual health if we didn't succeed.</p><br/><p>Of those goals, the hardest to accomplish was learning a new craft and switching careers. I had no support system or mentors in technology, and no freaking idea what I was doing. But the fear of failure and the hope for the future heavily outweighed the uncertainty and the discomfort. This took me six years to accomplish.</p><p>The other 2 financial goals were pretty difficult too. But, we had a support system and people to keep us on track, so we did it pretty quickly, it only took us three years.</p><blockquote><p>Those goals were easy because: 1. They were well defined 2. I had hope for the future 3. I had a large fear of failure.</p></blockquote><br/><h3>Failure‚Ä¶</h3><br/><p>Like I said, I suck at long-term goal-keeping. I could probably fill a spiral notebook with all the times I've started a long-term goal and forgotten about it. But for brevity, we'll talk about some common ones.</p><ol><li>Loose weight and keep it off</li><li>Learn a new language and be fluent</li><li>Write a book</li><li>Create that App I've been talking about forever</li></ol><br/><p>You get the point. All of these goals had some of the qualities that made the successful goals easy for me, but none of them had all three.</p><p>Losing weight was well-defined, and I had hope for the future, but I didn't have a fear of failure. I'm in good health, married with kids, and I'm not competitive or vain in that regard‚Ä¶ so <em>not</em> doing a workout for a day or two wouldn't bother me.</p><p>There was nothing to light the fuel underneath me and keep me focused. It didn't take long for the habit to die out and other "more important" things to fill in the space. The same is true for all of the other examples I gave. I had no <strong><em>urgency</em></strong></p><br/><h3>Urgency</h3><br/><p>That's the differentiator.</p><p>That's what made the successful goals attainable and the others fail.</p><p>Having hope for the future and great fear of failure, as well as having access to a support system that kept the goal top-of-mind provided me with the urgency I needed to succeed.</p><p>So, that's the trick. Manufacture urgency. Get yourself psyched up to have hope for what comes after you win, fear what will happen if you don't and find a way to keep the goal on the top of your mind and hold yourself accountable.</p><p>Easy right?</p><p>Well, it isn't easy for me. So that's why I'm making an app to help me with it.</p><br/><h2>Foresight</h2><br/><p>Foresight is an app that is meant to help you easily visualize how much time you have left on your long-term resolutions or goals. Here are a few images of what it looks like:</p><img style="width:360px;" src="../../images/foresight1.png"/><img style="width:360px;" src="../../images/foresight2.png"/><img style="width:360px;" src="../../images/foresight3.png"/><p>It's in its earliest stages of development and is currently in beta testing on Apple's TestFlight. <strong>And I need more testers.</strong> If you're interested in testing the app and providing me feedback, find <a href="https://www.linkedin.com/in/jacob-rakidzich-b8722436/">me on LinkedIn</a> and send me a message, and I'll send you an invite.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/navigation-stack-wwdc-2022</guid><title>Intelligent Navigation with SwiftUI</title><description>At WWDC 2022, Apple announced a new navigation paradigm that simplifies managing a user's navigation stack immensely! Take a look at the new Navigation Stack, available on iOS 16 and macOS 13</description><link>https://JacobZivanDesign.com/technology/navigation-stack-wwdc-2022</link><pubDate>Sun, 7 Aug 2022 13:13:00 -0500</pubDate><content:encoded><![CDATA[<h1>Intelligent Navigation with SwiftUI</h1><p>With the release of macOS 13 and iOS 16, SwiftUI will support a content-aware routing navigation API called <a href="https://developer.apple.com/documentation/swiftui/navigationstack/">NavigationStack</a>. Previously, the "Nav Stack" was a simple stack of views that got piled on top of each other inside of a <a href="https://developer.apple.com/documentation/swiftui/navigationview">NavigationView</a>. The developer needed to manage all of the state and details regarding what view presented the other and make sure the new view had the data it needed to display.</p><p>With the new <code>NavigationStack</code>, Apple chose to couple the presentation and state logic into one incredibly useful view. And it's so simple to use, I didn't get it at first, I thought it <em>had to be</em> more complicated than it was.</p><h2>Navigating to your first new view</h2><p>In this example, we're going to perform <strong><em>very</em></strong> simple navigation, just to show how it works.</p><p>For starters, we need to wrap the first view in a <code>NavigationStack</code> To do so, let's do that in our <code>App.swift</code> file.</p><pre><code><span class="keyword">struct</span> MyApp: <span class="type">App</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
        <span class="type">WindowGroup</span> {
            <span class="type">NavigationStack</span> {
                <span class="type">ContentView</span>()
            }
        }
    }
}
</code></pre><br/><p>Great, Now that we've done that, let's set a very simple destination in our view. For now, it will just present text. To do so, we're going to add a <a href="https://developer.apple.com/documentation/swiftui/navigationlink/">NavigationLink</a> to our <code>ContentView</code></p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">NavigationLink</span>(
                value: <span class="string">"I've Navigated"</span>,
                label: { <span class="type">Text</span>(<span class="string">"Test Navigating"</span>) }
            )
        }
    }
}
</code></pre><br/><p>This is important. The <code>NavigationLink</code> has 2 arguments:</p><ol><li>The value sent during the navigation</li><li>The "link" that is displayed before the navigation event. This could be a simple button, or a custom view.</li></ol><p>In that example above, the user would see a link in the <code>ContentView</code> that says <code>"Test Navigating"</code> though, when it's tapped it does nothing.</p><p>But why?</p><p>Well, like the old <code>NavigationLink</code>, we still need to provide a destination. This time it's done differently. Check it out.</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">NavigationLink</span>(
                value: <span class="string">"I've Navigated"</span>,
                label: { <span class="type">Text</span>(<span class="string">"Test Navigating"</span>) }
            )
        }
        <span class="comment">// Add the destnation here</span>
        .<span class="call">navigationDestination</span>(for: <span class="type">String</span>.<span class="keyword">self</span>) {
            <span class="type">Text</span>($0)
        }
    }
}
</code></pre><br/><p>This may be a little confusing at first, but it's quite simple. When the user taps on <code>"Test Navigating"</code> SwiftUI registers the value <code>"I've Navigated"</code> to the <code>NavigationStack</code>. Since we've set up a destination listening for the <code>String</code> type, it will present a new screen with that data.</p><br/><h2>But wait, there's more!</h2><p>We passed along a static string, but we could send anything <code>Hashable</code>.</p><p>To demonstrate, let's imagine we're creating an app with some complicated user settings. On app launch, the application fetches those settings and stores them in memory. We would represent those settings in unique structures. And if you're into enums like I am, you'd then enumerate all of the possible settings categories like so:</p><pre><code><span class="keyword">enum</span> UserSettings: <span class="type">Hashable</span> {
    <span class="keyword">case</span> notification(<span class="type">NotificationSettings</span>)
    <span class="keyword">case</span> privacy(<span class="type">PrivacySettings</span>)
    <span class="keyword">case</span> appTheme(<span class="type">ThemeSettings</span>)
    <span class="keyword">case</span> paymentMethods(<span class="type">PaymentSettings</span>)
}
</code></pre><br/><p>So from our Settings screen, we could use the <code>NavigationStack</code> like so:</p><pre><code><span class="keyword">struct</span> SettingsScreen: <span class="type">View</span> {
    <span class="keyword">@ObservableObject var</span> settingsStore: <span class="type">SettingsStore</span>
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">NavigationStack</span> {
            <span class="type">List</span>(settingsStore.<span class="property">userSettings</span>) { setting <span class="keyword">in</span>
                <span class="type">NavigationLink</span>(value: setting) {
                    <span class="type">Text</span>(setting.<span class="property">title</span>)
                }
            }.<span class="call">navigationDestination</span>(for <span class="type">UserSettings</span>.<span class="keyword">self</span>) { settings <span class="keyword">in
                switch</span> settings {
                <span class="keyword">case</span> notification(<span class="keyword">let</span> settings):
                    <span class="type">NotificationScreen</span>(settings, save: settingStore.<span class="property">save</span>)
                <span class="keyword">case</span> privacy(<span class="keyword">let</span> settings):
                    <span class="type">PrivacyScreen</span>(settings, save: settingStore.<span class="property">save</span>)
                <span class="keyword">case</span> appTheme(<span class="keyword">let</span> settings):
                    <span class="type">ThemeScreen</span>(settings, save: settingStore.<span class="property">save</span>)
                <span class="keyword">case</span> paymentMethods(<span class="keyword">let</span> settings):
                    <span class="type">PaymentScreen</span>(settings, save: settingStore.<span class="property">save</span>)
                }
            }
        }
    }
}
</code></pre><br/><p>That is <em>awesome!</em> before, with the old NavigationView, we'd need to coordinate the state management ourselves. Additionally, the nav stack with an enumeration like the one we made above could handle nested or cyclical navigation flows with ease!</p><p>This new API really cleans things up!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/deep-linking-in-swift-ui</guid><title>Deep Links</title><description>Set up deep linking in your SwiftUI app with ease! In this article we'll cover the apple-app-site-association file, associated domains, receiving the deep link, and parsing information off of it.</description><link>https://JacobZivanDesign.com/technology/deep-linking-in-swift-ui</link><pubDate>Sat, 30 Jul 2022 13:13:00 -0500</pubDate><content:encoded><![CDATA[<h1>Deep Links</h1><p>This is a fun one. Getting a link to open your app is so satisfying!</p><p>However, it's not all sunshine ‚òÄÔ∏è and rainbows üåà</p><p>Because of caching on Apple's CDN, getting it configured initially can be burdensome. In this article, I hope to save you some of the headaches I went through.</p><br/><h2>A Birds Eye View</h2><p>If you're like me, you've had a few questions about deep linking: Why do some links in a website forward you to their app, but others don't? How does Apple know it should open an app?</p><p><strong>Some Context</strong></p><p>There are a lot of working parts here. First, your app must have been provisioned to support Associated Domains. Second, there needs to be an <code>apple-app-site-association</code> file hosted in the <code>.well-known/</code> directory on your site that tells apple what apps respond to what paths of your site. Finally, your app needs to know how to handle the incoming links.</p><p><strong>How it works</strong></p><p>When a user downloads‚Äîor updates‚Äîyour application and opens it, the operating system will see the Associated Domains capability of your app and it will tell Apple to search for the <code>apple-app-site-association</code> for your domain. After fetching it, the os will register the URLs that should open your app and store it in their CDN. Then, if you tap a link‚Äîor scan a QR code‚Äîthat matches a path in the site association file, the app will open instead of the browser. If you intentionally open a browser and navigate to the URL manually, a button should appear at the top of your browser asking if you want to open the page in the app instead.</p><br/><h2>Provisioning the Associated Domains Capability</h2><p>Your application is "provisioned" by Apple using a Signing Certificate and a Provisioning Profile. The Provisioning Profile contains a list of capabilities your application is allowed to use. What we need to do is update that profile and make Xcode aware of it.</p><h3>Update the App's Capabilities with Apple</h3><p>To do so we first need to update your app's identifier to contain the capability. Sign into <a href="https://developer.apple.com">Apple's Developer Console</a> then find your <a href="https://developer.apple.com/account/resources/identifiers/">App Identifier</a>. Once there, check the box for Associated Domains and click save.</p><img src="../../images/app-identifier.png" alt="App Identifier - Capability"/><h3>Download the Profile for Development</h3><p>When that is done, you'll need to refresh your provisioning profile. From Xcode's Settings -&gt; Accounts pane, make sure you're signed into your Apple account, and click "Download manual profiles"</p><img src="../../images/download-profiles.png" alt="Download the provisioning profile"/><h3>Setup the <a href="https://developer.apple.com/documentation/xcode/supporting-associated-domains">Associated Domains</a> Capability</h3><p>Finally, we need to update your application's capabilities. Navigate to your app's target -&gt; Signing &amp; Capabilities. There, click on <code>+ Capability</code> and select "Associated Domains." Then, in the Capability menu, click the <code>+</code> at the bottom left and enter <code>applinks:{{yourdomain}}</code>. The <code>applinks:</code> prefix is important. That is the bit of information that tells Apple you mean to do deep linking. For more information, you can read <a href="https://developer.apple.com/documentation/bundleresources/entitlements/com_apple_developer_associated-domains">the docs.</a></p><img src="../../images/add-applink-capability.png" alt="App Links capability"/><p>Great! Now that you've done that, we can move on to creating the site association file.</p><br/><h2>The <code>apple-app-site-association</code> file</h2><p>The associated domain you just set up will tell apple to look for the <code>apple-app-site-association</code> file at the domain you entered. For example, if you entered <code>applinks:mysite.com</code> Apple will look here: <code>https://mysite.com/.well-known/apple-app-site-association</code>.</p><p>First, create your <code>.well-known</code> directory at the root of your site's public folder. Then add a file named <code>apple-app-site-association</code> - even though we're going to put JSON in this file, do not give it a file type.</p><p>Now, paste the following JSON into the file.</p><pre><code class="language-no-highlight">{
  "applinks": {
    "details": [
      {
        "appIDs": [
          "{{Your Apple Team ID}}.com.mybundle.identifier"
        ],
        "components": [
          {
            "/": "/some-path-with-data/*",
            "comment": "Matches any URL whose path starts with /some-path-with-data/"
          }
        ]
      }
    ]
  }
}
</code></pre><p>Notice the first JSON object is named <code>applinks</code>? That's the prefix to the Associated Domain capability you added in the last step. You'll need to update a few things here. First, go to <a href="https://developer.apple.com/account/#!/membership/">Apple's Membership</a> area and find your team ID. Your <code>appID</code> is your Team ID + your app's bundle identifier. Replace the appID above with yours. Then, inside of the components object, we have our first link declaration. After <code>"/":</code> we define a path that will redirect to your app. Right now it's set to <code>/some-path-with-data/*</code>. That means if we clicked a link with a URL of: <code>https://mysite.com/some-path-with-data/link-data-12345</code> your application would open.</p><p>The <code>*</code> is important here. It allows us to start the link with any URL matching <code>https://mysite.com/some-path-with-data/</code> we can add any data we want after that. You can change that path if you'd like to, or you could add more by creating a new component like so:</p><pre><code class="language-no-highlight">"components": [
  {
    "/": "/some-path-with-data/*",
    "comment": "Matches any URL whose path starts with /some-path-with-data/"
  },
  {
    "/": "/my-deep-link-with-no-data/",
    "comment": "Matches any URL whose path is exactly /my-deep-link-with-no-data/"
  }
]
</code></pre><p>Great! Now upload that file to your site. Then, we can test that the file exists by making a <code>curl</code> request to Apple's CDN. Open your terminal and paste in this command:</p><pre><code class="language-no-highlight">curl -v https://app-site-association.cdn-apple.com/a/v1/yourdomain.com
</code></pre><p>If you see your JSON in the response, it worked! Your file is formatted properly.</p><p><em>Now, these are cached with Apple's CDN for an hour. If you make any changes to your file and publish them, you won't be able to test the deep link until the cache is refreshed.</em></p><blockquote><p>These are cached with Apple's CDN for an hour.</p></blockquote><br/><h2>Intercepting the Link in SwiftUI</h2><p>Phew! All the hard work is over. Now for the fun stuff! Go ahead and open your SwiftUI application. To make sure we catch all deep links, open your <code>App.swift</code> file. We're going to add 2 modifiers to your view that will catch the deep links, <code>onOpenURL</code> and <code>onContinueUserActivity</code> - we need to do both.</p><pre><code><span class="keyword">@main
struct</span> MyApp: <span class="type">App</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
        <span class="type">WindowGroup</span> {
            <span class="type">ContentView</span>()
                <span class="comment">// This handles Link taps</span>
                .<span class="call">onOpenURL</span> { url <span class="keyword">in</span>
                    <span class="call">print</span>(url.<span class="property">absoluteString</span>)
                }
                <span class="comment">// This handles QR Code scanning or redirecting from Safari</span>
                .<span class="call">onContinueUserActivity</span>(<span class="type">NSUserActivityTypeBrowsingWeb</span>) { userActivity <span class="keyword">in
                    guard let</span> url = userActivity.<span class="property">webpageURL</span> <span class="keyword">else</span> { <span class="keyword">return</span> }
                    <span class="call">print</span>(url.<span class="property">absoluteString</span>)
                }
        }
    }
}
</code></pre><p>Now, when you run your app, go to a URL you specified in your site association file. If you're running a simulator, you can use safari and press the "Open" button that appears at the top of the browser, or you could save a calendar event with the link as a note and tap that. Either way, your app should open and the URL should print to your debugger.</p><p>üî•‚òùÔ∏è</p><br/><h1>Deep linking</h1><p>Great! But how do we do <strong><em>Deep</em></strong> Linking? That's a loaded question, and each application will have different needs and implementations. To give you an example of how you <em>could</em> handle a deep link, we'll add a few things.</p><p>I like to enumerate the deep links I put into my applications. Go ahead and add a new file named <code>DeepLinkDestiniation.swift</code> and add the following code:</p><pre><code><span class="keyword">enum</span> DeepLinkDestination: <span class="type">String</span> {
    <span class="comment">// You can name this whatever you want, but the value on the right 
    // needs to match the path you added to the site association file
    // not including a "*" if you had one</span>
    <span class="keyword">case</span> deepLinkTest = <span class="string">"deep-link-test/"</span>

    <span class="keyword">private var</span> urlRoot: <span class="type">String</span> {
        <span class="string">"https://yourDomain.com/"</span>
    }

    <span class="keyword">var</span> urlString: <span class="type">String</span> {
        urlRoot + rawValue
    }
}
</code></pre><p>Now in your <code>App.swift</code> file, we're going to add a few things:</p><ul><li>A <code>@State</code> variable to hold the URL</li><li>A new view variable that will show different content if a deep link came in</li><li>And the code to set the URL</li></ul><br/><pre><code><span class="keyword">struct</span> MyApp: <span class="type">App</span> {
    <span class="comment">// This value will allow us to act on the deep links</span>
    <span class="keyword">@State var</span> url: <span class="type">URL</span>? = <span class="keyword">nil

    @ViewBuilder 
    var</span> content: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="keyword">if let</span> url = url, url.<span class="property">absoluteString</span>.<span class="call">starts</span>(with: <span class="type">DeepLinkDestination</span>.<span class="property">deepLinkTest</span>.<span class="property">urlString</span>) {
            <span class="type">VStack</span> {
                <span class="type">Text</span>(<span class="string">"It's Alive!"</span>)
                <span class="type">Text</span>(url.<span class="property">absoluteString</span>)
                <span class="comment">// if there is any additional info on the end, display it</span>
                <span class="type">Text</span>(<span class="string">"Deep Link Info:</span> \(url.<span class="property">absoluteString</span>.<span class="call">replacingOccurrences</span>(of: <span class="type">DeepLinkDestination</span>.<span class="property">deepLinkTest</span>.<span class="property">urlString</span>, with: <span class="string">""</span>))<span class="string">"</span>)
            }
        } <span class="keyword">else</span> {
            <span class="type">ContentView</span>()
        }
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
        <span class="type">WindowGroup</span> {
            content <span class="comment">// Use the new view</span>
                .<span class="call">onOpenURL</span> { url <span class="keyword">in</span>
                    <span class="comment">// Set the url to update the content</span>
                    <span class="keyword">self</span>.<span class="property">url</span> = url
                }
                .<span class="call">onContinueUserActivity</span>(<span class="type">NSUserActivityTypeBrowsingWeb</span>) { userActivity <span class="keyword">in
                    guard let</span> url = userActivity.<span class="property">webpageURL</span> <span class="keyword">else</span> { <span class="keyword">return</span> }
                    <span class="comment">// Set the url to update the content</span>
                    <span class="keyword">self</span>.<span class="property">url</span> = url
                }
        }
    }
}
</code></pre><p>That's it! Now you know how to set a SwiftUI app up to handle deep links, create and test the site association file, and provision your app to accept the links. I hope this helped!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/making-logs-more-useful</guid><title>When Stack Traces Aren't Useful‚Ä¶</title><description>Swift Stack Traces are not very useful in most logs because they're obfuscated. In this article, we'll learn how to determine the call site in a usable way using Swift's #file, #line, &amp; #function</description><link>https://JacobZivanDesign.com/technology/making-logs-more-useful</link><pubDate>Thu, 28 Jul 2022 13:13:00 -0500</pubDate><content:encoded><![CDATA[<h1>When Stack Traces Aren't Useful‚Ä¶</h1><p>One of Swift's more prickly bits is its stack traces. They're obfuscated by default, because of that, they're pretty much unusable without <a href="https://stackoverflow.com/questions/11747802/symbolicating-stack-trace-without-crash">symbolicating</a> them. In interpreted languages like Java, the stack trace is legible out of the gate. To illustrate, here are some stack trace examples:</p><p><strong>Swift Stack Trace‚Äîout of the box</strong></p><pre><code><span class="type">Thread</span> <span class="number">0</span> name:  <span class="type">Dispatch</span> queue: com.<span class="property">apple</span>.<span class="property">main</span>-thread
<span class="type">Thread</span> <span class="number">0</span> <span class="type">Crashed</span>:
<span class="number">0</span>   libswiftCore.<span class="property">dylib</span>                0x00000001bd38da70 0x1bd149000 + <span class="number">2378352
1</span>   libswiftCore.<span class="property">dylib</span>                0x00000001bd38da70 0x1bd149000 + <span class="number">2378352
2</span>   libswiftCore.<span class="property">dylib</span>                0x00000001bd15958c 0x1bd149000 + <span class="number">66956
3</span>   libswiftCore.<span class="property">dylib</span>                0x00000001bd15c814 0x1bd149000 + <span class="number">79892
4</span>   <span class="type">TouchCanvas</span>                       0x00000001022cbfa8 0x1022c0000 + <span class="number">49064
5</span>   <span class="type">TouchCanvas</span>                       0x00000001022c90b0 0x1022c0000 + <span class="number">37040</span>
</code></pre><p><strong>Java</strong></p><pre><code><span class="type">Exception</span> <span class="keyword">in</span> thread <span class="string">"main"</span> java.<span class="property">lang</span>.<span class="type">NullPointerException</span>
    at <span class="type">Printer</span>.<span class="call">printString</span>(<span class="type">Printer</span>.<span class="property">java</span>:<span class="number">13</span>)
    at <span class="type">Printer</span>.<span class="call">print</span>(<span class="type">Printer</span>.<span class="property">java</span>:<span class="number">9</span>)
    at <span class="type">Printer</span>.<span class="call">main</span>(<span class="type">Printer</span>.<span class="property">java</span>:<span class="number">19</span>)
</code></pre><br/><br/><h2>Symbolication</h2><p>There is a way to make the Swift Stack Trace more useful. That process is called <a href="https://developer.apple.com/documentation/xcode/adding-identifiable-symbol-names-to-a-crash-report">"Symbolication"</a>. It maps the address to a more readable format. <code>Ox0000012345</code> becomes something like <code>getElementWithIndex</code></p><p>For example, here is a symbolicated stack trace from an Objective-C crash report:</p><pre><code><span class="type">NSRangeException</span>: *** -[<span class="type">__NSArrayI</span> objectAtIndex:]: index <span class="number">3</span> beyond bounds [<span class="number">0</span> .. <span class="number">2</span>]
<span class="number">0</span> <span class="type">CoreFoundation</span>      __exceptionPreprocess + <span class="number">124
1</span> libobjc.<span class="type">A</span>.<span class="property">dylib</span>     objc_exception_throw + <span class="number">52
2</span> <span class="type">CoreFoundation</span>      -[<span class="type">__NSArrayI</span> objectAtIndex:] + <span class="number">180
3</span> <span class="type">MyApplication</span>       getElementFromArray (<span class="type">MyFile</span>.<span class="property">m</span>:<span class="number">22</span>)
<span class="number">4</span> <span class="type">MyApplication</span>       printAllElements (<span class="type">MyFile</span>.<span class="property">m</span>:<span class="number">27</span>)
</code></pre><p>It is better, but, I still find them cumbersome. The fact that we need to translate the stack trace into something useful while we're reading through logs is, well‚Ä¶ annoying. That takes time and willpower, and when you're dealing with thousands of logs‚Ä¶ it's pretty easy to kill a lot of time and get confused.</p><br/><br/><h2>Swift's <a href="https://docs.swift.org/swift-book/ReferenceManual/Expressions.html">Literal Expressions</a> to the rescue</h2><p>Thankfully, Swift provides a few nifty expressions to make it easier for us to track down what's happening. If you want to know the exact file, line number, and function the offending code originated, we can use these three literals:</p><pre><code><span class="keyword">func</span> logSomething() {
    <span class="call">print</span>(<span class="string">"</span>\(<span class="keyword">#file</span>)<span class="string">,</span> \(<span class="keyword">#line</span>)<span class="string">,</span> \(<span class="keyword">#function</span>)<span class="string">"</span>)
}
</code></pre><p>That would output something like:</p><pre><code><span class="type">User</span>/<span class="type">User</span>-name/pathToProject/<span class="type">PathToFile</span>.<span class="property">swift</span>, <span class="number">22</span>, <span class="call">logSomething</span>()
</code></pre><p>Great!</p><p>With that kind of information, we can make our logs work for us, instead of the other way around.</p><br/><br/><h2>In Practice</h2><p>These can come in handy, however, they can confuse just as easily as a stack trace if you're not careful. For one reason or another, we can use the literals as default arguments in a function and they will identify the location from which the function is called, which is what we want. That is not true if we do the same in an initializer used as a default argument, it identifies the file, line, and function name of the initializer invocation‚Äîwhich is the line where the default argument is supplied. That bit me once or twice already.</p><h3>Literals as Default Arguments in a Function</h3><pre><code><span class="comment">// File A.swift
// lines 1 - 5</span>
<span class="keyword">func</span> logError(file: <span class="type">String</span> = <span class="keyword">#file</span>, line: <span class="type">Int</span> = <span class="keyword">#line</span>, function: <span class="type">String</span> = <span class="keyword">#function</span>, error: <span class="type">Error</span>) {
    <span class="call">print</span>(<span class="string">"file:</span> \(file )<span class="string">, line:</span> \(line)<span class="string">, funtion:</span>\(function)<span class="string">"</span>)
}

<span class="comment">//File B.swift
// line 33</span>
<span class="call">logError</span>(error: <span class="type">MyError</span>()) 
<span class="comment">// this will pass in default arguments from this exact location
// as if we wrote `logError(file: "B.swift", line: 33, function: logError(error:_))</span>
</code></pre><h3>Literals as default values in a Struct</h3><pre><code><span class="comment">// file ErrorDetails.swift 
// Lines 1-15</span>
<span class="keyword">struct</span> ErrorDetails: <span class="type">Codable</span> {
    <span class="keyword">let</span> file: <span class="type">String</span>
    <span class="keyword">let</span> line: <span class="type">Int</span>
    <span class="keyword">let</span> function: <span class="type">String</span>

    <span class="keyword">init</span>(
        file: <span class="type">String</span> = <span class="keyword">#file</span>,
        line: <span class="type">Int</span> = <span class="keyword">#line</span>,
        function: <span class="type">String</span> = <span class="keyword">#function</span>
    ) {
        <span class="keyword">self</span>.<span class="property">file</span> = file
        <span class="keyword">self</span>.<span class="property">line</span> = line
        <span class="keyword">self</span>.<span class="property">funtion</span> = function
    }
}

<span class="comment">// File C.swift
// lines 30-33</span>
<span class="keyword">func</span> logErrorDetails(<span class="keyword">_</span> details: <span class="type">ErrorDetails</span> = .<span class="keyword">init</span>(), error: <span class="type">Error</span>) {
    <span class="call">print</span>(details)
}

<span class="comment">// File D.swift
// line 100</span>
<span class="call">logErrorDetails</span>(error: error) 
<span class="comment">//
// We would expect the log here to print 
//     `file: path/D.swift, line:100, function: someContainingFunctionName`
//
// However, it prints the location of _exactly_ where `.init` is called
//     `file: path/C.swift, line: 32, function: logErrorDetails(_, error)`</span>
</code></pre><p>Notice that? The initializer called in C.swift doesn't care about the place the function was called from. Instead, it reads the location of where exactly <code>.init()</code> was invoked.</p><p>We can skirt around that by passing the initializer as an argument explicitly like:</p><pre><code><span class="call">logErrorDetails</span>(.<span class="keyword">init</span>(), error: error)
</code></pre><p>That's all well and good, but with the way that's written, we only know where we chose to log from, not from where the error was thrown. Let's tackle that next.</p><br/><br/><h2>Error With Details</h2><p>To make errors more useful, I recommend creating an error type that contains details like:</p><pre><code><span class="keyword">enum</span> DetailedError: <span class="type">Error</span> {
    <span class="keyword">case</span> dependencyError(rootCause: <span class="type">Error</span>?, details: <span class="type">ErrorDetails</span>)
    <span class="keyword">case</span> internalError(rootCause: <span class="type">Error</span>?, details: <span class="type">ErrorDetails</span>)
}
</code></pre><p>Then we can throw the error and capture the exact location of the issue.</p><pre><code><span class="keyword">do</span> {
    <span class="keyword">try</span> <span class="type">SomeDependency</span>.<span class="call">logIn</span>()
} <span class="keyword">catch</span> {
    <span class="keyword">throw</span> <span class="type">DetailedError</span>.<span class="call">dependency</span>(rootCause: error, details: .<span class="keyword">init</span>())
}
</code></pre><p>Just like that, we can know exactly where an error was thrown! We know what function it came from, and even an underlying cause if we're wrapping an external error.</p><p>For me, it's made a tremendous difference in tracking down bugs.</p><p>**<em>Of course, this is all dependent on a logger that knows how to extract that information from the error and send it out to your log repository.</em></p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/polymorphic-serialization-in-swift</guid><title>Polymorphic Serialization in Swift</title><description>Learn how to use Codable enum's in Swift to handle Polymorphic Serialization.</description><link>https://JacobZivanDesign.com/technology/polymorphic-serialization-in-swift</link><pubDate>Sat, 20 Nov 2021 13:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Polymorphic Serialization in Swift</h1><p>Before I show you how to use enumerations to handle polymorphic serialization in Swift, I'm going to explain a few things. After defining some terms and giving examples we'll get into it.</p><h2>What is Serialization?</h2><p>Serialization is one of the most common things I have to handle in my role as a software engineer. It is simple usually. The serialization I'm referring to is the mapping of JSON into your model object in whatever language you're using.</p><p>Let's take this JSON for example:</p><pre><code>{
    <span class="string">"item_name"</span> : <span class="string">"potion"</span>
}
</code></pre><p>When we make the request to the server and get that data back from the web, we'd generally like to use a struct that represents an Item like:</p><pre><code><span class="keyword">struct</span> Item {
    <span class="keyword">let</span> name: <span class="type">String</span>
}
</code></pre><p>Serialization does just that. To do it in swift, we use a protocol named <a href="https://developer.apple.com/documentation/swift/codable"><code>Codable</code></a>.</p><br/><h2>Codable</h2><p>This protocol handles the heavy lifting for us. Generally all we need to do is make the structure conform to the protocol. Like so:</p><pre><code><span class="keyword">struct</span> Item: <span class="type">Codable</span> {
    <span class="keyword">let</span> name: <span class="type">String</span>
}
</code></pre><p>Just by adding <code>: Codable</code> to the structure declaration, Swift will be able to <a href="https://developer.apple.com/documentation/swift/encodable/2893603-encode">encode</a> or <a href="https://developer.apple.com/documentation/swift/decodable/2894081-init">decode</a> <em>(AKA serialize)</em> the model. However, the JSON this particular model would expect looks like:</p><pre><code>{
    <span class="string">"name"</span>: <span class="string">"potion"</span>
}
</code></pre><p>Did you notice the difference, <code>"name"</code> instead of <code>"item_name"</code>? Swift automatically takes the name of the variable and encodes that as the JSON key. I'd like to use <code>Item.name</code> as the syntax in my Swift project instead of <code>Item.item_name</code>. To show you how to do that let's take a look at Coding Keys.</p><br/><h2>Coding Keys</h2><p>Coding keys are an enumeration we can use to override Swift's default serialization of the keys. Let's go back to item and add a couple of things:</p><pre><code><span class="keyword">struct</span> Item: <span class="type">Codable</span> {
    <span class="keyword">let</span> name: <span class="type">String</span>
    <span class="keyword">let</span> weight: <span class="type">Decimal</span>
    <span class="keyword">let</span> description: <span class="type">String</span>

    <span class="keyword">enum</span> CodingKeys: <span class="type">String</span>, <span class="type">CodingKey</span> {
        <span class="keyword">case</span> name = <span class="string">"item_name"</span>
        <span class="keyword">case</span> weight, description
    }
}
</code></pre><p>In this example, we overrode the <code>name</code> to have a different coding key, but we left the other 2 alone. This means that we could receive JSON that looks like this:</p><pre><code>{
    <span class="string">"item_name"</span>: <span class="string">"Potion"</span>,
    <span class="string">"weight"</span>: <span class="number">1.22</span>,
    <span class="string">"description"</span>: <span class="string">"A generic health potion."</span>
}
</code></pre><p>Great! Now you know how to serialize JSON into a specific type. It's a great start. However, there are some instances where you'll get a dynamic set of data for a given key in the JSON. And this won't help you there. Instead, we would need to create a way for our application to recognize different kinds of items and have a dynamic model to represent the JSON.</p><br/><h2>Polymorphic Serialization</h2><p>Let's say that our API is responsible for managing the inventory of our players. It sends back an array of items. Those items can be different types: Weapons, Armor, Potions, Misc, etc.,</p><p>Weapons and armor are 2 different items that one could expect to see in many video games. They are dramatically different things, and as such, they aren't represented the same way in the JSON. Let's take a look at the following example.</p><pre><code>{
    <span class="string">"backpack"</span>: [
        {
            <span class="string">"name"</span>: <span class="string">"Leather"</span>,
            <span class="string">"armor_class"</span>: <span class="number">1.2</span>,
            <span class="string">"description"</span>: <span class="string">"Basic Leather Armor"</span>
        },
        {
            <span class="string">"name"</span>: <span class="string">"Short Sword"</span>,
            <span class="string">"ranged"</span>: <span class="keyword">false</span>,
            <span class="string">"description"</span>: <span class="string">"Basic Short Sword"</span>,
            <span class="string">"damage_type"</span>: <span class="string">"Slashing"</span>,
            <span class="string">"damage_modifier"</span>: <span class="number">1.1</span>
        }
    ]
}
</code></pre><p>See the difference? The first <code>Item</code> in the array is a piece of <code>Armor</code>, the second is a <code>Weapon</code>. Since Swift is statically typed, this can be difficult to represent by a single model without making most fields optional. When I was newer to the craft, I would do that. I used to create a single <code>Item</code> model with every possible field represented and most of them would be optional. Something like:</p><pre><code><span class="keyword">struct</span> Item: <span class="type">Codable</span> {
    <span class="keyword">let</span> name: <span class="type">String</span>
    <span class="keyword">let</span> ranged: <span class="type">Bool</span>?
    <span class="keyword">let</span> description: <span class="type">String</span>?
    <span class="keyword">let</span> damageType: <span class="type">String</span>?
    <span class="keyword">let</span> armorClass: <span class="type">Decimal</span>?
    <span class="keyword">let</span> damageModifier: <span class="type">Decimal</span>?
}

<span class="keyword">struct</span> Inventory: <span class="type">Codable</span> {
    <span class="keyword">let</span> backpack: [<span class="type">Item</span>]
}
</code></pre><p>With the <code>Item</code> model shown above, I would have to inspect the structure for specific bits of data to know if it was a weapon, a piece of armor, or a potion. Then I would need to unwrap those fields as I needed to use them. This is a big pain in the rear. Don't do it.</p><blockquote><p>Don't do it.</p></blockquote><p>Polymorphic serialization is the process of making the model statically represent the different JSON objects. To do that in Swift we'll use an enumeration.</p><br/><h3>Enumerations with Associated Values</h3><br/><p>Swift <a href="https://docs.swift.org/swift-book/LanguageGuide/Enumerations.html">Enumerations</a> are quite powerful. One of my favorite features by far is the <a href="https://www.swiftbysundell.com/tips/default-enum-associated-values/">Associated Value</a>. This is somewhat advanced. It allows us to define a set of values <em>(the enum)</em> that are always the same, but then inject other values into the enumeration <em>(the associated value)</em>. It looks like this:</p><pre><code><span class="keyword">enum</span> Result&lt;T&gt; {
    <span class="keyword">case</span> success(<span class="type">T</span>)
    <span class="keyword">case</span> failure(<span class="type">Error</span>)
}
</code></pre><p>If you're used to Swift, you've seen this enumeration before. To use it we have to inject values into <em>(and extract the value from)</em> the enumeration. Here are some examples on how that works:</p><pre><code><span class="keyword">func</span> doSomething(with thing: <span class="type">Int</span>?) -&gt; <span class="type">Result</span>&lt;<span class="type">Int</span>&gt; {
    <span class="keyword">guard let</span> anotherThing = thing <span class="keyword">else</span> {
        <span class="keyword">return</span> .<span class="call">failure</span>(<span class="type">NilIntError</span>())
    }
    <span class="keyword">return</span> .<span class="call">success</span>(anotherThing)
}

<span class="keyword">func</span> handle(optional: <span class="type">Int</span>?) {
    <span class="keyword">switch</span> doSomething(with: optional) {
    <span class="keyword">case</span> .<span class="dotAccess">success</span>(<span class="keyword">let</span> value):
        <span class="call">print</span>(value)
    <span class="keyword">case</span> .<span class="dotAccess">error</span>(<span class="keyword">let</span> error):
        <span class="call">print</span>(error)
    }
}
</code></pre><p>Notice how we can only create the 2 values of the enumeration <code>success</code> and <code>failure</code> but we can put so much more information inside of them!?</p><p>We're going to define our own enumeration with associated values in a minute. Before we get there though, let's create 2 different item types that are represented in the JSON response from the Inventory API.</p><br/><h3>Weapons and Armor</h3><br/><p>The <code>Item</code> we made before that was used in the <code>Inventory</code> struct wouldn't handle the backpack JSON above very well. Instead <code>Item</code> will need to be an enum with the kinds of items that could be represented inside.</p><p>Let's create the models:</p><pre><code><span class="keyword">struct</span> Armor: <span class="type">Codable</span> {
    <span class="keyword">let</span> name: <span class="type">String</span>
    <span class="keyword">let</span> armorClass: <span class="type">Decimal</span>
    <span class="keyword">let</span> description: <span class="type">String</span>

    <span class="keyword">enum</span> CodingKeys: <span class="type">String</span>, <span class="type">CodingKey</span> {
        <span class="keyword">case</span> name, description
        <span class="keyword">case</span> armorClass = <span class="string">"armor_class"</span>
    }
}

<span class="keyword">struct</span> Weapon: <span class="type">Codable</span> {
    <span class="keyword">let</span> name: <span class="type">String</span>
    <span class="keyword">let</span> ranged: <span class="type">Bool</span>
    <span class="keyword">let</span> description: <span class="type">String</span>
    <span class="keyword">let</span> damageType: <span class="type">String</span>
    <span class="keyword">let</span> damageModifier: <span class="type">Decimal</span>

    <span class="keyword">enum</span> CodingKeys: <span class="type">String</span>, <span class="type">CodingKey</span> {
        <span class="keyword">case</span> name, ranged, description
        <span class="keyword">case</span> damageType = <span class="string">"damage_type"</span>
        <span class="keyword">case</span> damageModifier = <span class="string">"damage_modifier"</span>
    }
}

<span class="keyword">enum</span> Item: <span class="type">Codable</span> {
    <span class="keyword">case</span> weapon(<span class="type">Weapon</span>)
    <span class="keyword">case</span> armor(<span class="type">Armor</span>)
}
</code></pre><p>This is looking better. However, if you try to serialize this, you'll get failures. The system doesn't know which enumeration value to select because <code>.weapon</code> and <code>.armor</code> aren't raw types like String or Int at the top level, the objects being serialized are nested within the enumeration. We need to provide a little more detail for Swift to encode or decode into this enum. To do so, we'll add the <code>Encodable</code> function and <code>Decodable</code> initializer.</p><pre><code><span class="keyword">enum</span> Item: <span class="type">Codable</span> {
    <span class="keyword">case</span> weapon(<span class="type">Weapon</span>)
    <span class="keyword">case</span> armor(<span class="type">Armor</span>)

    <span class="keyword">init</span> (from decoder: <span class="type">Decoder</span>) <span class="keyword">throws</span> {
        <span class="keyword">if let</span> weapon = <span class="keyword">try</span>? <span class="type">Weapon</span>(from: decoder) {
            <span class="keyword">self</span> = .<span class="call">weapon</span>(weapon)
        } <span class="keyword">else if let</span> armor = <span class="keyword">try</span>? <span class="type">Armor</span>(from: decoder) {
            <span class="keyword">self</span> = .<span class="call">armor</span>(armor)
        } <span class="keyword">else</span> {
            <span class="keyword">self</span>.<span class="keyword">init</span>(from: decoder) <span class="comment">// this will fail!</span>
        }
    }

    <span class="keyword">func</span> encode(to encoder: <span class="type">Encoder</span>) <span class="keyword">throws</span> {
        <span class="keyword">switch self</span> {
        <span class="keyword">case</span> .<span class="dotAccess">armor</span>(<span class="keyword">let</span> armor):
            <span class="keyword">try</span> armor.<span class="call">encode</span>(to: encoder)
        <span class="keyword">case</span> .<span class="dotAccess">weapon</span>(<span class="keyword">let</span> weapon):
            <span class="keyword">try</span> weapon.<span class="call">encode</span>(to: encoder)
        }
    }
}
</code></pre><br/><h1>üî•‚òùÔ∏è</h1><p>That little bit of code handles quite a lot! In the initializer we're attempting to create the types that we care about, in the <code>else</code> block we're forcing a failure. You could choose to swallow the mismatched item instead <em>(perhaps log it)</em> until you add that model too. That's really all it takes to create a polymorphic serializer in Swift!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/dependency-injection-in-swift-ui</guid><title>Dependency Injection</title><description>SwiftUI comes with its own Dependency Injection framework. Learn what dependency injection is, and how to utilize the Setter Injection provided by swift.</description><link>https://JacobZivanDesign.com/technology/dependency-injection-in-swift-ui</link><pubDate>Thu, 28 Oct 2021 06:13:00 -0500</pubDate><content:encoded><![CDATA[<h1>Dependency Injection</h1><p>For a long time, I had no idea what dependency injection was or why it mattered. When I realized I already knew one flavor of it, <a href="https://en.wikipedia.org/wiki/Dependency_injection#Constructor_injection">Constructor Injection</a>, it suddenly became obvious to me. In this article, I hope to provide a clear explanation of Dependency Injection and how you can use it in Swift.</p><h2>So what is Dependency Injection?</h2><p>Dependency injection is the concept of providing things to an object that it relies on, instead of letting the object create the things it needs, itself. Often this is done in a constructor.</p><h3>No Injection</h3><br/><p>To illustrate, here's a quick example of an object <strong><em>not</em></strong> using dependency injection:</p><pre><code><span class="keyword">struct</span> SomeClient {
    <span class="keyword">private let</span> someService = <span class="type">SomeService</span>()

    <span class="keyword">func</span> doSomeWork() {
        someService.<span class="call">doSomething</span>()
    }
}
</code></pre><br/><p>Notice how <code>SomeClient</code> needs <em>(or is "dependent" on)</em> <code>SomeService</code> to do its job? <code>SomeService</code> is a dependency of <code>SomeClient</code>. Dependency injection takes the responsibility of creating a <code>SomeService</code> out of <code>SomeClient</code>. Instead, a dependency is first created and then given to the client.</p><h3>Constructor Injection</h3><br/><p>It's super simple, you probably already know how to do it, even if you're not familiar with the terms.</p><p>This is what Constructor Injection looks like:</p><pre><code><span class="keyword">struct</span> SomeClient {
    <span class="keyword">private let</span> someService: <span class="type">SomeService</span>

    <span class="comment">// notice how the dependency is required in the constructor below?</span>
    <span class="keyword">init</span>(<span class="keyword">_</span> service: <span class="type">SomeService</span>) {
        <span class="keyword">self</span>.<span class="property">someService</span> = service
    }

    <span class="keyword">func</span> doSomeWork() {
        someService.<span class="call">doSomething</span>()
    }
}
</code></pre><br/><p>It's a subtle difference, but it's profound. By removing the creation of the service from the client we achieve a couple of important things. First, it becomes easier to make the client more reusable. We could pass it different versions of <code>SomeService</code>, and the client could do different kinds of work! And because we can pass in different versions of the dependency, <strong>testing that structure becomes far easier</strong>.</p><blockquote><p>It's a subtle difference, but it's profound.</p></blockquote><h3>Setter Injection</h3><br/><p>If you know even a little about Object Oriented programming, you already know how to construct an object and pass in the dependencies. That is super intuitive and commonplace. Then there is <a href="https://en.wikipedia.org/wiki/Dependency_injection#Setter_injection">Setter Injection</a> which you've probably done before too. Here's a quick example from my UIKit days:</p><pre><code><span class="comment">// This example also demonstrates Interface Injection</span> 
<span class="keyword">class</span> SomeViewController: <span class="type">UIViewController</span>, <span class="type">UITableViewDelegate</span> {
    <span class="keyword">let</span> tableView = <span class="type">UITableView</span>()

    <span class="keyword">override func</span> viewDidLoad() {
        <span class="keyword">super</span>.<span class="call">viewDidLoad</span>()
        <span class="keyword">self</span>.<span class="property">tableView</span>.<span class="property">delegate</span> = <span class="keyword">self</span> <span class="comment">// Setting the dependency</span>
    }
}
</code></pre><br/><p>The <code>UITableView</code> relies on a delegate to handle specific tasks and it exposes a setter for us to inject that dependency after the table view was initialized. Again, this was another common sense one for me. It was what dependency injection evolved into that was confusing to me at first. Let's cover that next.</p><h2>Auto-Wired Dependency Injection</h2><p>Eventually, the people using Dependency Injection created a new pattern to inject dependencies. One that is similar to the injection patterns we've just discussed, only it happens automagically. The concept is that an application creates a manifest of dependencies inside of a dependency injection framework. Then an object in that applications says it needs one such dependency and the framework provides it.</p><p>It would look something like this:</p><pre><code><span class="comment">// pseudo code</span>

<span class="keyword">let</span> provider = <span class="type">DependencyProvider</span>([
    <span class="type">SomeClient</span>(),
    <span class="type">SomeService</span>()
])

<span class="keyword">let</span> controller = <span class="type">Controller</span>(client: provider.<span class="call">resolveDependency</span>())

<span class="comment">// or</span>

<span class="keyword">struct</span> MyView {
    <span class="keyword">let</span> service: <span class="type">SomeService</span> = provider.<span class="call">resolveDependency</span>()
}
</code></pre><br/><p>This auto wiring confused me at first. It's really not much different than what we talked about before, the only true difference is that the dependency provider knows which dependency to provide based on the interface required at the usage site. There are <a href="https://github.com/Liftric/DIKit">third party frameworks</a> that do this generically for many languages. However, Apple recently released a fully native way to do it.</p><h2>Swift's Environment Variables</h2><p>If you've done much with SwiftUI, you've probably seen an environment variable before. The one I use the most is probably the <code>colorScheme</code>:</p><pre><code><span class="keyword">struct</span> SomeView: <span class="type">View</span> {

    <span class="keyword">@Environment</span>(\.<span class="property">colorScheme</span>) <span class="keyword">var</span> colorScheme : <span class="type">ColorScheme</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> view {
        <span class="type">Text</span>(<span class="string">""</span>)
            .<span class="call">foregroundColor</span>(colorScheme == .<span class="dotAccess">dark</span> ? .<span class="dotAccess">white</span> : .<span class="dotAccess">black</span>)
    }
}
</code></pre><br/><p>The line <code>@Environment(\.colorScheme) var colorScheme: ColorScheme</code> is one way to do the autowired dependency injection. Let's break it down.</p><p>On the left we use an annotation <em>(or <a href="https://www.swiftbysundell.com/articles/property-wrappers-in-swift/">property wrapper</a>)</em> <code>@Environment</code> This particular property wrapper takes a <a href="https://www.swiftbysundell.com/articles/the-power-of-key-paths-in-swift/">key path</a>. This particular key path was <code>\.colorScheme</code>. That tells Swift's Environment framework that we're looking for an object with that name, please provide it. The next section <code>var colorScheme</code> is the name assignment, which could be any name at all. The last section <code>: ColorScheme</code> is the type assignment, which is actually erroneous. We could simply write: <code>@Environment(\.colorScheme) var colorScheme</code>.</p><p>Now to override the default and inject our own value, we can do that like so:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">SomeView</span>()
            .<span class="call">environment</span>(\.<span class="property">colorScheme</span>, .<span class="dotAccess">dark</span>) <span class="comment">// injecting Dark to Some View</span>
    }

}
</code></pre><br/><h3>Creating our own Environment Variable</h3><p>We can create our own environment variables that we can place into Swift's Environment. To start, let's create a class to hold an access token.</p><pre><code><span class="keyword">class</span> TokenStore: <span class="type">ObservableObject</span> {
    <span class="keyword">var</span> accessToken: <span class="type">String</span>? = <span class="keyword">nil</span>
}
</code></pre><br/><p>Then, to access it from the <code>@Environment</code> property wrapper, it needs to have an <a href="https://developer.apple.com/documentation/swiftui/environmentkey">Environment Key</a> associated with it.</p><pre><code><span class="keyword">struct</span> TokenStoreKey: <span class="type">EnvironmentKey</span> {
    <span class="keyword">static let</span> defaultValue = <span class="type">TokenStore</span>()
}
</code></pre><br/><p>This key is used to make the <code>key path</code> on the environment. We can do that by extending Swift's <code>EnvironmentValues</code>:</p><pre><code><span class="keyword">extension</span> <span class="type">EnvironmentValues</span> {
    <span class="keyword">var</span> tokenStore: <span class="type">TokenStore</span> {
        <span class="keyword">get</span> { <span class="keyword">self</span>[<span class="type">TokenStoreKey</span>.<span class="keyword">self</span>] }
        <span class="keyword">set</span> { <span class="keyword">self</span>[<span class="type">TokenStoreKey</span>.<span class="keyword">self</span>] = newValue }
    }
}
</code></pre><br/><p>Now that we've done all that, we can use the token store like:</p><pre><code><span class="keyword">class</span> SomeHttpClient {
    <span class="keyword">@Environment</span>(\.<span class="property">tokenStore</span>) <span class="keyword">var</span> store

    <span class="keyword">func</span> setToken(<span class="keyword">_</span> token: <span class="type">String</span>) {
        store.<span class="property">accessToken</span> = token
    }

    <span class="keyword">func</span> getToken() -&gt; <span class="type">String</span>? {
        store.<span class="property">accessToken</span>
    }
}
</code></pre><br/><h1>üî•‚òùÔ∏è</h1><p>That's one way to use Swift's native Dependency Injection tooling. There are <a href="https://developer.apple.com/documentation/swiftui/environmentobject">other options</a> as well. I hope this has been helpful!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/custom-fonts-from-swift-package</guid><title>Packaging your Custom Fonts in Swift Packages</title><description>A Tutorial for adding Custom Fonts to a Swift Package that can be consumed by another application. Allowing you to easily share fonts between your iOS, tvOS, MacOS, and WatchOS apps!</description><link>https://JacobZivanDesign.com/technology/custom-fonts-from-swift-package</link><pubDate>Thu, 30 Sep 2021 06:13:00 -0500</pubDate><content:encoded><![CDATA[<h1>Packaging your Custom Fonts in Swift Packages</h1><p>In a <a href="../custom-dynamic-fonts-in-swift-ui">previous article</a> we covered how to add custom fonts that respond to the user's preferred font sizes in Swift UI. In this article, we'll take that code and package it up inside of a Swift Package so we can share it with our Widgets, or other OS applications. If you haven't done so already, go ahead and read <a href="../custom-dynamic-fonts-in-swift-ui">that article</a>. We're going to use that code in this tutorial.</p><br/><h2>Creating the Package</h2><p>First things first. We need to make our <a href="https://swift.org/package-manager/">Swift Package</a>. Open your terminal and execute the following commands:</p><pre><code>mkdir <span class="type">JBMono</span>
cd <span class="type">JBMono</span>
swift package <span class="keyword">init</span> --name <span class="type">JBMono</span>
xed .
</code></pre><p>Let me take you through that line by line.</p><ol><li><code>mkdir</code> will create a file directory or "folder" on your mac.</li><li><code>cd</code> will move your terminal into the desired directory.</li><li>The third line does the most work. It creates several files and folders that output a Swift Package with the desired name.</li><li>The final command <code>xed .</code> tells Xcode to open the <code>Package.swift</code> created by the previous command.</li></ol><br/><h2>Preparing the Package</h2><p>Now that you've got a package, we need to move all of the code we wrote in the <a href="../custom-dynamic-fonts-in-swift-ui">previous article</a> into this package. I put all the font files in a directory named "Fonts" inside of "Sources/JBMono".</p><p>Copying the code and font files isn't all we need to do. Since this becomes a library an application will consume, the code inside of it is unusable unless we explicitly make the structures, extensions, and functions <code>public</code>. Go ahead and do that now.</p><p>Afterwards, we'll focus on the <code>Package.swift</code> file. You should see this <em>(plus some comments)</em>:</p><pre><code>

<span class="keyword">let</span> package = <span class="type">Package</span>(
    name: <span class="string">"JBMono"</span>,
    products: [
        .<span class="call">library</span>(
            name: <span class="string">"JBMono"</span>,
            targets: [<span class="string">"JBMono"</span>]),
    ],
    dependencies: [],
    targets: [
        .<span class="call">target</span>(
            name: <span class="string">"JBMono"</span>,
            dependencies: []),
        .<span class="call">testTarget</span>(
            name: <span class="string">"JBMonoTests"</span>,
            dependencies: [<span class="string">"JBMono"</span>]),
    ]
)
</code></pre><br/><p>That's a good start. First, lets specify what platforms we're targeting. Add the following line between <code>name: "JBMono",</code> and <code>products</code>:</p><pre><code>platforms: [.<span class="call">iOS</span>(.<span class="dotAccess">v15</span>), .<span class="dotAccess">macOS</span>(.<span class="dotAccess">v12</span>), .<span class="dotAccess">watchOS</span>(.<span class="dotAccess">v8</span>), .<span class="dotAccess">tvOS</span>(.<span class="dotAccess">v15</span>)],
</code></pre><br/><p>Then we need to include the Font files as resources for the target. Without this step, the font's wont be useable by this package or any of its consumers.</p><p>Find the <code>.target</code> and add a comma and a new line after the dependency array closes. Then add the following:</p><pre><code>resources: [.<span class="call">process</span>(<span class="string">"Fonts"</span>)]
</code></pre><br/><p>This tells Swift to package up all the files in the Fonts directory and make them available to the library.</p><blockquote><p>You'll get build errors if your file structure isn't right!</p></blockquote><p>You'll get build errors if your file structure isn't right. So make sure your file structure looks like this:</p><pre><code><span class="type">Package</span>.<span class="property">swift</span>
<span class="type">Sources</span>/
    <span class="type">JBMono</span>/
        <span class="type">Fonts</span>/
            fontfile.<span class="property">ttf</span>
            fontfile.<span class="property">ttf</span>
            fontfile.<span class="property">ttf</span>
            fontfile.<span class="property">ttf</span>
</code></pre><br/><h2>Registering the Fonts</h2><p>In the <a href="../custom-dynamic-fonts-in-swift-ui">previous article</a>, we registered the fonts by including them in the applications' property list. With a Swift Package it works a little differently. Open up the <code>JBMono.swift</code> file that was generated for you and we'll add the code we need there.</p><br/><p>First, replace the contents with this empty public version:</p><pre><code><span class="keyword">import</span> Foundation
<span class="keyword">import</span> SwiftUI

<span class="keyword">public struct</span> JBMono { }
</code></pre><br/><p>Then we need to add a function that will find the font file and tell the OS to register the font for use. Add a function to the struct:</p><pre><code><span class="keyword">fileprivate static func</span> registerFont(bundle: <span class="type">Bundle</span>, fontName: <span class="type">String</span>, fontExtension: <span class="type">String</span>) { }
</code></pre><br/><p>We want this function to be private to the module, it needs the bundle, the name of the font file, and the file extension.</p><p>The first thing the function needs to do is try and locate a font file that matches the name and extension provided. To do that, we call a function off of bundle like so:</p><pre><code>bundle.<span class="call">url</span>(forResource: fontName, withExtension: fontExtension)
</code></pre><br/><p>If that succeeds, we want to convert the found font URL to a <a href="https://developer.apple.com/documentation/coregraphics/cgdataprovider">Core Graphics Data Provider</a>, and finally we convert the data provider into a font. Inside of your <code>registerFont</code> function add the following lines:</p><pre><code><span class="keyword">guard let</span> fontURL = bundle.<span class="call">url</span>(forResource: fontName, withExtension: fontExtension),
    <span class="keyword">let</span> fontDataProvider = <span class="type">CGDataProvider</span>(url: fontURL <span class="keyword">as</span> <span class="type">CFURL</span>),
    <span class="keyword">let</span> font = <span class="type">CGFont</span>(fontDataProvider) <span class="keyword">else</span> {
        <span class="call">fatalError</span>(<span class="string">"Couldn't create font from filename:</span> \(fontName) <span class="string">with extension</span> \(fontExtension)<span class="string">"</span>)
}
</code></pre><br/><p>But that's not it, after we've created the font, we need to actually register it with the Core Graphics Font Manager. To do so, we actually need to pass a reference to an unmanaged error. Add the following lines to the function after the guard statement closes:</p><pre><code><span class="keyword">var</span> error: <span class="type">Unmanaged</span>&lt;<span class="type">CFError</span>&gt;?

<span class="type">CTFontManagerRegisterGraphicsFont</span>(font, &amp;error)
</code></pre><br/><p>Alright! Now we have a function that will register a single font. Above this function add a new one to handle the registration of all the JetBrains Mono fonts.</p><pre><code><span class="keyword">public static func</span> registerFonts() {
    <span class="type">JetBrainsMono</span>.<span class="property">allCases</span>.<span class="call">forEach</span> {
        <span class="call">registerFont</span>(bundle: .<span class="dotAccess">module</span>, fontName: $0.<span class="property">rawValue</span>, fontExtension: <span class="string">"ttf"</span>)
    }
}
</code></pre><br/><p>The bundle we pass in here is dynamically generated by Swift because of the <code>.process("Fonts")</code> build command we added to the target. If you get red errors, you may want to check your file structure like I mentioned above. If you're still struggling, check out <a href="https://stackoverflow.com/a/66630000/9333764">this answer on Stack Overflow</a>.</p><br/><h2>Using the Fonts in an Application</h2><p>Now that you've done all the hard work, we just need to consume the package. After adding JBMono as a dependency to your project, you'll need to open the App.swift file <em>wherever <code>@main</code> is located</em>. For this example project it's <code>CustomFontSwiftUIExampleApp.swift</code>. Up top, you'll import JBMono. Then you'll add an initializer to the struct and call our register fonts function like so:</p><pre><code><span class="keyword">import</span> SwiftUI
<span class="keyword">import</span> JBMono

<span class="keyword">@main
struct</span> CustomFontSwiftUIExampleApp: <span class="type">App</span> {
    
    <span class="keyword">init</span>() {
        <span class="type">JBMono</span>.<span class="call">registerFonts</span>()
    }
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">Scene</span> {
        <span class="type">WindowGroup</span> {
            <span class="type">ContentView</span>()
        }
    }
}
</code></pre><h1>üî•‚òùÔ∏è</h1><p>That's it! Using the custom fonts is no different than what we did in the <a href="../custom-dynamic-fonts-in-swift-ui">previous article</a>! You'll just need to remember to import the package first! I've uploaded the example code to <a href="https://github.com/JZDesign/CustomFontSwiftUIExample">Github</a> for reference.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/presenter-patterns</guid><title>The Presenter Pattern</title><description>Clean up your views with the Presenter pattern in Swift UI. Some people call it "BetterProgramming" when the view contains a lot of `@State` variables and functions. It's really not. Let's take a look on how to write a presenter with Swift 5.5</description><link>https://JacobZivanDesign.com/technology/presenter-patterns</link><pubDate>Wed, 11 Aug 2021 08:13:00 -0500</pubDate><content:encoded><![CDATA[<h1>The Presenter Pattern</h1><p>Often, when I read articles on how to do something in SwiftUI, I see a lot of bad patterns touted as "Better Programming" which they're not. <em>My friends and I call them <a href="https://refactoring.guru/refactoring/smells">Code smells</a> because... well, they stink.</em> One of the most prevalent code smells I encounter is a massive view file <em>(what refactoring.guru calls "bloaters")</em>. You know the ones I'm talking about. The views that have a lot of application logic in them, so much so, that it becomes hard to read or figure out where the view begins and the application logic ends.</p><p>It may look something like this:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">@State var</span> shouldPresentHomeScreen = <span class="keyword">false
    @State var</span> isLoading = <span class="keyword">false
    @State var</span> username = <span class="string">""</span>
    <span class="keyword">@State var</span> password = <span class="string">""</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="keyword">if</span> isLoading {
                <span class="type">ProgressView</span>()
            } <span class="keyword">else</span> {
                <span class="type">TextField</span>(<span class="string">"username"</span>, text: <span class="property">$username</span>)
                <span class="type">TextField</span>(<span class="string">"password"</span>, text: <span class="property">$password</span>)
                <span class="type">Spacer</span>()
                <span class="type">Button</span>(<span class="string">"Login"</span>) {
                    isLoading = <span class="keyword">true</span>
                    <span class="type">Task</span> {
                        <span class="keyword">defer</span> { <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">async</span> { <span class="keyword">self</span>.<span class="property">isLoading</span> = <span class="keyword">false</span> } }
                        <span class="keyword">let</span> result = <span class="keyword">try</span>? <span class="keyword">await</span> <span class="type">MyAuthenticationHandler</span>.<span class="call">login</span>(username, password)
                        <span class="keyword">if</span> result?.<span class="property">isLoggedIn</span> == <span class="keyword">true</span> {
                            <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">async</span> {
                                <span class="keyword">self</span>.<span class="property">shouldPresentHomeScreen</span> = <span class="keyword">true</span>
                            }
                        }
                    }
                }
            }
        }
        .<span class="call">padding</span>()
        .<span class="call">sheet</span>(isPresented: <span class="property">$presenter</span>.<span class="property">shouldPresentHomeScreen</span>) {
            <span class="type">Text</span>(<span class="string">"You're in!"</span>)
        }
    }
}
</code></pre><p>This is not an extreme example, but even this is a lot to look at. There are several concepts represented here. I've found that the cost of context switching between these concepts can make reading the View code challenging. We can abstract much of this into a Presenter to reduce the conceptual load and make this a lot easier to reason about.</p><br/><h2>What is a Presenter?</h2><p>A Presenter is something that does the heavy lifting for a View, like network requests and data storage/manipulation. Afterwards, it <em>presents</em> ready to process data to the view. In SwiftUI specifically, the view will <a href="https://developer.apple.com/documentation/swiftui/state-and-data-flow">observe</a> the view state from the presenter. This pattern better adheres to the <a href="https://en.wikipedia.org/wiki/Single-responsibility_principle">Single Responsibility Principle</a> and it's cleaner to test.</p><br/><h2>Creating a Presenter</h2><p>Create a new class called <code>SignInPresenter</code> that conforms to <code>ObservableObject</code>. This presenter is going to own the <code>isLoading</code> variable and it's also going to own an <code>isFinished</code> variable which the view will use.</p><pre><code><span class="keyword">class</span> SignInPresenter: <span class="type">ObservableObject</span> {
    <span class="keyword">@Published var</span> isLoading = <span class="keyword">false
    @Published var</span> isFinished = <span class="keyword">false

    func</span> login(<span class="keyword">_</span> username: <span class="type">String</span>, <span class="keyword">_</span> password: <span class="type">String</span>) {}
}
</code></pre><p>Great! Now we have the rough outline of the presenter, but, it needs to actually do the work. Let's cut the logic out of the button action from the <code>ContentView</code> and paste it here <em>changing the line inside of the second dispatch queue</em>.</p><pre><code><span class="keyword">func</span> login(<span class="keyword">_</span> username: <span class="type">String</span>, <span class="keyword">_</span> password: <span class="type">String</span>) {
    isLoading = <span class="keyword">true</span>
    <span class="type">Task</span> {
        <span class="keyword">defer</span> { <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">async</span> { <span class="keyword">self</span>.<span class="property">isLoading</span> = <span class="keyword">false</span> } }
        <span class="keyword">let</span> result = <span class="keyword">try</span>? <span class="keyword">await</span> <span class="type">MyAuthenticationHandler</span>.<span class="call">login</span>(username, password)
        <span class="keyword">if</span> result?.<span class="property">isLoggedIn</span> == <span class="keyword">true</span> {
            <span class="type">DispatchQueue</span>.<span class="property">main</span>.<span class="call">async</span> {
                <span class="keyword">self</span>.<span class="property">isFinished</span> = <span class="keyword">true</span>
            }
        }
    }
}
</code></pre><p>Next, we can remove all of the noise from the view and observe this object like:</p><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">@ObservedObject var</span> presenter = <span class="type">SignInPresenter</span>()
    <span class="keyword">@State var</span> username = <span class="string">""</span>
    <span class="keyword">@State var</span> password = <span class="string">""</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="keyword">if</span> presenter.<span class="property">isLoading</span> {
                <span class="type">ProgressView</span>()
            } <span class="keyword">else</span> {
                <span class="type">TextField</span>(<span class="string">"username"</span>, text: <span class="property">$username</span>)
                <span class="type">TextField</span>(<span class="string">"password"</span>, text: <span class="property">$password</span>)
                <span class="type">Spacer</span>()
                <span class="type">Button</span>(<span class="string">"Login"</span>) {
                    presenter.<span class="call">login</span>(username, password)
                }
            }
        }
        .<span class="call">padding</span>()
        .<span class="call">sheet</span>(isPresented: <span class="property">$presenter</span>.<span class="property">isFinished</span>) {
            <span class="type">Text</span>(<span class="string">"You're in!"</span>)
        }
    }
}
</code></pre><br/><h2>üî•‚òùÔ∏è</h2><p>That is much easer to read through! Presenters are commonly used to handle user interactions that modify the view state, like performing complex tasks that manipulate the view data. This example was very simplistic. Where in your code bases could you use a presenter to simplify your view logic?</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/dark_mode_swift_ui</guid><title>Handling Dark Mode Elegantly in SwiftUI</title><description>Sharing dark mode capable colors in SwiftUI using @Environment(\.colorScheme), protocols, and extensions. Forget UITraitCollection.userInterfaceStyle. Learn how to create shareable, responsive colors using computed properties in SwiftUI.</description><link>https://JacobZivanDesign.com/technology/dark_mode_swift_ui</link><pubDate>Sun, 7 Mar 2021 08:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Handling Dark Mode Elegantly in SwiftUI</h1><p>In SwiftUI, handling dark mode was made to be easy. The guys over at Apple thought things through and included the user's preferred color scheme as an <a href="https://developer.apple.com/documentation/swiftui/environmentvalues">environment value</a>:</p><p><strong><code>@Environment(\.colorScheme)</code></strong></p><p>It's used like so:</p><br/><pre><code><span class="keyword">struct</span> DarkModeView: <span class="type">View</span> {
    <span class="keyword">@Environment</span>(\.<span class="property">colorScheme</span>) <span class="keyword">var</span> colorScheme: <span class="type">ColorScheme</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Text</span>(<span class="string">"Hi"</span>)
            .<span class="call">foregroundColor</span>(colorScheme == .<span class="dotAccess">dark</span> ? .<span class="dotAccess">white</span> : .<span class="dotAccess">black</span>)
    }
}
</code></pre><br/><p>In the example above, we simply apply the <a href="https://www.hackingwithswift.com/sixty/3/7/the-ternary-operator">ternary operator</a> where we assign the color value. If it's <code>.dark</code> we return <code>.white</code>, if not we return <code>.black</code>. Usually, we need to handle more than one color in a view, so let's do it a few more times.</p><br/><pre><code><span class="keyword">struct</span> DarkModeView: <span class="type">View</span> {
    <span class="keyword">@Environment</span>(\.<span class="property">colorScheme</span>) <span class="keyword">var</span> colorScheme: <span class="type">ColorScheme</span>

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">Text</span>(<span class="string">"Hi dude"</span>)
                .<span class="call">foregroundColor</span>(colorScheme == .<span class="dotAccess">dark</span> ? .<span class="dotAccess">white</span> : .<span class="dotAccess">black</span>)

            <span class="type">Button</span>(<span class="string">"Dude, this is neat"</span>) { <span class="call">print</span>(<span class="string">"neat"</span>) }
                .<span class="call">foregroundColor</span>(colorScheme == .<span class="dotAccess">dark</span> ? .<span class="dotAccess">white</span> : .<span class="dotAccess">black</span>)

            <span class="type">Text</span>(<span class="string">"Totally neat."</span>)
                .<span class="call">foregroundColor</span>(colorScheme == .<span class="dotAccess">dark</span> ? .<span class="dotAccess">white</span> : .<span class="dotAccess">black</span>)

        }.<span class="call">background</span>(colorScheme == .<span class="dotAccess">dark</span> ? <span class="type">Color</span>.<span class="property">black</span> : <span class="type">Color</span>.<span class="property">white</span>)
    }
}
</code></pre><br/><p>That can get old pretty fast. Not only is it a lot to write, but the duplication leaves room for human error. If we chose to change the colors we'd need to change code in many locations. If done properly, we could change just one line of code. Instead of duplicating the color computation all over the place, let's use a computed property to handle that logic in one spot.</p><br/><pre><code><span class="keyword">struct</span> DarkModeView: <span class="type">View</span> {
    <span class="keyword">@Environment</span>(\.<span class="property">colorScheme</span>) <span class="keyword">var</span> colorScheme: <span class="type">ColorScheme</span>

    <span class="keyword">var</span> fontColor: <span class="type">Color</span> {
        colorScheme == .<span class="dotAccess">dark</span> ? .<span class="dotAccess">white</span> : .<span class="dotAccess">black</span>
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">Text</span>(<span class="string">"Hi"</span>)
                .<span class="call">foregroundColor</span>(fontColor)

            <span class="type">Button</span>(<span class="string">"Dude, this is neat"</span>) { <span class="call">print</span>(<span class="string">"neat"</span>) }
                .<span class="call">foregroundColor</span>(fontColor)

            <span class="type">Text</span>(<span class="string">"Totally neat."</span>)
                .<span class="call">foregroundColor</span>(fontColor)
        }
    }
}
</code></pre><br/><p>Nice! That works pretty well. Unfortunately, that font color declaration is only included in this view. To solve that and share dark mode friendly colors, we'll make a protocol that handles that.</p><br/><pre><code><span class="keyword">protocol</span> Themeable {
    <span class="keyword">var</span> colorScheme: <span class="type">ColorScheme</span> { <span class="keyword">get</span> }
}
</code></pre><br/><p>This defines an interface of a <code>Themeable</code> object, but it does nothing to share the colors. In Swift, we are unable to define anything but the interface in a protocol's declaration, but we <strong>can</strong> extend protocols to contain functions, static variables, and computed properties.</p><br/><pre><code><span class="keyword">extension</span> <span class="type">Themeable</span> {
    <span class="keyword">var</span> fontColor: <span class="type">Color</span> {
        colorScheme == .<span class="dotAccess">dark</span> ? .<span class="dotAccess">white</span> : .<span class="dotAccess">black</span>
    }
}
</code></pre><br/><p>With that in place, we can modify the <code>DarkModeView</code> that we created earlier. We can also use the new protocol to <em>share</em> <code>fontColor</code> in other views! Check it out:</p><br/><pre><code><span class="keyword">struct</span> DarkModeView: <span class="type">View</span>, <span class="type">Themeable</span> {
    <span class="keyword">@Environment</span>(\.<span class="property">colorScheme</span>) <span class="keyword">var</span> colorScheme: <span class="type">ColorScheme</span>
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">VStack</span> {
            <span class="type">Text</span>(<span class="string">"Hi"</span>)
                .<span class="call">foregroundColor</span>(fontColor)
            
            <span class="type">Button</span>(<span class="string">"Dude, this is neat"</span>) { <span class="call">print</span>(<span class="string">"neat"</span>) }
                .<span class="call">foregroundColor</span>(fontColor)
            
            <span class="type">Text</span>(<span class="string">"Totally neat."</span>)
                .<span class="call">foregroundColor</span>(fontColor)
        }
    }
}

<span class="keyword">struct</span> AnotherDarkModeView: <span class="type">View</span>, <span class="type">Themeable</span> {
    <span class="keyword">@Environment</span>(\.<span class="property">colorScheme</span>) <span class="keyword">var</span> colorScheme: <span class="type">ColorScheme</span>
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Text</span>(<span class="string">"Pretty Cool!! Right?!"</span>)
            .<span class="call">foregroundColor</span>(fontColor)
    }
}

</code></pre><br/><p>With protocols, extensions, and computed properties, we created a dark mode friendly way to share colors. This method isn't limited to colors and the user's selected color scheme. What other user preferences could you account for in this way? Think about it and try it out on your own!</p><br/>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/mockingbird</guid><title>Auto-Magically generate mocks using Mockingbird</title><description>Now that you understand Mocking and Stubbing, I'll show you how to avoid writing hand-rolled mocks using Mockingbird; an amazing framework that makes unit testing a breeze.</description><link>https://JacobZivanDesign.com/technology/mockingbird</link><pubDate>Thu, 4 Mar 2021 10:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Auto-Magically generate mocks using Mockingbird</h1><br/><p>I personally use the <a href="https://github.com/birdrides/mockingbird">Mockingbird</a> framework to generate my mocks for me. I don't like having to mock an entire interface for every code path I want to test. <a href="https://github.com/birdrides/mockingbird">Mockingbird</a> affords me the convenience and versatility I've been looking for in the Swift world. It does have its limitations, but it's far better than doing all of that work by hand.</p><p><em>If you're not sure what mocking or stubbing is, check out <a href="../mocking_and_stubbing">this article.</a></em></p><br/><br/><h3>Installing Mockingbird</h3><br/><p>To get started, follow the <a href="https://github.com/birdrides/mockingbird">instructions</a> to install and use Mockingbird in your project. They support CocoaPods, Carthage, and Swift Package Manager (SPM). Please follow the instructions to the letter. This isn't a <em>"normal"</em> package. It is generating source code for your test suite on build. So you need to pay attention to the details.</p><p><em>I've done both Carthage and SPM in the past. I prefer the SPM route.</em></p><br/><br/><h3>Using Mockingbird</h3><br/><p>After you've installed Mockingbird in your project's test target, you're ready to rock! üé∏üé∏ Before we begin, there are several functions you should get to know in order to effectively use Mockingbird. There is a lot that Mockingbird is <a href="https://github.com/birdrides/mockingbird#usage">capable of</a>, but for this tutorial, we'll focus on the following:</p><br/><br/><h4>Creating a mock</h4><br/><p>Mockingbird has an awesome helper function, <code>mock()</code>, that handles most of this for us. It's used rather simply:</p><pre><code><span class="keyword">let</span> myMock = <span class="call">mock</span>(<span class="type">MyClass</span>.<span class="keyword">self</span>)
</code></pre><p>We want to assign the mock to a variable, in most cases, so that we can verify if a function it contains was, or will be, called.</p><br/><br/><h4>Stubbing the mock</h4><br/><p>Stubbing is handled with Mockinbird's <code>given</code> function. <code>given</code> will take a mock and one of its functions or variables and allow you to define the result of its invocation. This is handled with the <code>~&gt;</code> operator like so:</p><pre><code><span class="call">given</span>(myMock.<span class="call">someFunction</span>()) ~&gt; <span class="string">"You da man!"</span>
<span class="comment">// or to throw ü§Ø</span>
<span class="call">given</span>(myMock.<span class="call">someFunction</span>()) ~&gt; { <span class="keyword">throw</span> <span class="type">SomeError</span>() }
</code></pre><br/><br/><br/><h4>Verifying the Mock</h4><br/><p>One of the most useful things about mocking, is verifying that a code path was executed. Mockingbird has a <code>verify</code> method that allows us to check if a function was called or not, or more specifically, exactly how many times it was called. It's pretty straight forward:</p><pre><code><span class="call">verify</span>(mock.<span class="call">someFunc</span>()).<span class="call">wasCalled</span>()
<span class="comment">// Or if the function should get triggered multiple times</span>
<span class="call">verify</span>(mock.<span class="call">someFunc</span>()).<span class="call">wasCalled</span>(<span class="call">exactly</span>(<span class="number">10</span>))
</code></pre><br/><br/><h4>Mocking Parameters and Return Values</h4><br/><p>Another incredibly useful feature of Mockingbird is the <code>any()</code> function. This little gizmo will inspect the type of the object it is supposed to fill, and create a mock of that type on the fly. It's incredibly handy if we need to test what happens if a dependency returns <code>nil</code> or not but we don't care about a specific value.</p><p>I use this a lot, especially for the harder to define values like the <code>Data</code> type:</p><pre><code><span class="call">given</span>(store.<span class="call">getDataForUser</span>(user: <span class="call">any</span>())) ~&gt; <span class="call">any</span>() <span class="comment">// Inline stubbing!!</span>
</code></pre><br/><br/><h2>Doing it, for real....</h2><br/><p>Let's recreate <a href="../mocking_and_stubbing">the example</a> from my last article, but for the tests we'll do things a little differently. Below is a controller that has a logger and a data store. There is a function that reads from the store and logs the event.</p><pre><code><span class="keyword">protocol</span> Loggable {
    <span class="keyword">func</span> log(<span class="keyword">_</span> message: <span class="type">String</span>)
}

<span class="keyword">protocol</span> DataStore {
    <span class="keyword">func</span> getDataFor(<span class="keyword">_</span> user: <span class="type">User</span>) -&gt; <span class="type">Data</span>?
}

<span class="keyword">class</span> Controller {
    <span class="keyword">let</span> logger: <span class="type">Loggable</span>
    <span class="keyword">let</span> store: <span class="type">DataStore</span>
    <span class="keyword">let</span> user: <span class="type">User</span>
    <span class="keyword">var</span> data: <span class="type">Data</span>? = <span class="keyword">nil

    init</span>(<span class="keyword">_</span> logger: <span class="type">Loggable</span>, <span class="keyword">_</span> store: <span class="type">DataStore</span>, <span class="keyword">_</span> user: <span class="type">User</span>) {
        <span class="keyword">self</span>.<span class="property">logger</span> = logger
        <span class="keyword">self</span>.<span class="property">store</span> = store
        <span class="keyword">self</span>.<span class="property">user</span> = user
    }

    <span class="keyword">func</span> loadDataForUser() {
        data = store.<span class="call">getDataFor</span>(user)
        logger.<span class="call">log</span>(<span class="string">"data retrieved"</span>)
    }
}
</code></pre><br/><p>What we'll do instead of hand writing the mocks is use the generated mocks provided to us by Mockingbird. The setup will look like this:</p><br/><pre><code><span class="keyword">class</span> ControllerTests: <span class="type">XCTestCase</span> {
    <span class="keyword">func</span> testLoadDataForUser() {
        <span class="keyword">let</span> logger = <span class="call">mock</span>(<span class="type">Logger</span>.<span class="keyword">self</span>)
        <span class="keyword">let</span> store = <span class="call">mock</span>(<span class="type">DataStore</span>.<span class="keyword">self</span>)
        <span class="keyword">let</span> user = <span class="type">User</span>(named: <span class="string">"Test"</span>)
        <span class="keyword">let</span> controller = <span class="type">Controller</span>(logger, store, user)
    }
}
</code></pre><br/><p>Then we can <strong>Stub</strong> the <strong>Mock</strong> <code>DataStore</code> like:</p><br/><pre><code><span class="call">given</span>(store.<span class="call">getDataForUser</span>(user: user)) ~&gt; <span class="call">any</span>()
</code></pre><br/><p>And finally we can invoke the controller function and run our assertions:</p><br/><pre><code>controller.<span class="call">loadDataForUser</span>()

<span class="call">verify</span>(logger.<span class="call">log</span>(<span class="call">any</span>())).<span class="call">wasCalled</span>()
<span class="call">XCTAssertNotNil</span>(controller.<span class="property">data</span>)
</code></pre><br/><br/><p>Instead of needing to write a mock for each use case we want to test, we can instead generate them on the fly, and stub their responses only when necessary. This reduces so much overhead when it comes to writing tests that it's tough to describe. I can't tell you how many lines of aggravating configuration code this tool has saved me this year alone.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/mocking_and_stubbing</guid><title>What's Mocking and Stubbing?</title><description>What are Mocking and Stubbing and how do those concepts help write write cleaner, more effective unit tests in Swift. We'll explore Protocol Oriented Programming and hand-rolled mocks.</description><link>https://JacobZivanDesign.com/technology/mocking_and_stubbing</link><pubDate>Wed, 3 Mar 2021 10:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>What's Mocking and Stubbing?</h1><p><em>And how do those concepts help write cleaner, more effective unit tests in Swift?</em></p><br/><p>Early on, I encountered the concepts of <strong>Stubbing</strong> and <strong>Mocking</strong> for the first time. I reacted to the discovery much like I did to testing in general. <em>"What's the point?"</em> I clearly didn't get it. In this article, we'll cover what mocks and stubs are, why they're used, and how they're used effectively.</p><br/><blockquote><p>What's the point?</p></blockquote><br/><h2>Are you Mocking me?</h2><p><strong>Mocking</strong> and <strong>Stubbing</strong> are used primarily for <strong>Unit Testing.</strong> But what are Mocks, or Stubs? And what is a "Unit" test? Yea... There's a lot of assumed knowledge here. Let's start by laying out some definitions and context:</p><br/><br/><br/><h3>Unit Testing</h3><br/><p>Unit testing is the act of writing tests where we run a small chunk of code in isolation, specifically, a single function. This "unit" should do exactly <code>A</code> under <code>X</code> conditions or exactly <code>B</code> under <code>Y</code> conditions etc., We control the variables and observe the outcomes at a very small scale.</p><p>Because unit tests target singular functions in the code base, we are able to verify how all the little pieces work in isolation. This gives us confidence that multiple units will integrate together without any surprises. And, what I like most about unit tests, when a test is written well, automated checks catch bugs <em>before</em> they ship to production.</p><p><em>A more specific description can be found on <a href="https://stackoverflow.com/a/1393/9333764">stack overflow</a>, among other places.</em> <a href="https://en.wikipedia.org/wiki/Pure_function">Pure Functions</a> are ideal for unit testing.</p><br/><br/><br/><h3>Mocks</h3><br/><p>Mocks are test doubles of an object that we place inside of our tests. They operate exactly as they are told to, and report back to you what happened in the test.</p><p>Mocks, when created, have the same interface as its target, but none of the functionality. Instead, the mock can be told to return stubbed data or to verify whether or not a mock's function was executed.</p><br/><br/><br/><h3>Stubs</h3><br/><p>Stubs are hardcoded responses that we can force into our test code that allow us to easily test a function fully, without having to configure the rest of the environment to achieve all of the possible outcomes.</p><p><em><a href="https://stackoverflow.com/a/463305/9333764">Here is a good summary</a> of mocking and stubbing if you'd like more info.</em></p><br/><br/><br/><h3>But Why?</h3><br/><p>There are 3 primary reasons I use mocking and stubbing. First, there is a significant reduction in the amount of boilerplate code required to configure each test. Second, we can prevent noisy or expensive tasks from occurring, like log outs or database reads and writes, by replacing those dependencies with mocks. Finally, we can automate tests that verify a code path was executed <em>this can not easily be done without the mock</em>. In short, Mocking and Stubbing allow us to focus on the code we're writing.</p><br/><br/><blockquote><p>Mocking and Stubbing allow us to focus on the code we're writing.</p></blockquote><br/><br/><h2>Writing Mocks and Stubs in Swift</h2><p>Swift is an awesome language. There's a lot to love about it, but, its implementation of <a href="https://en.wikipedia.org/wiki/Reflective_programming">reflection</a> is somewhat limited. Because of that, there used to be no good way to generate a mock and so, many developers have been manually creating them. Fortunately, Swift if is a <a href="https://bit.ly/3uJjpc8">Protocol Oriented Programming</a> Language, and we can account for this slight shortcoming.</p><br/><br/><h3>Hand Rolled Mocks</h3><br/><p>Much of the Swift community manually creates the mocks they need as they need them. To demonstrate how this is done, we'll make a simple example of a controller, a data store, and a logger using <a href="https://www.swiftbysundell.com/basics/protocols/">Protocols</a>. <em>Note the following example does not actually create a logger or store, only their interface.</em></p><p>This is what the implementation might look like:</p><br/><br/><pre><code><span class="keyword">protocol</span> Loggable {
    <span class="keyword">func</span> log(<span class="keyword">_</span> message: <span class="type">String</span>)
}

<span class="keyword">protocol</span> DataStore {
    <span class="keyword">func</span> getDataFor(<span class="keyword">_</span> user: <span class="type">User</span>) -&gt; <span class="type">Data</span>?
}

<span class="keyword">class</span> Controller {
    <span class="keyword">let</span> logger: <span class="type">Loggable</span>
    <span class="keyword">let</span> store: <span class="type">DataStore</span>
    <span class="keyword">let</span> user: <span class="type">User</span>
    <span class="keyword">var</span> data: <span class="type">Data</span>? = <span class="keyword">nil

    init</span>(<span class="keyword">_</span> logger: <span class="type">Loggable</span>, <span class="keyword">_</span> store: <span class="type">DataStore</span>, <span class="keyword">_</span> user: <span class="type">User</span>) {
        <span class="keyword">self</span>.<span class="property">logger</span> = logger
        <span class="keyword">self</span>.<span class="property">store</span> = store
        <span class="keyword">self</span>.<span class="property">user</span> = user
    }

    <span class="keyword">func</span> loadDataForUser() {
        data = store.<span class="call">getDataFor</span>(user)
        logger.<span class="call">log</span>(<span class="string">"data retrieved"</span>)
    }
}
</code></pre><br/><br/><p>The function <code>loadDataForUser</code> should read from a data store, log that it did so, and update the controller's <code>data</code> value. To test this code without actually logging an event or reading from our databases, we will need a mocked version of a logger and a data store. That might look something like this:</p><br/><br/><pre><code><span class="keyword">struct</span> MockLogger: <span class="type">Loggable</span> {
    <span class="keyword">var</span> wasCalled = <span class="keyword">false

    func</span> log(<span class="keyword">_</span> message: <span class="type">String</span>) {
        wasCalled = <span class="keyword">true</span>
    }
}

<span class="keyword">struct</span> MockStore: <span class="type">DataStore</span> {
    <span class="keyword">func</span> getDataFor(<span class="keyword">_</span> user: <span class="type">User</span>) -&gt; <span class="type">Data</span>? {
        <span class="string">""</span>.<span class="call">data</span>(using: .<span class="dotAccess">utf8</span>)
    }
}
</code></pre><br/><br/><p>These mocks will allow us to verify that <code>Controller.loadDataForUser</code> modifies the data variable, <strong>and</strong> that the logger gets called <em>(which is near impossible to do without a mock)</em>. We do this like so:</p><br/><br/><pre><code><span class="keyword">class</span> ControllerTests: <span class="type">XCTestCase</span> {
    <span class="keyword">func</span> testLoadDataForUser() {
        <span class="comment">// Given</span>
        <span class="keyword">let</span> logger = <span class="type">MockLogger</span>()
        <span class="keyword">let</span> controller = <span class="type">Controller</span>(logger, <span class="type">MockStore</span>(), <span class="type">User</span>(named: <span class="string">"Test"</span>))

        <span class="call">XCTAssertFalse</span>(logger.<span class="property">wasCalled</span>)
        <span class="call">XCTAssertNil</span>(controller.<span class="property">data</span>)
        
        <span class="comment">// When</span>
        controller.<span class="call">loadDataForUser</span>()
        
        <span class="comment">// Then</span>
        <span class="call">XCTAssertTrue</span>(logger.<span class="property">wasCalled</span>)
        <span class="call">XCTAssertNotNil</span>(controller.<span class="property">data</span>)
    }
}
</code></pre><br/><br/><p>In that example we mocked two interfaces and effectively tested the <code>Controller</code>. Because of the mocks, we were able to verify the functionality of the <code>Controller</code> without testing the functionality of the <code>DataStore</code> or the <code>Logger</code>. The actual implementations of those will get tested in isolation.</p><p>Now, you may have noticed that there was a bit of configuration code required to run those tests. And I told you that mocking <em>reduces</em> the amount of test configuration we need to write.</p><p>They do. Even hand rolled mocks like these do. But I prefer to have my mocks generated for me in such a way that eliminates the need to create one off mocks like this. Luckily, there is a package that will do just that. In my next article, you'll learn how to generate fully functional mocks using mockingbird üòä</p><h3><a href="../mockingbird"><code>-&gt; Auto-Magically generate mocks using Mockingbird -&gt;</code></a></h3><br/><br/>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/mirroring-kotlins-elvis-operator</guid><title>Mirroring Kotlin's Elvis Operator in Swift</title><description>Unwrap or Throw - Make Swift's equivalent to Kotlin's Elvis Operator!  A Tutorial for adding Custom Operators in Swift.</description><link>https://JacobZivanDesign.com/technology/mirroring-kotlins-elvis-operator</link><pubDate>Mon, 4 Jan 2021 08:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Mirroring Kotlin's Elvis Operator in Swift</h1><p>In many languages, there are ways to coalesce <code>nil</code> values. In Swift, for example, the Nil Coalescing operator is <code>??</code> We use this to provide a fallback value when a variable could be <code>nil</code>, like so:</p><pre><code><span class="keyword">var</span> y: <span class="type">Int</span>? = <span class="keyword">nil
var</span> x = y ?? <span class="number">0</span>
</code></pre><p>In the Kotlin language, there is a similar operator called the "Elvis Operator" <em>because, seriously... it looks a bit like a tiny sideways elvis</em> <code>?:</code> It's used like:</p><pre><code>x = y ?: <span class="number">0</span>
</code></pre><br/><h2>So why try and mirror it?</h2><p>Unlike Swift's <code>??</code>, Kotlin's <code>?:</code> does more than coalesce nil values, it can throw too!</p><pre><code>x = y ?: <span class="keyword">throw</span> <span class="type">SomeException</span>()
</code></pre><p>When used this way, <code>x</code> will still be a non-optional type, but the function will stop there if <code>y</code> is <code>null</code>.</p><p>To do this in Swift, we would generally need to use a <code>guard</code> statement.</p><pre><code><span class="keyword">guard let</span> x = y <span class="keyword">else</span> { 
    <span class="keyword">throw</span> <span class="type">SomeError</span>() 
}
</code></pre><p>It's not terrible, but Kotlin's <code>?:</code> is much nicer, <em>in my opinion.</em></p><br/><h2>Writing a Custom Operator in Swift</h2><p>Swift allows us to write <a href="https://docs.swift.org/swift-book/LanguageGuide/AdvancedOperators.html#ID46">custom operators</a> to handle things like this. Unfortunately, the <code>:</code> character is <a href="https://docs.swift.org/swift-book/ReferenceManual/LexicalStructure.html#ID418">unavailable</a> for use. So we can't make our operator syntactically identical to Kotlin's.</p><p>The operator we'll be creating is an infix operator. Meaning that the operator will fall <strong>in</strong>between its arguments, just like <code>argument1 ?? argument2</code>. In Swift, infix operators must adhere to a <a href="https://developer.apple.com/documentation/swift/swift_standard_library/operator_declarations">Precedence Group</a>. This grouping tells the compiler what order functions should get executed, much like the <a href="https://en.wikipedia.org/wiki/Order_of_operations">Order of Operations</a> in mathematics.</p><p>There is a lot there, so we won't go into the specifics on all of that in this tutorial.</p><br/><h3>Unwrap or Throw</h3><br/><p>Because we can't use Kotlin's <code>?:</code> or Swift's <code>??</code> we'll do something a little different.</p><pre><code>infix operator ??? : <span class="type">TernaryPrecedence</span>
<span class="keyword">func</span> ???&lt;<span class="type">T</span>&gt;(<span class="keyword">_</span> left: <span class="type">Optional</span>&lt;<span class="type">T</span>&gt;, right: <span class="type">Error</span>) <span class="keyword">throws</span> -&gt; <span class="type">T</span> {
    <span class="keyword">guard let</span> value = left <span class="keyword">else</span> { <span class="keyword">throw</span> right }
    <span class="keyword">return</span> value
}
</code></pre><br/><p>Using generics, we can pass any optional type to the left hand side of <code>???</code> for evaluation! Let's take a look at how it's used.</p><pre><code>x = <span class="keyword">try</span> y ??? <span class="type">SomeError</span>()
</code></pre><br/><p>It works splendidly! Because of the way Swift handles throwing functions, we do this differently than in Kotlin. <code>try</code> on the left instead of <code>throw</code> on the right.</p><p>Unlike Kotlin's Elvis Operator, this does not handle both coalescing a <code>nil</code> value and throwing errors. We'll have 2, <code>??</code> and <code>???</code>, and we'll need to use the them appropriately.</p><p>I hope you found this useful!</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/custom-dynamic-fonts-in-swift-ui</guid><title>Scalable Custom Fonts in SwiftUI</title><description>A Tutorial for adding Custom Fonts in SwiftUI with Dynamic Sizes. Learn how to add fonts to an iOS application and set them up to scale with the user's preferred font size through SwiftUI Font extensions.</description><link>https://JacobZivanDesign.com/technology/custom-dynamic-fonts-in-swift-ui</link><pubDate>Sun, 3 Jan 2021 10:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Scalable Custom Fonts in SwiftUI</h1><img src="../../images/custom-font-example.png" alt="Custom Font Example"/><p>Early on in my journey as an iOS engineer, requests from creatives were always points of tension for me. I thought I only had two options:</p><p>Please the designer, or, make a user experience that was resilient to screen size and personal settings (like accessible font sizes).</p><p>Turns out, like most times I think something is either Black or White, I was wrong.</p><p>Custom fonts were one of those taboo topics for me. I didn't know how to utilize them properly. I would add custom fonts to a project, and set very specific font sizes and weights to make the view pixel perfect... <em>on one device.</em> Later I learned about preferred font sizes and how they worked. It kinda rocked my world. Afterwards, I was able to please both our users and creatives with UIFont extensions in UIKit.</p><p>In this tutorial, we will recreate that functionality in SwiftUI.</p><br/><h2>Road Map</h2><p>We're going to cover more than adding fonts to a SwiftUI application. The font's will be scalable with a user's preferred font size, <em>and</em> it will be a developer friendly implementation. To get there, we'll do things in steps:</p><ol><li>Add custom fonts to a project</li><li>Create a simple way to reference the fonts</li><li>Set default values for each <code>TextStyle</code></li><li>Make it Swifty!</li></ol><br/><h2>Adding a Font</h2><h3>Importing Files into Xcode</h3><br/><p>This is a simple step. First find a font you'd like to, <em>and have rights to,</em> use. For this tutorial we'll be using <a href="https://www.jetbrains.com/lp/mono/">JetBrains Mono</a>. When you've downloaded the fonts, move them into your application's directory. Afterwards, open the project in Xcode, ensuring the Navigator Menu is open. Then add the files to your project by clicking the <code>+</code> button in the bottom left, selecting "Add Files to YOUR_PROJECT".</p><img style="width:300px;" src="../../images/add-fonts.png" alt=""/><br/><h3>Provide the Fonts to the Application</h3><br/><p>Adding the fonts to the project is sadly not enough. To utilize the fonts, we need to tell the project what fonts to prepare for use. This is done inside of the application's <code>.plist</code> file. The key is "Fonts provided by application" and its value is the array of filenames you wish to import (excluding file type).</p><p>If you're following along to this tutorial using <strong>JetBrains Mono</strong> you can <code>control + click</code> on the <code>.plist</code> file, then select <code>Open As -&gt; Source Code</code>.</p><img style="width:360px;" src="../../images/plist-source-code.png" alt=""/><br/><p>After the file opens, you can paste the following code after <code>&lt;dict&gt;</code>:</p><br/><pre><code>&lt;key&gt;<span class="type">UIAppFonts</span>&lt;/key&gt;
	&lt;array&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">Bold</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">BoldItalic</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">ExtraBold</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">ExtraBoldItalic</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">ExtraLight</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">ExtraLightItalic</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">Italic</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">Light</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">LightItalic</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">Medium</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">MediumItalic</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">Regular</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">Thin</span>.<span class="property">ttf</span>&lt;/string&gt;
		&lt;string&gt;<span class="type">JetBrainsMono</span>-<span class="type">ThinItalic</span>.<span class="property">ttf</span>&lt;/string&gt;
	&lt;/array&gt;
</code></pre><br/><h2>Enumerate Your Fonts For Easy Reference</h2><p>Now that we've fully imported the fonts, we can use them like so:</p><pre><code><span class="type">Text</span>(<span class="string">""</span>).<span class="call">font</span>(.<span class="call">custom</span>(<span class="string">"JetBrainsMono-Regular"</span>, size: <span class="number">18</span>, relativeTo: .<span class="dotAccess">body</span>))
</code></pre><p>Because the fonts are keyed by filename, using a font after it's imported is prone to human error. I like to enumerate sets of finite options as a type so that I can limit the scope of potential typos to one instance.</p><p>To do this, create an enum of type <code>String</code> that contains each font file name.</p><pre><code><span class="keyword">enum</span> JetBrainsMono: <span class="type">String</span> {
    <span class="keyword">case</span> regular = <span class="string">"JetBrainsMono-Regular"</span>
    <span class="keyword">case</span> italic = <span class="string">"JetBrainsMono-Italic"</span>
    <span class="keyword">case</span> medium = <span class="string">"JetBrainsMono-Medium"</span>
    <span class="keyword">case</span> mediumItalic = <span class="string">"JetBrainsMono-MediumItalic"</span>
    <span class="keyword">case</span> bold = <span class="string">"JetBrainsMono-Bold"</span>
    <span class="keyword">case</span> boldItalic = <span class="string">"JetBrainsMono-BoldItalic"</span>
    <span class="keyword">case</span> extraBold = <span class="string">"JetBrainsMono-ExtraBold"</span>
    <span class="keyword">case</span> extraBoldItalic = <span class="string">"JetBrainsMono-ExtraBoldItalic"</span>
    <span class="keyword">case</span> light = <span class="string">"JetBrainsMono-Light"</span>
    <span class="keyword">case</span> lightItalic = <span class="string">"JetBrainsMono-LightItalic"</span>
    <span class="keyword">case</span> extraLight = <span class="string">"JetBrainsMono-ExtraLight"</span>
    <span class="keyword">case</span> extraLightItalic = <span class="string">"JetBrainsMono-ExtraLightItalic"</span>
    <span class="keyword">case</span> thin = <span class="string">"JetBrainsMono-Thin"</span>
    <span class="keyword">case</span> thinItalic = <span class="string">"JetBrainsMono-ThinItalic"</span>
}
</code></pre><br/><h3>Ahhhh, Type Safety.</h3><br/><p>Now we can use the custom font's with the enumeration, like so:</p><pre><code><span class="type">Text</span>(<span class="string">""</span>).<span class="call">font</span>(.<span class="call">custom</span>(<span class="type">JetBrainsMono</span>.<span class="property">regular</span>.<span class="property">rawValue</span>, size: <span class="number">18</span>, relativeTo: .<span class="dotAccess">body</span>))
</code></pre><br/><h2>Relative Font Sizes</h2><p>The human brain is a fickle thing... We're likely to forget if <code>.body</code> should be size 18 or 24. Even if we do remember, we may mistype the value and get a wonky view. Since there is a finite set of <code>TextStyles</code>, I would again recommend abstracting this bit of detail.</p><p>I did this by extending SwiftUI's <code>Font.TextStyle</code> like so:</p><pre><code><span class="keyword">extension</span> <span class="type">Font</span>.<span class="type">TextStyle</span> {
    <span class="keyword">var</span> size: <span class="type">CGFloat</span> {
        <span class="keyword">switch self</span> {
        <span class="keyword">case</span> .<span class="dotAccess">largeTitle</span>: <span class="keyword">return</span> <span class="number">60</span>
        <span class="keyword">case</span> .<span class="dotAccess">title</span>: <span class="keyword">return</span> <span class="number">48</span>
        <span class="keyword">case</span> .<span class="dotAccess">title2</span>: <span class="keyword">return</span> <span class="number">34</span>
        <span class="keyword">case</span> .<span class="dotAccess">title3</span>: <span class="keyword">return</span> <span class="number">24</span>
        <span class="keyword">case</span> .<span class="dotAccess">headline</span>, .<span class="dotAccess">body</span>: <span class="keyword">return</span> <span class="number">18</span>
        <span class="keyword">case</span> .<span class="dotAccess">subheadline</span>, .<span class="dotAccess">callout</span>: <span class="keyword">return</span> <span class="number">16</span>
        <span class="keyword">case</span> .<span class="dotAccess">footnote</span>: <span class="keyword">return</span> <span class="number">14</span>
        <span class="keyword">case</span> .<span class="dotAccess">caption</span>, .<span class="dotAccess">caption2</span>: <span class="keyword">return</span> <span class="number">12</span>
        <span class="keyword">@unknown default</span>:
            <span class="keyword">return</span> <span class="number">8</span>
        }
    }
}
</code></pre><br/><p>Great! This helps prevent our faulty memories from ruining our UI/UX! It can be used like so:</p><pre><code><span class="type">Text</span>(<span class="string">""</span>)
.<span class="call">font</span>(
    .<span class="call">custom</span>(
        <span class="type">JetBrainsMono</span>.<span class="property">regular</span>.<span class="property">rawValue</span>,
        size: <span class="type">Font</span>.<span class="type">TextStyle</span>.<span class="property">body</span>.<span class="property">size</span>,
        relativeTo: .<span class="dotAccess">body</span>
        )
    )
</code></pre><br/><h3>A Word on Behalf of Designers Everywhere</h3><br/><p>Apple has put <a href="https://developer.apple.com/design/human-interface-guidelines/macos/visual-design/typography/">a lot of thought</a> into their font's sizing and how they scale. But each typeface is unique, and a size 16 SF font will be different than size 16 SomeCustomFont. For those reasons, we use the <code>.custom()</code> function above to relate a base size to how the font should scale with accessibility settings.</p><p><em>I would recommend you sit down with your designer and go over each of Apple's <code>TextStyles</code> with them. Hopefully they're opinionated and will help you nail down what size each of them should be for your custom font.</em></p><br/><h2>Let's Make it Swifty!</h2><pre><code><span class="type">Text</span>(<span class="string">""</span>)
.<span class="call">font</span>(
    .<span class="call">custom</span>(
        <span class="type">JetBrainsMono</span>.<span class="property">regular</span>.<span class="property">rawValue</span>,
        size: <span class="type">Font</span>.<span class="type">TextStyle</span>.<span class="property">body</span>.<span class="property">size</span>,
        relativeTo: .<span class="dotAccess">body</span>
        )
    )
</code></pre><p>That is a long line of code to set a font... That can be fixed.</p><br/><p>First, let's create a helper function to get a custom font using our enum.</p><pre><code><span class="keyword">extension</span> <span class="type">Font</span> {
    <span class="keyword">static func</span> custom(<span class="keyword">_</span> font: <span class="type">JetBrainsMono</span>, relativeTo style: <span class="type">Font</span>.<span class="type">TextStyle</span>) -&gt; <span class="type">Font</span> {
        <span class="call">custom</span>(font.<span class="property">rawValue</span>, size: style.<span class="property">size</span>, relativeTo: style)
    }
}
</code></pre><br/><p>Which we can use like this:</p><pre><code><span class="type">Text</span>(<span class="string">""</span>).<span class="call">font</span>(.<span class="call">custom</span>(.<span class="dotAccess">regular</span>, relativeTo: .<span class="dotAccess">body</span>))
</code></pre><p>Now we're getting somewhere. However, that implementation still leaves too much room for human error. We can do better.</p><br/><p>Next we're going to create some static variables that will contain all of the detail that we don't care to remember. It will go something like this:</p><pre><code><span class="keyword">extension</span> <span class="type">Font</span> {
    <span class="keyword">static let</span> jetBrainsMono = <span class="call">custom</span>(.<span class="dotAccess">regular</span>, relativeTo: .<span class="dotAccess">body</span>)
    <span class="keyword">static let</span> jetBrainsMonoLargeTitle = <span class="call">custom</span>(.<span class="dotAccess">bold</span>, relativeTo: .<span class="dotAccess">largeTitle</span>)
}
</code></pre><br/><p>This will allow us to use our custom font like so:</p><pre><code><span class="type">Text</span>(<span class="string">""</span>).<span class="call">font</span>(.<span class="dotAccess">jetBrainsMono</span>)
</code></pre><p>Now that is swifty!</p><br/><h1>üéâüçæü•≥</h1><p>Good work! You've learned how to add fonts to an XCode project, represent the fonts and their base sizes in enumerations, and replicate SwiftUI's <code>preferredFont</code> implementation!</p><p>In a <a href="../custom-fonts-from-swift-package">newer article</a> you'll learn how to package these fonts for reuse.</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/responding-to-accessible-font-sizes-swiftui</guid><title>Responsive View Components</title><description>A Tutorial for Handling Accessibility in SwiftUI using a ViewBuilder, PreferredFont, and DynamicTypeSize.isAccessibilitySize. Updated for Swift 5.5!</description><link>https://JacobZivanDesign.com/technology/responding-to-accessible-font-sizes-swiftui</link><pubDate>Sun, 3 Jan 2021 05:10:00 -0600</pubDate><content:encoded><![CDATA[<h1>Responsive View Components</h1><p>I used to write my iOS views to be pixel perfect, until I discovered UIKit's <a href="https://developer.apple.com/documentation/uikit/uifont/1619030-preferredfont">Preferred Font</a> method and how it worked. After that, I struggled to implement views that were useful at scale, or even beautiful on smaller screens like that of the iPhone 8. Eventually I designed a UIKit component that accounted for accessible font sizes. In this article we'll remake that component in SwiftUI.</p><br/><h2>The Problem</h2><img class="left-item" style="max-width: 300px; margin-right: 2rem;" alt="A debit card transaction represented in an HStack" src="../../images/hstack_default_size.png"/><br/><br/><br/><br/><br/><br/><p>We have a layout that works perfectly in a SwiftUI <code>HStack</code>. This view contains one <code>Image</code> and two <code>Text</code> views. Looks great right?</p><p>Well...</p><p>Let's look at it after bumping our preferred font size.</p><br/><img class="right-item" style="max-width: 300px; margin-left: 2rem;" alt="A debit card transaction represented in an HStack with very large font" src="../../images/hstack_large_size.png"/><span class="clear-left"></span><h3>Nope!</h3><br/><p>That looks like garbage. We need to respond to the font size increase, and change the layout of this component.</p><p>Good news is, the SwiftUI team has given us easy access to the user's preferred font size.</p><span class="clearfix"></span><br/><h2>Responsive Stack View</h2><p>For this tutorial, we'll focus on a simple view that responds to accessible font sizes. To do that we'll use the <a href="https://developer.apple.com/documentation/swiftui/dynamictypesize"><code>DynamicTypeSize</code></a> Environment variable in SwiftUI.</p><p>On it, there is a computed property, <code>isAccessibilitySize</code>, that returns what we're looking for. If the user has selected to use large fonts <strong>and</strong> has scaled their font up into the larger fonts category, <code>isAccessibilitySize</code> returns <code>true</code>.</p><p>We can add use it like this:</p><pre><code><span class="keyword">public struct</span> SomeView : <span class="type">View</span> {
    <span class="keyword">@Environment</span>(\.<span class="property">dynamicTypeSize</span>) <span class="keyword">public var</span> dynamicTypeSize: <span class="type">DynamicTypeSize</span>

    <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="keyword">if</span> dynamicTypeSize.<span class="property">isAccessibilitySize</span> {
            <span class="type">Text</span>(<span class="string">"isAccessibilitySize == true"</span>)
        } <span class="keyword">else</span> {
            <span class="type">Text</span>(<span class="string">"isAccessibilitySize == false"</span>)
        }
    }
}
</code></pre><br/><br/><br/><h3>That's great! But how do I pass in the content I want?</h3><br/><br/><p>To make our own stack view we'll need to be able to pass in a bunch of subviews. We can do this with a <code>ViewBuilder</code>.</p><p><em>A <a href="https://developer.apple.com/documentation/swiftui/viewbuilder">ViewBuilder</a> is a <a href="https://docs.swift.org/swift-book/LanguageGuide/Properties.html#ID617">property wrapper</a> that allows us to pass one or more views into our stack view as a function.</em></p><p>Alright! Let's put the Responsive Stack View together using the <code>DynamicTypeSize</code> and a <code>ViewBuilder</code>!</p><pre><code><span class="keyword">struct</span> RStack&lt;Content: <span class="type">View</span>&gt; : <span class="type">View</span> {
    <span class="keyword">@Environment</span>(\.<span class="property">dynamicTypeSize</span>) <span class="keyword">var</span> dynamicTypeSize: <span class="type">DynamicTypeSize</span>
    
    <span class="keyword">let</span> content: () -&gt; <span class="type">Content</span>
    
    <span class="keyword">init</span>(<span class="keyword">@ViewBuilder</span> content: <span class="keyword">@escaping</span> () -&gt; <span class="type">Content</span>) {
        <span class="keyword">self</span>.<span class="property">content</span> = content
    }
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="keyword">if</span> dynamicTypeSize.<span class="property">isAccessibilitySize</span> {
            <span class="type">VStack</span> { <span class="call">content</span>() }
        } <span class="keyword">else</span> {
            <span class="type">HStack</span> { <span class="call">content</span>() }
        }
    }
}
</code></pre><br/><br/><h3>Let's see what it looks like!</h3><br/><img class="left-item" style="max-width: 300px;" alt="A debit card transaction represented in an RStack" src="../../images/rstack_default.png"/><br/><br/><br/><br/><p>Notice how the <code>RStack</code> has the same syntax of the <code>HStack</code> and <code>VStack</code>? That's the <code>ViewBuilder</code> doing it's magic.</p><br/><pre><code><span class="keyword">let</span> debitCardImageName = <span class="string">"creditcard.fill"</span> <span class="comment">// #DebtIsDumb</span>

<span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">RStack</span> {
            <span class="type">Image</span>(systemName: debitCardImageName)
                .<span class="call">foregroundColor</span>(.<span class="dotAccess">red</span>)
                .<span class="call">padding</span>(.<span class="dotAccess">trailing</span>)
            
            <span class="type">Text</span>(<span class="string">"Joe's Coffee Shop"</span>)
            <span class="type">Spacer</span>()
            <span class="type">Text</span>(<span class="string">"$2.34"</span>)
        }.<span class="call">padding</span>()
    }
}
</code></pre><br/><img class="right-item" style="max-width: 300px; margin-left: 2rem;" alt="A debit card transaction represented in an RStack with a spacer and very large font" src="../../images/rstack_spacer.png"/><br/><span class="clear-left"></span><br/><br/><br/><h3>Much Better!</h3><br/><p>We're getting closer! Although, that spacer is a bit of a problem...</p><p>Let's make another component to handle that little detail. After all, practice makes permanent.</p><p>For this component, we want to make sure we add a spacer for a horizontal layout, but not a vertical layout. We won't need to use a <code>ViewBuilder</code> because we are only going to be working with 2 <code>Text</code> views.</p><p>Let's do it!</p><span class="clearfix"></span><h3>Practice makes permanent</h3><br/><pre><code><span class="keyword">struct</span> RDualText: <span class="type">View</span> {
    <span class="keyword">@Environment</span>(\.<span class="property">dynamicTypeSize</span>) <span class="keyword">var</span> dynamicTypeSize: <span class="type">DynamicTypeSize</span>

    <span class="keyword">var</span> firstText: <span class="type">Text</span>
    <span class="keyword">var</span> secondText: <span class="type">Text</span>
    <span class="keyword">var</span> spacer = <span class="type">Spacer</span>()
    
    <span class="keyword">init</span>(firstText: <span class="type">Text</span>, secondText: <span class="type">Text</span>) {
        <span class="keyword">self</span>.<span class="property">firstText</span> = firstText
        <span class="keyword">self</span>.<span class="property">secondText</span> = secondText
    }
    
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">RStack</span> {
            <span class="keyword">self</span>.<span class="property">firstText</span>
            <span class="keyword">if</span> !dynamicTypeSize.<span class="property">isAccessibilitySize</span> {
                spacer
            }
            <span class="keyword">self</span>.<span class="property">secondText</span>
        }
    }
}
</code></pre><br/><br/><h3>Putting it all together</h3><br/><p>Alright, let's go back to our content view, and use our new component.</p><img class="left-item" style="max-width: 300px;" alt="A debit card transaction represented in an RStack" src="../../images/rstack_large.png"/><br/><br/><br/><br/><br/><pre><code><span class="keyword">struct</span> ContentView: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">RStack</span> {
            <span class="type">Image</span>(systemName: debitCardImageName)
                .<span class="call">foregroundColor</span>(.<span class="dotAccess">red</span>)
            <span class="type">RDualText</span>(
                firstText: <span class="type">Text</span>(<span class="string">"Joe's Coffee Shop"</span>),
                secondText: <span class="type">Text</span>(<span class="string">"$2.34"</span>)
            )
        }.<span class="call">padding</span>()
    }
}
</code></pre><span class="clearfix"></span><br/><h2>Accessible apps don't have to be ugly.</h2><p>Good work! You've learned how to create a <code>ViewBuilder</code>, and respond to a user's preferred font size! Making a component that accounts for a user's accessibility settings was far more difficult in the world of UIKit. But we've only scratched the surface, there is a lot more to handling accessibility well than what we covered here. There are settings for color blindness, preferring bold fonts, reducing motions and more. And that is just the visual side of accessibility!</p><br/><h3>Homework</h3><br/><p>If you'd like to learn more, I have a challenge for you!</p><p>Take the <code>RStack</code> component and modify it to take a threshold. If the selected font size is greater than the threshold then the <code>RStack</code> flips from horizontal to vertical. When you instantiate your <code>RStack</code>, it should look like this:</p><pre><code><span class="type">RStack</span>(threshold: .<span class="dotAccess">accessibilityMedium</span>) {
    <span class="type">Text</span>(<span class="string">"Top"</span>)
    <span class="type">Spacer</span>()
    <span class="type">Text</span>(<span class="string">"Bottom"</span>)
}
</code></pre>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/why-we-work-matters</guid><title>Why We Work Matters</title><description>Become a better Software Engineer. Discover who your users really are, then, work with purpose and be diligent even in the little things.</description><link>https://JacobZivanDesign.com/technology/why-we-work-matters</link><pubDate>Fri, 1 Jan 2021 09:10:00 -0600</pubDate><content:encoded><![CDATA[<h1>Why We Work Matters</h1><p>Have you ever worked on a project that you were passionate about? I'm fortunate in that I get to all the time. It makes a difference in how I approach the work. When I'm passionate about a problem, I <em>want</em> to solve it, and I want to do it well. The opposite is generally true too. If we are impassionate about a task or a problem, we may try to get the job done hastily so we can get back to the things that we enjoy working on.</p><p><em>What are some things you loathe doing? Writing documents? Working in a legacy code base? UI/UX?</em></p><blockquote><p>If we are impassionate about a task or a problem, we may try to get the job done hastily so we can get back to the things that we enjoy working on.</p></blockquote><p>I hate that we do that. So I sat down and thought about our passionless haste as a problem to be solved. This is what I found.</p><h2>We don't understand <em>Why We Work.</em></h2><p>Why are you a software engineer? Yea, it's fun, it's interesting, and it can pay pretty well. But that's not where I'm going. We're hired for the way our brains work. We're quite adept at looking at something, understanding it, and offering solutions. We are hired to solve <em>user problems.</em> We're also hired to make systems that can scale, are resilient to the future, and have a low lift for others to enter and work on after we've moved on to other projects.</p><blockquote><p>We are hired to solve user problems.</p></blockquote><p>Most of us are passionate about that part. We like to know that we're contributing to something greater. But who are our users? That seems obvious... The people who use the applications we write, our "end users". Well, yes. That is true. Although that's an incomplete answer. What about our application's data, who uses that? What about the documents that you write? Or the internal API you're working on? What about the code base in general? Who are the users of your output?</p><blockquote><p>Who are the users of your output?</p></blockquote><p>That question changed the way I work. All of the code I write is not just for an end user. It's for the business and the new hires that we will make at a later date. It's for a future me, and those like me, who will maintain it. The same applies for the documentation that I write. The context a document can provide to future teams will help them steward the project. It doesn't immediately impact the end user, but the way we handle the mundane tasks will have a great impact on those users in the future.</p><br/><h3>Your users are many</h3><br/><p>I realized that we solve problems for more than the end user alone. We solve problems for our stakeholders, our data analysts, our project managers, our business units, our teammates, and even the people whom we've yet to hire.</p><p>I thought about my output, how it would be consumed, and the impact my work would have on the future. I didn't like the forecast. So I changed it. I decided that I work to serve others, not for the paycheck. I take <em>"little things"</em> quite seriously now. The impact has been significant.</p><p>All aspects of the craft are impacted by this decision. It's made me more serious about pure functions, explicit naming, making impossible state impossible, the Single Responsibility Principle, testing and so much more. Even documentation, which I used to dread, has become a thing I enjoy and take seriously.</p><p>I find myself asking, who will be a "user" of my output when I pull a ticket now. That habit lead me to perform a user interview with one of our data engineers recently, the result of which is now going to change the structure of our logs as a whole.</p><p>When I write a document, I ask similar questions. Who is my audience, what is the purpose, how does it serve?</p><blockquote><p>"I decided that I work to serve others"</p></blockquote><p>Why do you work?</p>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/small-prs</guid><title>Small Pull Requests</title><description>Large vs Small Pull Requests. How to make small pull requests and the benefits. Work faster, find more bugs, write better code, be a better coworker.</description><link>https://JacobZivanDesign.com/technology/small-prs</link><pubDate>Fri, 1 Jan 2021 06:13:00 -0600</pubDate><content:encoded><![CDATA[<h1>Small Pull Requests</h1><p>We've all seen Pull Requests <em>(or PRs)</em> that are so large that they are daunting to review, or the PR covers so many different topics that it's hard to keep things straight. I've seen PRs where there are refactors, renames, many business logic additions, helper method introductions, integrations for all the things, sometimes UI related work, and hopefully some tests. That makes for a large PR, like this one:</p><img src="../../images/largePR.png" alt="Extremely Large Pull Request of actual code changes - Not a simple configuration change or forgot to add a gitignore line."/><p>When we're asked to review a PR like that, it's easy to get frustrated. Especially because that is an actual code change and not a one off that wasn't included in the <code>.gitignore</code> by accident. When confronted with a massive code change for review, I found myself asking questions I couldn't answer.</p><ol><li><em>"Where do I start?"</em></li><li><em>"What am I looking at?"</em></li><li><em>"What does it do?"</em></li><li><em>"How does it work?"</em></li></ol><p>Frankly, these are hard questions to answer when you're looking through 20+ files in a black box, wading through multiple classes and concepts, and are forced to literally try and piece an expert level puzzle together.</p><p>Fortunately, there is a remedy to this problem. Small Pull Requests.</p><br/><br/><h2>What is a small PR?</h2><p>Put simply, a Small Pull Request is a code change of small conceptual complexity, preferably a singular conceptual change.</p><p>It's <em>that</em> simple. The hard part is restraint.</p><p>Often, when we approach a problem, we first go to the code to explore and figure things out. This is a natural and common way we seek to solve the tasks before us, and that approach isn't a bad one. However, what we choose to do after we have explored that problem and decide on the solution can be problematic. It feels natural to keep fighting and slay the dragon then and there. After all, we just figured out the problem, the code is working... "Ship it!"</p><p><strong>NO!</strong></p><p>What we should do is slow down and move forward using what I call the Single Conceptual Change Principle.</p><blockquote><p>Single Conceptual Change Principle: The conscious scoping of code changes into small related units</p></blockquote><p>When exercising the single conceptual change principle the natural by-product is a surprisingly small amount of changed or added code for review. Like this one:</p><img src="../../images/smallPR.png" alt="Small PR Example"/><br/><h3>What do you mean by <em>"singular conceptual change?"</em></h3><br/><p>I'm glad you asked. I'll illustrate with the following scenario:</p><p>You are tasked with logging errors because QA found a bug that's hard to reproduce. Bad news is, there is no logging in your app currently so you've got some work cut out for you. After some digging around you find a new service that is cheap and easy to integrate, so you go ahead and add that dependency to your project. While you're in there, you create a custom logger to reduce the amount of code you need to write to send the errors you want to send with the user information that may be helpful to unwind the errors later. You test it, it works. So now you decide to go and add the logging event to every button press and caught exception in your application. It took three days to figure it all out and push up your code, but it's all there. "No stone left unturned," or so you think.</p><p>You requested review of your large PR at 1500 lines of code and 56 files changed three days ago and it's still not approved, so you badger someone to get to it and they push it through... along with 4 new bugs.</p><h4><em>Make it smaller</em></h4><p>That scenario could have gone differently. Those bugs could have been caught and the code could have been merged in sooner if it had been broken apart. The Pull Requests could have looked more like this:</p><table><thead><tr><th><strong>PR Scope</strong></th><th><strong>Change Footprint</strong></th><th><strong>Feedback</strong></th></tr></thead><tbody><tr><td>Adds logging dependency</td><td>3 files 36 lines of code</td><td>Thumbs Up</td></tr><tr><td>Creates logger class that logs fatal and not fatal messages + tests</td><td>2 File changed, 82 lines of code</td><td>Questions and Conversation</td></tr><tr><td>Creates <code>UserInfo</code> object to get passed along with logged errors for debugging ease</td><td>1 file changed 24 lines of code</td><td>Thumbs Up</td></tr><tr><td>Refactors logger to use optional <code>UserInfo</code> object + tests</td><td>2 files changed 42 lines of code</td><td>Comments and minor optimizations</td></tr><tr><td>Use logger at suspected failure points</td><td>8 files changed 94 lines of code</td><td>2 Defects found, accidentally deleted stuff you didn't mean to</td></tr><tr><td>Use logger at other high risk points...</td><td>7 files changed ... etc.,</td><td></td></tr><tr><td>+ however many more changes you decide to make.</td><td></td><td></td></tr></tbody></table><p>Each one of those PR's covers a small amount of work. The person reviewing them will be able to review it with ease, and will more likely catch errors made or leave feedback that could enhance your design. Plus, because the PRs are so small, people get to the review earlier, and complete it far faster than those large ones.</p><br/><h2>How to be effective with Small Pull Requests</h2><br/><h3>1. Understand the Problem</h3><br/><p>First we need to understand the problem. Here is where we explore in code, ask our questions and get clarity on the task, or try and cut scope if we can.</p><br/><h3>2. Design First</h3><br/><p>After we've researched the problem and found some potential solutions, often times the next best foot forward is to write up a design document and send it to our peers.</p><p>Seems heavy handed? Sometimes it is. Even so, the exercise is worth it. When we get good at it, we can skip it for the truly small stuff. At the very least we should grab someone who would generally review our code <em>(if not possible anyone nerdy will do)</em>, take them to a whiteboard and start explaining the problem, what was learned, and how we plan on solving it.</p><h4>Why?</h4><p>Several awesome things happen here.</p><ol><li>Steps can be named and PR's can be planned in advance</li><li>The person or persons reviewing our code have more context. This allows them to push back on stuff that is important, and to <em>not</em> push back on stuff that they know will be addressed in the coming small prs.</li><li>We get feedback <em>before</em> we implement a solution. This can sometimes alter the solution so dramatically and save an incredible amount of time.</li><li>Naming and conceptual integrity concerns can often be addressed and solved before code review</li></ol><p><em>There are many more benefits to pairing with others on designing the solution for a problem.</em></p><br/><h3>3. Commit to Single Concept PRs</h3><br/><p>By not breaking the work apart, the code change will still end up being a monster that the team will take time to review and will often miss defects or other code smells.</p><br/><p><strong>Single Concept PR's for dummies</strong></p><ol start="0"><li>Understand Problem &amp; Plan it out</li><li>Add Thing A with Tests (1 PR)</li><li>Add Thing B with Tests (1 PR)</li><li>Wire Thing A + B together + tests (1 PR)</li><li>Repeat steps 1 - 3</li></ol><h3>4. Bask in the glorious feeling of efficiently shipping awesome code</h3>]]></content:encoded></item><item><guid isPermaLink="true">https://JacobZivanDesign.com/technology/five-star-rating</guid><title>A Precise 5 Star Rating with¬†SwiftUI</title><description>SwiftUI 5 Star Rating View Tutorial - Use SwiftUI to make a Star Review component from scratch!</description><link>https://JacobZivanDesign.com/technology/five-star-rating</link><pubDate>Sat, 19 Sep 2020 08:13:00 -0500</pubDate><content:encoded><![CDATA[<h1>A Precise 5 Star Rating with¬†SwiftUI</h1><img src="../../images/5star.png" alt="5 star view"/><br/><br/><p>Recently, during some slack time at work, I took a look at a mockup we were showing customers during our discovery interviews. The mockup contained a 5 star rating view. You know the one I'm talking about, they're everywhere. Amazon, Airbnb, Walmart‚Ä¶ you name it. To get some practice in SwiftUI, I decided I'd create that view component from scratch.</p><p>I had a few ideas on how to create the view:</p><ol><li>Give a progress view a custom mask.</li><li>Layout 5 stars and mask over the top of them with a rectangle.</li><li>And finally to use Apple's new <a href="https://developer.apple.com/design/human-interface-guidelines/sf-symbols/overview/">SFSymbols</a> to create a simple version using the full star and half star symbols, but that wasn't going to be precise enough to match the mock up.</li></ol><p>I decided to go with option two: Masking over 5 stars. Though I quickly realized that it wasn't a simple as masking over the collection of the stars. I had forgotten to account for the space between each star! After some thought, I chose to mask each star individually. This is how it works:</p><h2>A 5 point¬†scale</h2><p>Each star needs to represent a portion of the scale. The first star represents 0 to 1, the second 1 to 2 and so on. The simplest solution I could think of was to iterate over an array of stars and create the mask value from <code>rating‚Ää-‚Ääindex</code> then normalizing it with a floor of 0 and a ceiling of 1.</p><p>For example, if the 5 star rating was 3.6, this is what the mask results would look like:</p><table><thead><tr><th align="right">Star Index</th><th align="right">Mask Value</th><th align="right">After normailzation</th></tr></thead><tbody><tr><td align="right">0</td><td align="right">3.6</td><td align="right">1</td></tr><tr><td align="right">1</td><td align="right">2.6</td><td align="right">1</td></tr><tr><td align="right">2</td><td align="right">1.6</td><td align="right">1</td></tr><tr><td align="right">3</td><td align="right">0.6</td><td align="right">0.6</td></tr><tr><td align="right">4</td><td align="right">0</td><td align="right">0</td></tr></tbody></table><p>After that value is returned, we can use it to mask the star by multiplying the mask ratio by the star's width.</p><p>This is what the individual star's code looks like:</p><pre><code><span class="keyword">struct</span> RatingStar: <span class="type">View</span> {
    <span class="keyword">var</span> rating: <span class="type">CGFloat</span>
    <span class="keyword">var</span> color: <span class="type">Color</span>
    <span class="keyword">var</span> index: <span class="type">Int</span>
    
    
    <span class="keyword">var</span> maskRatio: <span class="type">CGFloat</span> {
        <span class="keyword">let</span> mask = rating - <span class="type">CGFloat</span>(index)
        
        <span class="keyword">switch</span> mask {
        <span class="keyword">case</span> <span class="number">1</span>...: <span class="keyword">return</span> <span class="number">1</span>
        <span class="keyword">case</span> ..&lt;<span class="number">0</span>: <span class="keyword">return</span> <span class="number">0</span>
        <span class="keyword">default</span>: <span class="keyword">return</span> mask
        }
    }


    <span class="keyword">init</span>(rating: <span class="type">Decimal</span>, color: <span class="type">Color</span>, index: <span class="type">Int</span>) {
        <span class="comment">// Why decimal? Decoding floats and doubles is not accurate.</span>
        <span class="keyword">self</span>.<span class="property">rating</span> = <span class="type">CGFloat</span>(<span class="type">Double</span>(rating.<span class="property">description</span>) ?? <span class="number">0</span>)
        <span class="keyword">self</span>.<span class="property">color</span> = color
        <span class="keyword">self</span>.<span class="property">index</span> = index
    }


    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">GeometryReader</span> { star <span class="keyword">in</span>
            <span class="type">Image</span>(systemName: <span class="string">"star.fill"</span>)
                .<span class="call">foregroundColor</span>(<span class="keyword">self</span>.<span class="property">color</span>)
                .<span class="call">mask</span>(
                    <span class="type">Rectangle</span>()
                        .<span class="call">size</span>(
                            width: star.<span class="property">size</span>.<span class="property">width</span> * <span class="keyword">self</span>.<span class="property">maskRatio</span>,
                            height: star.<span class="property">size</span>.<span class="property">height</span>
                        )
                    
                )
        }
    }
}
</code></pre><br/><p>Easy right!? Let's lay the code out and see how it looks!</p><p>First, I wanted to separate the background stars and the foreground stars to keep things nice and clean. Next, I decided to put the image into its own view so any updates to it will apply to all locations a star image would be used.</p><pre><code><span class="keyword">public struct</span> FiveStarView: <span class="type">View</span> {
    <span class="keyword">var</span> rating: <span class="type">Decimal</span>
    <span class="keyword">var</span> color: <span class="type">Color</span>
    <span class="keyword">var</span> backgroundColor: <span class="type">Color</span>

    <span class="keyword">public init</span>(
        rating: <span class="type">Decimal</span>,
        color: <span class="type">Color</span> = .<span class="dotAccess">red</span>,
        backgroundColor: <span class="type">Color</span> = .<span class="dotAccess">gray</span>
    ) {
        <span class="keyword">self</span>.<span class="property">rating</span> = rating
        <span class="keyword">self</span>.<span class="property">color</span> = color
        <span class="keyword">self</span>.<span class="property">backgroundColor</span> = backgroundColor
    }

    <span class="keyword">public var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">ZStack</span> {
            <span class="type">BackgroundStars</span>(backgroundColor)
            <span class="type">ForegroundStars</span>(rating: rating, color: color)
        }
    }
}


<span class="keyword">private struct</span> StarImage: <span class="type">View</span> {
    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Image</span>(systemName: <span class="string">"star.fill"</span>)
    }
}


<span class="keyword">private struct</span> BackgroundStars: <span class="type">View</span> {
    <span class="keyword">var</span> color: <span class="type">Color</span>

    <span class="keyword">init</span>(<span class="keyword">_</span> color: <span class="type">Color</span>) {
        <span class="keyword">self</span>.<span class="property">color</span> = color
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">HStack</span> {
            <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">5</span>) { <span class="keyword">_ in</span>
                <span class="type">StarImage</span>()
            }
        }.<span class="call">foregroundColor</span>(color)
    }
}


<span class="keyword">private struct</span> ForegroundStars: <span class="type">View</span> {
    <span class="keyword">var</span> rating: <span class="type">Decimal</span>
    <span class="keyword">var</span> color: <span class="type">Color</span>

    <span class="keyword">init</span>(rating: <span class="type">Decimal</span>, color: <span class="type">Color</span>) {
        <span class="keyword">self</span>.<span class="property">rating</span> = rating
        <span class="keyword">self</span>.<span class="property">color</span> = color
    }

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">HStack</span> {
            <span class="type">ForEach</span>(<span class="number">0</span>..&lt;<span class="number">5</span>) { index <span class="keyword">in</span>
                <span class="type">RatingStar</span>(
                    rating: <span class="keyword">self</span>.<span class="property">rating</span>,
                    color: <span class="keyword">self</span>.<span class="property">color</span>,
                    index: index
                )
            }
        }
    }
}
</code></pre><br/><h2>Crap!</h2><img class="left-item" style="max-width: 300px;" alt="broken 5 star view" src="../../images/5star_fail.png"/><br/><br/><br/><br/><br/><br/><p>Just a minor detail or two. Let's make sure the images can scale and fit the right aspect ratio:</p><pre><code><span class="keyword">private struct</span> StarImage: <span class="type">View</span> {

    <span class="keyword">var</span> body: <span class="keyword">some</span> <span class="type">View</span> {
        <span class="type">Image</span>(systemName: <span class="string">"star.fill"</span>)
            .<span class="call">resizable</span>()
            .<span class="call">aspectRatio</span>(contentMode: .<span class="dotAccess">fill</span>)
    }
}
</code></pre><br/><img class="right-item" style="max-width: 300px;" alt="5 star view" src="../../images/5star_upright.png"/><span class="clear-left"></span><h2>Voila!</h2><p>Like magic! This was a fun little project. In comparison to UIKit (SwiftUI's predecessor), it was far less code and dramatically more enjoyable to create. You can checkout the source code on <a href="https://github.com/JZDesign/FiveStarRating_SwiftUI">Github</a>.</p><p><em>This article was originally posted on Medium</em></p><span class="clearfix" style="overflow:auto;"></span>]]></content:encoded></item></channel></rss>